
Final_arduino_n.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000279e  00002832  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000279e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  0080011c  0080011c  0000284e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000284e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002880  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000028c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002555  00000000  00000000  00002920  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084c  00000000  00000000  00004e75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001807  00000000  00000000  000056c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  00006ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fc  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000428  00000000  00000000  000075b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000079d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 a0 0a 	jmp	0x1540	; 0x1540 <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 87 09 	jmp	0x130e	; 0x130e <__vector_10>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e9       	ldi	r30, 0x9E	; 158
      7c:	f7 e2       	ldi	r31, 0x27	; 39
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 31       	cpi	r26, 0x1C	; 28
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ac e1       	ldi	r26, 0x1C	; 28
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a4 34       	cpi	r26, 0x44	; 68
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 c4 00 	call	0x188	; 0x188 <main>
      9e:	0c 94 cd 13 	jmp	0x279a	; 0x279a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_putchar>:
void uart_init(void);

static FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
static FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

int uart_putchar(char c, FILE *stream) {
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	00 d0       	rcall	.+0      	; 0xac <uart_putchar+0x6>
      ac:	1f 92       	push	r1
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	89 83       	std	Y+1, r24	; 0x01
      b4:	7b 83       	std	Y+3, r23	; 0x03
      b6:	6a 83       	std	Y+2, r22	; 0x02
	if (c == '\n') {
      b8:	89 81       	ldd	r24, Y+1	; 0x01
      ba:	8a 30       	cpi	r24, 0x0A	; 10
      bc:	31 f4       	brne	.+12     	; 0xca <uart_putchar+0x24>
		uart_putchar('\r', stream);
      be:	8a 81       	ldd	r24, Y+2	; 0x02
      c0:	9b 81       	ldd	r25, Y+3	; 0x03
      c2:	bc 01       	movw	r22, r24
      c4:	8d e0       	ldi	r24, 0x0D	; 13
      c6:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
      ca:	80 ec       	ldi	r24, 0xC0	; 192
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	fc 01       	movw	r30, r24
      d0:	80 81       	ld	r24, Z
      d2:	88 2f       	mov	r24, r24
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	80 72       	andi	r24, 0x20	; 32
      d8:	99 27       	eor	r25, r25
      da:	89 2b       	or	r24, r25
      dc:	b1 f3       	breq	.-20     	; 0xca <uart_putchar+0x24>
	UDR0 = c;
      de:	86 ec       	ldi	r24, 0xC6	; 198
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	29 81       	ldd	r18, Y+1	; 0x01
      e4:	fc 01       	movw	r30, r24
      e6:	20 83       	st	Z, r18
	return 0;
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	90 e0       	ldi	r25, 0x00	; 0
}
      ec:	0f 90       	pop	r0
      ee:	0f 90       	pop	r0
      f0:	0f 90       	pop	r0
      f2:	df 91       	pop	r29
      f4:	cf 91       	pop	r28
      f6:	08 95       	ret

000000f8 <uart_getchar>:

int uart_getchar(FILE *stream) {
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	00 d0       	rcall	.+0      	; 0xfe <uart_getchar+0x6>
      fe:	cd b7       	in	r28, 0x3d	; 61
     100:	de b7       	in	r29, 0x3e	; 62
     102:	9a 83       	std	Y+2, r25	; 0x02
     104:	89 83       	std	Y+1, r24	; 0x01
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
     106:	80 ec       	ldi	r24, 0xC0	; 192
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	fc 01       	movw	r30, r24
     10c:	80 81       	ld	r24, Z
     10e:	88 23       	and	r24, r24
     110:	d4 f7       	brge	.-12     	; 0x106 <uart_getchar+0xe>
	return UDR0;
     112:	86 ec       	ldi	r24, 0xC6	; 198
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	fc 01       	movw	r30, r24
     118:	80 81       	ld	r24, Z
     11a:	88 2f       	mov	r24, r24
     11c:	90 e0       	ldi	r25, 0x00	; 0
}
     11e:	0f 90       	pop	r0
     120:	0f 90       	pop	r0
     122:	df 91       	pop	r29
     124:	cf 91       	pop	r28
     126:	08 95       	ret

00000128 <uart_init>:

void uart_init(void) {
     128:	cf 93       	push	r28
     12a:	df 93       	push	r29
     12c:	cd b7       	in	r28, 0x3d	; 61
     12e:	de b7       	in	r29, 0x3e	; 62
	UBRR0H = UBRRH_VALUE;
     130:	85 ec       	ldi	r24, 0xC5	; 197
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	fc 01       	movw	r30, r24
     136:	10 82       	st	Z, r1
	UBRR0L = UBRRL_VALUE;
     138:	84 ec       	ldi	r24, 0xC4	; 196
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	20 e1       	ldi	r18, 0x10	; 16
     13e:	fc 01       	movw	r30, r24
     140:	20 83       	st	Z, r18

	#if USE_2X
	UCSR0A |= _BV(U2X0);
     142:	80 ec       	ldi	r24, 0xC0	; 192
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	20 ec       	ldi	r18, 0xC0	; 192
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	f9 01       	movw	r30, r18
     14c:	20 81       	ld	r18, Z
     14e:	22 60       	ori	r18, 0x02	; 2
     150:	fc 01       	movw	r30, r24
     152:	20 83       	st	Z, r18
	#else
	UCSR0A &= ~(_BV(U2X0));
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
     154:	82 ec       	ldi	r24, 0xC2	; 194
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	26 e0       	ldi	r18, 0x06	; 6
     15a:	fc 01       	movw	r30, r24
     15c:	20 83       	st	Z, r18
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
     15e:	81 ec       	ldi	r24, 0xC1	; 193
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	28 e1       	ldi	r18, 0x18	; 24
     164:	fc 01       	movw	r30, r24
     166:	20 83       	st	Z, r18

    // Redirect stdin and stdout so functions like printf and getchar work.
	stdout = &uart_output;
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	91 e0       	ldi	r25, 0x01	; 1
     16c:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <__iob+0x3>
     170:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__iob+0x2>
	stdin = &uart_input;
     174:	8e e0       	ldi	r24, 0x0E	; 14
     176:	91 e0       	ldi	r25, 0x01	; 1
     178:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <__iob+0x1>
     17c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__iob>
}
     180:	00 00       	nop
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	08 95       	ret

00000188 <main>:
uint16_t result_PWM=0,result_LED=0,result_BU=0,result_WIFI=0;

static void send_command1(void);
static void send_command2(void);
int main(void)
{
     188:	0f 93       	push	r16
     18a:	1f 93       	push	r17
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62
     194:	c6 58       	subi	r28, 0x86	; 134
     196:	d1 09       	sbc	r29, r1
     198:	0f b6       	in	r0, 0x3f	; 63
     19a:	f8 94       	cli
     19c:	de bf       	out	0x3e, r29	; 62
     19e:	0f be       	out	0x3f, r0	; 63
     1a0:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	//PORTD |= (1 << PORTD2);//use PD2 to test the LEDs
	DDRB |= (1<<PORTB2); 
     1a2:	84 e2       	ldi	r24, 0x24	; 36
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	24 e2       	ldi	r18, 0x24	; 36
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	f9 01       	movw	r30, r18
     1ac:	20 81       	ld	r18, Z
     1ae:	24 60       	ori	r18, 0x04	; 4
     1b0:	fc 01       	movw	r30, r24
     1b2:	20 83       	st	Z, r18
	DDRB |= (1<<PORTB3); 
     1b4:	84 e2       	ldi	r24, 0x24	; 36
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	24 e2       	ldi	r18, 0x24	; 36
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	f9 01       	movw	r30, r18
     1be:	20 81       	ld	r18, Z
     1c0:	28 60       	ori	r18, 0x08	; 8
     1c2:	fc 01       	movw	r30, r24
     1c4:	20 83       	st	Z, r18
	DDRB |= (1<<PORTB4); //send to tachometer
     1c6:	84 e2       	ldi	r24, 0x24	; 36
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	24 e2       	ldi	r18, 0x24	; 36
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	f9 01       	movw	r30, r18
     1d0:	20 81       	ld	r18, Z
     1d2:	20 61       	ori	r18, 0x10	; 16
     1d4:	fc 01       	movw	r30, r24
     1d6:	20 83       	st	Z, r18
	DDRB |= (1<<PORTB5); //led output for stable pwm
     1d8:	84 e2       	ldi	r24, 0x24	; 36
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	24 e2       	ldi	r18, 0x24	; 36
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	f9 01       	movw	r30, r18
     1e2:	20 81       	ld	r18, Z
     1e4:	20 62       	ori	r18, 0x20	; 32
     1e6:	fc 01       	movw	r30, r24
     1e8:	20 83       	st	Z, r18
	//PORTD |= (1 << PORTD2);//use PD2 to test the LEDs
	//DDRD |= (1<<PORTD7);
	DDRD |= (1<<PORTD5);
     1ea:	8a e2       	ldi	r24, 0x2A	; 42
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	2a e2       	ldi	r18, 0x2A	; 42
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	f9 01       	movw	r30, r18
     1f4:	20 81       	ld	r18, Z
     1f6:	20 62       	ori	r18, 0x20	; 32
     1f8:	fc 01       	movw	r30, r24
     1fa:	20 83       	st	Z, r18
	DDRD |= (1<<PORTD4);
     1fc:	8a e2       	ldi	r24, 0x2A	; 42
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	2a e2       	ldi	r18, 0x2A	; 42
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	f9 01       	movw	r30, r18
     206:	20 81       	ld	r18, Z
     208:	20 61       	ori	r18, 0x10	; 16
     20a:	fc 01       	movw	r30, r24
     20c:	20 83       	st	Z, r18
	DDRB |= (1<<PORTB1); //led output for stable pwm
     20e:	84 e2       	ldi	r24, 0x24	; 36
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	24 e2       	ldi	r18, 0x24	; 36
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	f9 01       	movw	r30, r18
     218:	20 81       	ld	r18, Z
     21a:	22 60       	ori	r18, 0x02	; 2
     21c:	fc 01       	movw	r30, r24
     21e:	20 83       	st	Z, r18
	
	TCCR0A |= (1<<WGM01);//ctc
     220:	84 e4       	ldi	r24, 0x44	; 68
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	24 e4       	ldi	r18, 0x44	; 68
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	f9 01       	movw	r30, r18
     22a:	20 81       	ld	r18, Z
     22c:	22 60       	ori	r18, 0x02	; 2
     22e:	fc 01       	movw	r30, r24
     230:	20 83       	st	Z, r18
	TCCR0B |= (1<<CS02) | (1<<CS00);//clk/1024
     232:	85 e4       	ldi	r24, 0x45	; 69
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	25 e4       	ldi	r18, 0x45	; 69
     238:	30 e0       	ldi	r19, 0x00	; 0
     23a:	f9 01       	movw	r30, r18
     23c:	20 81       	ld	r18, Z
     23e:	25 60       	ori	r18, 0x05	; 5
     240:	fc 01       	movw	r30, r24
     242:	20 83       	st	Z, r18
	TCCR0A |= (1 << COM0A0);
     244:	84 e4       	ldi	r24, 0x44	; 68
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	24 e4       	ldi	r18, 0x44	; 68
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	f9 01       	movw	r30, r18
     24e:	20 81       	ld	r18, Z
     250:	20 64       	ori	r18, 0x40	; 64
     252:	fc 01       	movw	r30, r24
     254:	20 83       	st	Z, r18
	OCR0A =	255;
     256:	87 e4       	ldi	r24, 0x47	; 71
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	2f ef       	ldi	r18, 0xFF	; 255
     25c:	fc 01       	movw	r30, r24
     25e:	20 83       	st	Z, r18
	TIMSK0|= (1<<OCIE0A); //interrupt enable
     260:	8e e6       	ldi	r24, 0x6E	; 110
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	2e e6       	ldi	r18, 0x6E	; 110
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	f9 01       	movw	r30, r18
     26a:	20 81       	ld	r18, Z
     26c:	22 60       	ori	r18, 0x02	; 2
     26e:	fc 01       	movw	r30, r24
     270:	20 83       	st	Z, r18
	
	OCR1A = TCNT1 + 10;
     272:	88 e8       	ldi	r24, 0x88	; 136
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	24 e8       	ldi	r18, 0x84	; 132
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	f9 01       	movw	r30, r18
     27c:	20 81       	ld	r18, Z
     27e:	31 81       	ldd	r19, Z+1	; 0x01
     280:	26 5f       	subi	r18, 0xF6	; 246
     282:	3f 4f       	sbci	r19, 0xFF	; 255
     284:	fc 01       	movw	r30, r24
     286:	31 83       	std	Z+1, r19	; 0x01
     288:	20 83       	st	Z, r18
	TIMSK1 |= (1 << ICIE1); // set edge interruption
     28a:	8f e6       	ldi	r24, 0x6F	; 111
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	2f e6       	ldi	r18, 0x6F	; 111
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	f9 01       	movw	r30, r18
     294:	20 81       	ld	r18, Z
     296:	20 62       	ori	r18, 0x20	; 32
     298:	fc 01       	movw	r30, r24
     29a:	20 83       	st	Z, r18
	TIMSK1 |= (1 <<(TOIE1));
     29c:	8f e6       	ldi	r24, 0x6F	; 111
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	2f e6       	ldi	r18, 0x6F	; 111
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	f9 01       	movw	r30, r18
     2a6:	20 81       	ld	r18, Z
     2a8:	21 60       	ori	r18, 0x01	; 1
     2aa:	fc 01       	movw	r30, r24
     2ac:	20 83       	st	Z, r18
	TCCR1B |= (1 << ICES1); //rising edge
     2ae:	81 e8       	ldi	r24, 0x81	; 129
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	21 e8       	ldi	r18, 0x81	; 129
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	f9 01       	movw	r30, r18
     2b8:	20 81       	ld	r18, Z
     2ba:	20 64       	ori	r18, 0x40	; 64
     2bc:	fc 01       	movw	r30, r24
     2be:	20 83       	st	Z, r18
	TCCR1B |= (1 << CS12); // pre-scaler 1 bits
     2c0:	81 e8       	ldi	r24, 0x81	; 129
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	21 e8       	ldi	r18, 0x81	; 129
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	f9 01       	movw	r30, r18
     2ca:	20 81       	ld	r18, Z
     2cc:	24 60       	ori	r18, 0x04	; 4
     2ce:	fc 01       	movw	r30, r24
     2d0:	20 83       	st	Z, r18
	
	EICRA |= (1 << ISC01) | (1 << ISC00);//INT0 interrupt on rising edge
     2d2:	89 e6       	ldi	r24, 0x69	; 105
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	29 e6       	ldi	r18, 0x69	; 105
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	f9 01       	movw	r30, r18
     2dc:	20 81       	ld	r18, Z
     2de:	23 60       	ori	r18, 0x03	; 3
     2e0:	fc 01       	movw	r30, r24
     2e2:	20 83       	st	Z, r18
	EIMSK |= (1 << INT0); //Enable INT0
     2e4:	8d e3       	ldi	r24, 0x3D	; 61
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	2d e3       	ldi	r18, 0x3D	; 61
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	f9 01       	movw	r30, r18
     2ee:	20 81       	ld	r18, Z
     2f0:	21 60       	ori	r18, 0x01	; 1
     2f2:	fc 01       	movw	r30, r24
     2f4:	20 83       	st	Z, r18
	
	EICRA |= (1 << ISC11) | (1 << ISC10);//INT0 interrupt on rising edge
     2f6:	89 e6       	ldi	r24, 0x69	; 105
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	29 e6       	ldi	r18, 0x69	; 105
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	f9 01       	movw	r30, r18
     300:	20 81       	ld	r18, Z
     302:	2c 60       	ori	r18, 0x0C	; 12
     304:	fc 01       	movw	r30, r24
     306:	20 83       	st	Z, r18
	//EIMSK |= (1 << INT1); //Enable INT0
	
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));
     308:	8a e7       	ldi	r24, 0x7A	; 122
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	2a e7       	ldi	r18, 0x7A	; 122
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	f9 01       	movw	r30, r18
     312:	20 81       	ld	r18, Z
     314:	27 60       	ori	r18, 0x07	; 7
     316:	fc 01       	movw	r30, r24
     318:	20 83       	st	Z, r18
	//Prescaler at 128 so we have an 125Khz clock source
	ADMUX |= (1<<REFS0);
     31a:	8c e7       	ldi	r24, 0x7C	; 124
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	2c e7       	ldi	r18, 0x7C	; 124
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	f9 01       	movw	r30, r18
     324:	20 81       	ld	r18, Z
     326:	20 64       	ori	r18, 0x40	; 64
     328:	fc 01       	movw	r30, r24
     32a:	20 83       	st	Z, r18
	ADMUX &= ~(1<<REFS1); //Avcc(+5v) as voltage reference
     32c:	8c e7       	ldi	r24, 0x7C	; 124
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	2c e7       	ldi	r18, 0x7C	; 124
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	f9 01       	movw	r30, r18
     336:	20 81       	ld	r18, Z
     338:	2f 77       	andi	r18, 0x7F	; 127
     33a:	fc 01       	movw	r30, r24
     33c:	20 83       	st	Z, r18
	ADCSRB &= ~((1<<ADTS2)|(1<<ADTS1)|(1<<ADTS0)); 
     33e:	8b e7       	ldi	r24, 0x7B	; 123
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	2b e7       	ldi	r18, 0x7B	; 123
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	f9 01       	movw	r30, r18
     348:	20 81       	ld	r18, Z
     34a:	28 7f       	andi	r18, 0xF8	; 248
     34c:	fc 01       	movw	r30, r24
     34e:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADATE);
     350:	8a e7       	ldi	r24, 0x7A	; 122
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	2a e7       	ldi	r18, 0x7A	; 122
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	f9 01       	movw	r30, r18
     35a:	20 81       	ld	r18, Z
     35c:	20 62       	ori	r18, 0x20	; 32
     35e:	fc 01       	movw	r30, r24
     360:	20 83       	st	Z, r18
	//Signal source, in this case is the free-running
	ADCSRA |= (1<<ADEN); //Power up the ADC
     362:	8a e7       	ldi	r24, 0x7A	; 122
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	2a e7       	ldi	r18, 0x7A	; 122
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	f9 01       	movw	r30, r18
     36c:	20 81       	ld	r18, Z
     36e:	20 68       	ori	r18, 0x80	; 128
     370:	fc 01       	movw	r30, r24
     372:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC); //Start converting
     374:	8a e7       	ldi	r24, 0x7A	; 122
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	2a e7       	ldi	r18, 0x7A	; 122
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	f9 01       	movw	r30, r18
     37e:	20 81       	ld	r18, Z
     380:	20 64       	ori	r18, 0x40	; 64
     382:	fc 01       	movw	r30, r24
     384:	20 83       	st	Z, r18
	
	counter = 0;
     386:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <counter+0x1>
     38a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <counter>
	uint16_t flag_tach=0,flag_b=0;
     38e:	1e 82       	std	Y+6, r1	; 0x06
     390:	1d 82       	std	Y+5, r1	; 0x05
     392:	18 86       	std	Y+8, r1	; 0x08
     394:	1f 82       	std	Y+7, r1	; 0x07
	uint16_t err_PWM=0;
     396:	1a 82       	std	Y+2, r1	; 0x02
     398:	19 82       	std	Y+1, r1	; 0x01
	//send_command();
	
	sei(); //set i
     39a:	78 94       	sei
	
	uart_init();
     39c:	0e 94 94 00 	call	0x128	; 0x128 <uart_init>
	
	PORTD = 0;
     3a0:	8b e2       	ldi	r24, 0x2B	; 43
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	fc 01       	movw	r30, r24
     3a6:	10 82       	st	Z, r1
    while (1) 
    {
		PORTB &= ~(1 << PORTB1);
     3a8:	85 e2       	ldi	r24, 0x25	; 37
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	25 e2       	ldi	r18, 0x25	; 37
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	f9 01       	movw	r30, r18
     3b2:	20 81       	ld	r18, Z
     3b4:	2d 7f       	andi	r18, 0xFD	; 253
     3b6:	fc 01       	movw	r30, r24
     3b8:	20 83       	st	Z, r18
		PORTB &= ~(1 << PORTB2);
     3ba:	85 e2       	ldi	r24, 0x25	; 37
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	25 e2       	ldi	r18, 0x25	; 37
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	f9 01       	movw	r30, r18
     3c4:	20 81       	ld	r18, Z
     3c6:	2b 7f       	andi	r18, 0xFB	; 251
     3c8:	fc 01       	movw	r30, r24
     3ca:	20 83       	st	Z, r18
		PORTB &= ~(1 << PORTB3);
     3cc:	85 e2       	ldi	r24, 0x25	; 37
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	25 e2       	ldi	r18, 0x25	; 37
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	f9 01       	movw	r30, r18
     3d6:	20 81       	ld	r18, Z
     3d8:	27 7f       	andi	r18, 0xF7	; 247
     3da:	fc 01       	movw	r30, r24
     3dc:	20 83       	st	Z, r18
		PORTB &= ~(1 << PORTB5);
     3de:	85 e2       	ldi	r24, 0x25	; 37
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	25 e2       	ldi	r18, 0x25	; 37
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	f9 01       	movw	r30, r18
     3e8:	20 81       	ld	r18, Z
     3ea:	2f 7d       	andi	r18, 0xDF	; 223
     3ec:	fc 01       	movw	r30, r24
     3ee:	20 83       	st	Z, r18
		result_PWM = 0;
     3f0:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <result_PWM+0x1>
     3f4:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <result_PWM>
		result_LED = 0;
     3f8:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <result_LED+0x1>
     3fc:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <result_LED>
		result_BU = 0;
     400:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <result_BU+0x1>
     404:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <result_BU>
		result_WIFI = 0;
     408:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <result_WIFI+0x1>
     40c:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <result_WIFI>
		//start = 0;
		
		send_command1();
     410:	0e 94 ce 0a 	call	0x159c	; 0x159c <send_command1>
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	a0 ea       	ldi	r26, 0xA0	; 160
     41a:	b0 e4       	ldi	r27, 0x40	; 64
     41c:	89 a7       	std	Y+41, r24	; 0x29
     41e:	9a a7       	std	Y+42, r25	; 0x2a
     420:	ab a7       	std	Y+43, r26	; 0x2b
     422:	bc a7       	std	Y+44, r27	; 0x2c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     424:	20 e0       	ldi	r18, 0x00	; 0
     426:	30 e5       	ldi	r19, 0x50	; 80
     428:	43 e4       	ldi	r20, 0x43	; 67
     42a:	57 e4       	ldi	r21, 0x47	; 71
     42c:	69 a5       	ldd	r22, Y+41	; 0x29
     42e:	7a a5       	ldd	r23, Y+42	; 0x2a
     430:	8b a5       	ldd	r24, Y+43	; 0x2b
     432:	9c a5       	ldd	r25, Y+44	; 0x2c
     434:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
     438:	dc 01       	movw	r26, r24
     43a:	cb 01       	movw	r24, r22
     43c:	8d a7       	std	Y+45, r24	; 0x2d
     43e:	9e a7       	std	Y+46, r25	; 0x2e
     440:	af a7       	std	Y+47, r26	; 0x2f
     442:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	40 e8       	ldi	r20, 0x80	; 128
     44a:	5f e3       	ldi	r21, 0x3F	; 63
     44c:	6d a5       	ldd	r22, Y+45	; 0x2d
     44e:	7e a5       	ldd	r23, Y+46	; 0x2e
     450:	8f a5       	ldd	r24, Y+47	; 0x2f
     452:	98 a9       	ldd	r25, Y+48	; 0x30
     454:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__cmpsf2>
     458:	88 23       	and	r24, r24
     45a:	2c f4       	brge	.+10     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
		__ticks = 1;
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	9a ab       	std	Y+50, r25	; 0x32
     462:	89 ab       	std	Y+49, r24	; 0x31
     464:	3f c0       	rjmp	.+126    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
	else if (__tmp > 65535)
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	3f ef       	ldi	r19, 0xFF	; 255
     46a:	4f e7       	ldi	r20, 0x7F	; 127
     46c:	57 e4       	ldi	r21, 0x47	; 71
     46e:	6d a5       	ldd	r22, Y+45	; 0x2d
     470:	7e a5       	ldd	r23, Y+46	; 0x2e
     472:	8f a5       	ldd	r24, Y+47	; 0x2f
     474:	98 a9       	ldd	r25, Y+48	; 0x30
     476:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
     47a:	18 16       	cp	r1, r24
     47c:	4c f5       	brge	.+82     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	40 e2       	ldi	r20, 0x20	; 32
     484:	51 e4       	ldi	r21, 0x41	; 65
     486:	69 a5       	ldd	r22, Y+41	; 0x29
     488:	7a a5       	ldd	r23, Y+42	; 0x2a
     48a:	8b a5       	ldd	r24, Y+43	; 0x2b
     48c:	9c a5       	ldd	r25, Y+44	; 0x2c
     48e:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
     492:	dc 01       	movw	r26, r24
     494:	cb 01       	movw	r24, r22
     496:	bc 01       	movw	r22, r24
     498:	cd 01       	movw	r24, r26
     49a:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
     49e:	dc 01       	movw	r26, r24
     4a0:	cb 01       	movw	r24, r22
     4a2:	9a ab       	std	Y+50, r25	; 0x32
     4a4:	89 ab       	std	Y+49, r24	; 0x31
     4a6:	0f c0       	rjmp	.+30     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4a8:	88 e8       	ldi	r24, 0x88	; 136
     4aa:	93 e1       	ldi	r25, 0x13	; 19
     4ac:	9c ab       	std	Y+52, r25	; 0x34
     4ae:	8b ab       	std	Y+51, r24	; 0x33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4b0:	8b a9       	ldd	r24, Y+51	; 0x33
     4b2:	9c a9       	ldd	r25, Y+52	; 0x34
     4b4:	01 97       	sbiw	r24, 0x01	; 1
     4b6:	f1 f7       	brne	.-4      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4b8:	9c ab       	std	Y+52, r25	; 0x34
     4ba:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4bc:	89 a9       	ldd	r24, Y+49	; 0x31
     4be:	9a a9       	ldd	r25, Y+50	; 0x32
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	9a ab       	std	Y+50, r25	; 0x32
     4c4:	89 ab       	std	Y+49, r24	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4c6:	89 a9       	ldd	r24, Y+49	; 0x31
     4c8:	9a a9       	ldd	r25, Y+50	; 0x32
     4ca:	89 2b       	or	r24, r25
     4cc:	69 f7       	brne	.-38     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4ce:	14 c0       	rjmp	.+40     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4d0:	6d a5       	ldd	r22, Y+45	; 0x2d
     4d2:	7e a5       	ldd	r23, Y+46	; 0x2e
     4d4:	8f a5       	ldd	r24, Y+47	; 0x2f
     4d6:	98 a9       	ldd	r25, Y+48	; 0x30
     4d8:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
     4dc:	dc 01       	movw	r26, r24
     4de:	cb 01       	movw	r24, r22
     4e0:	9a ab       	std	Y+50, r25	; 0x32
     4e2:	89 ab       	std	Y+49, r24	; 0x31
     4e4:	89 a9       	ldd	r24, Y+49	; 0x31
     4e6:	9a a9       	ldd	r25, Y+50	; 0x32
     4e8:	9e ab       	std	Y+54, r25	; 0x36
     4ea:	8d ab       	std	Y+53, r24	; 0x35
     4ec:	8d a9       	ldd	r24, Y+53	; 0x35
     4ee:	9e a9       	ldd	r25, Y+54	; 0x36
     4f0:	01 97       	sbiw	r24, 0x01	; 1
     4f2:	f1 f7       	brne	.-4      	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4f4:	9e ab       	std	Y+54, r25	; 0x36
     4f6:	8d ab       	std	Y+53, r24	; 0x35
		//_delay_ms(10);
		//printf("%d\n",dutycycle);
		_delay_ms(5);
		//printf("%d\n",start);
		while(start == 1)
     4f8:	02 c7       	rjmp	.+3588   	; 0x12fe <__stack+0x9ff>
		{
			uint16_t k = 0;
     4fa:	1c 82       	std	Y+4, r1	; 0x04
     4fc:	1b 82       	std	Y+3, r1	; 0x03
			//_delay_ms(50);
			PORTB |= (1 << PORTB5);
     4fe:	85 e2       	ldi	r24, 0x25	; 37
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	25 e2       	ldi	r18, 0x25	; 37
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	f9 01       	movw	r30, r18
     508:	20 81       	ld	r18, Z
     50a:	20 62       	ori	r18, 0x20	; 32
     50c:	fc 01       	movw	r30, r24
     50e:	20 83       	st	Z, r18
			//PORTB |= (1 << PORTB2);
			//PORTB |= (1 << PORTB3);
			
			while((dutycycle>TEST_PWM+2) || (dutycycle<TEST_PWM-2));
     510:	00 00       	nop
     512:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <dutycycle>
     516:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <dutycycle+0x1>
     51a:	0d 97       	sbiw	r24, 0x0d	; 13
     51c:	d0 f7       	brcc	.-12     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
     51e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <dutycycle>
     522:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <dutycycle+0x1>
     526:	08 97       	sbiw	r24, 0x08	; 8
     528:	a0 f3       	brcs	.-24     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
			OCR0A =	TEST_RPM;
     52a:	87 e4       	ldi	r24, 0x47	; 71
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	2c e8       	ldi	r18, 0x8C	; 140
     530:	fc 01       	movw	r30, r24
     532:	20 83       	st	Z, r18
			while(dutycycle==TEST_PWM);
     534:	00 00       	nop
     536:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <dutycycle>
     53a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <dutycycle+0x1>
     53e:	0a 97       	sbiw	r24, 0x0a	; 10
     540:	d1 f3       	breq	.-12     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	a8 e4       	ldi	r26, 0x48	; 72
     548:	b2 e4       	ldi	r27, 0x42	; 66
     54a:	89 87       	std	Y+9, r24	; 0x09
     54c:	9a 87       	std	Y+10, r25	; 0x0a
     54e:	ab 87       	std	Y+11, r26	; 0x0b
     550:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	30 e5       	ldi	r19, 0x50	; 80
     556:	43 e4       	ldi	r20, 0x43	; 67
     558:	57 e4       	ldi	r21, 0x47	; 71
     55a:	69 85       	ldd	r22, Y+9	; 0x09
     55c:	7a 85       	ldd	r23, Y+10	; 0x0a
     55e:	8b 85       	ldd	r24, Y+11	; 0x0b
     560:	9c 85       	ldd	r25, Y+12	; 0x0c
     562:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
     566:	dc 01       	movw	r26, r24
     568:	cb 01       	movw	r24, r22
     56a:	8f ab       	std	Y+55, r24	; 0x37
     56c:	98 af       	std	Y+56, r25	; 0x38
     56e:	a9 af       	std	Y+57, r26	; 0x39
     570:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	40 e8       	ldi	r20, 0x80	; 128
     578:	5f e3       	ldi	r21, 0x3F	; 63
     57a:	6f a9       	ldd	r22, Y+55	; 0x37
     57c:	78 ad       	ldd	r23, Y+56	; 0x38
     57e:	89 ad       	ldd	r24, Y+57	; 0x39
     580:	9a ad       	ldd	r25, Y+58	; 0x3a
     582:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__cmpsf2>
     586:	88 23       	and	r24, r24
     588:	2c f4       	brge	.+10     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
		__ticks = 1;
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	9c af       	std	Y+60, r25	; 0x3c
     590:	8b af       	std	Y+59, r24	; 0x3b
     592:	3f c0       	rjmp	.+126    	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
	else if (__tmp > 65535)
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	3f ef       	ldi	r19, 0xFF	; 255
     598:	4f e7       	ldi	r20, 0x7F	; 127
     59a:	57 e4       	ldi	r21, 0x47	; 71
     59c:	6f a9       	ldd	r22, Y+55	; 0x37
     59e:	78 ad       	ldd	r23, Y+56	; 0x38
     5a0:	89 ad       	ldd	r24, Y+57	; 0x39
     5a2:	9a ad       	ldd	r25, Y+58	; 0x3a
     5a4:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
     5a8:	18 16       	cp	r1, r24
     5aa:	4c f5       	brge	.+82     	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5ac:	20 e0       	ldi	r18, 0x00	; 0
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	40 e2       	ldi	r20, 0x20	; 32
     5b2:	51 e4       	ldi	r21, 0x41	; 65
     5b4:	69 85       	ldd	r22, Y+9	; 0x09
     5b6:	7a 85       	ldd	r23, Y+10	; 0x0a
     5b8:	8b 85       	ldd	r24, Y+11	; 0x0b
     5ba:	9c 85       	ldd	r25, Y+12	; 0x0c
     5bc:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
     5c0:	dc 01       	movw	r26, r24
     5c2:	cb 01       	movw	r24, r22
     5c4:	bc 01       	movw	r22, r24
     5c6:	cd 01       	movw	r24, r26
     5c8:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
     5cc:	dc 01       	movw	r26, r24
     5ce:	cb 01       	movw	r24, r22
     5d0:	9c af       	std	Y+60, r25	; 0x3c
     5d2:	8b af       	std	Y+59, r24	; 0x3b
     5d4:	0f c0       	rjmp	.+30     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
     5d6:	88 e8       	ldi	r24, 0x88	; 136
     5d8:	93 e1       	ldi	r25, 0x13	; 19
     5da:	9e af       	std	Y+62, r25	; 0x3e
     5dc:	8d af       	std	Y+61, r24	; 0x3d
     5de:	8d ad       	ldd	r24, Y+61	; 0x3d
     5e0:	9e ad       	ldd	r25, Y+62	; 0x3e
     5e2:	01 97       	sbiw	r24, 0x01	; 1
     5e4:	f1 f7       	brne	.-4      	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
     5e6:	9e af       	std	Y+62, r25	; 0x3e
     5e8:	8d af       	std	Y+61, r24	; 0x3d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5ea:	8b ad       	ldd	r24, Y+59	; 0x3b
     5ec:	9c ad       	ldd	r25, Y+60	; 0x3c
     5ee:	01 97       	sbiw	r24, 0x01	; 1
     5f0:	9c af       	std	Y+60, r25	; 0x3c
     5f2:	8b af       	std	Y+59, r24	; 0x3b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5f4:	8b ad       	ldd	r24, Y+59	; 0x3b
     5f6:	9c ad       	ldd	r25, Y+60	; 0x3c
     5f8:	89 2b       	or	r24, r25
     5fa:	69 f7       	brne	.-38     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
     5fc:	1e c0       	rjmp	.+60     	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5fe:	6f a9       	ldd	r22, Y+55	; 0x37
     600:	78 ad       	ldd	r23, Y+56	; 0x38
     602:	89 ad       	ldd	r24, Y+57	; 0x39
     604:	9a ad       	ldd	r25, Y+58	; 0x3a
     606:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
     60a:	dc 01       	movw	r26, r24
     60c:	cb 01       	movw	r24, r22
     60e:	9c af       	std	Y+60, r25	; 0x3c
     610:	8b af       	std	Y+59, r24	; 0x3b
     612:	2b ad       	ldd	r18, Y+59	; 0x3b
     614:	3c ad       	ldd	r19, Y+60	; 0x3c
     616:	ce 01       	movw	r24, r28
     618:	cf 96       	adiw	r24, 0x3f	; 63
     61a:	fc 01       	movw	r30, r24
     61c:	31 83       	std	Z+1, r19	; 0x01
     61e:	20 83       	st	Z, r18
     620:	ce 01       	movw	r24, r28
     622:	cf 96       	adiw	r24, 0x3f	; 63
     624:	fc 01       	movw	r30, r24
     626:	80 81       	ld	r24, Z
     628:	91 81       	ldd	r25, Z+1	; 0x01
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	f1 f7       	brne	.-4      	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
     62e:	9e 01       	movw	r18, r28
     630:	21 5c       	subi	r18, 0xC1	; 193
     632:	3f 4f       	sbci	r19, 0xFF	; 255
     634:	f9 01       	movw	r30, r18
     636:	91 83       	std	Z+1, r25	; 0x01
     638:	80 83       	st	Z, r24
			_delay_ms(50);
			if((dutycycle>TEST_PWM_1+2) || (dutycycle<TEST_PWM_1-2))
     63a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <dutycycle>
     63e:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <dutycycle+0x1>
     642:	4c 97       	sbiw	r24, 0x1c	; 28
     644:	38 f4       	brcc	.+14     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
     646:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <dutycycle>
     64a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <dutycycle+0x1>
     64e:	47 97       	sbiw	r24, 0x17	; 23
     650:	08 f0       	brcs	.+2      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
     652:	c3 c0       	rjmp	.+390    	; 0x7da <__LOCK_REGION_LENGTH__+0x3da>
			{
				OCR0A =	TEST_RPM_ERR;
     654:	87 e4       	ldi	r24, 0x47	; 71
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	2a e7       	ldi	r18, 0x7A	; 122
     65a:	fc 01       	movw	r30, r24
     65c:	20 83       	st	Z, r18
				err_PWM ++;
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	9a 81       	ldd	r25, Y+2	; 0x02
     662:	01 96       	adiw	r24, 0x01	; 1
     664:	9a 83       	std	Y+2, r25	; 0x02
     666:	89 83       	std	Y+1, r24	; 0x01
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	a8 e4       	ldi	r26, 0x48	; 72
     66e:	b2 e4       	ldi	r27, 0x42	; 66
     670:	8d 87       	std	Y+13, r24	; 0x0d
     672:	9e 87       	std	Y+14, r25	; 0x0e
     674:	af 87       	std	Y+15, r26	; 0x0f
     676:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     678:	8e 01       	movw	r16, r28
     67a:	0f 5b       	subi	r16, 0xBF	; 191
     67c:	1f 4f       	sbci	r17, 0xFF	; 255
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e5       	ldi	r19, 0x50	; 80
     682:	43 e4       	ldi	r20, 0x43	; 67
     684:	57 e4       	ldi	r21, 0x47	; 71
     686:	6d 85       	ldd	r22, Y+13	; 0x0d
     688:	7e 85       	ldd	r23, Y+14	; 0x0e
     68a:	8f 85       	ldd	r24, Y+15	; 0x0f
     68c:	98 89       	ldd	r25, Y+16	; 0x10
     68e:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
     692:	dc 01       	movw	r26, r24
     694:	cb 01       	movw	r24, r22
     696:	f8 01       	movw	r30, r16
     698:	80 83       	st	Z, r24
     69a:	91 83       	std	Z+1, r25	; 0x01
     69c:	a2 83       	std	Z+2, r26	; 0x02
     69e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     6a0:	ce 01       	movw	r24, r28
     6a2:	8f 5b       	subi	r24, 0xBF	; 191
     6a4:	9f 4f       	sbci	r25, 0xFF	; 255
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	40 e8       	ldi	r20, 0x80	; 128
     6ac:	5f e3       	ldi	r21, 0x3F	; 63
     6ae:	fc 01       	movw	r30, r24
     6b0:	60 81       	ld	r22, Z
     6b2:	71 81       	ldd	r23, Z+1	; 0x01
     6b4:	82 81       	ldd	r24, Z+2	; 0x02
     6b6:	93 81       	ldd	r25, Z+3	; 0x03
     6b8:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__cmpsf2>
     6bc:	88 23       	and	r24, r24
     6be:	4c f4       	brge	.+18     	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
		__ticks = 1;
     6c0:	ce 01       	movw	r24, r28
     6c2:	8b 5b       	subi	r24, 0xBB	; 187
     6c4:	9f 4f       	sbci	r25, 0xFF	; 255
     6c6:	21 e0       	ldi	r18, 0x01	; 1
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	fc 01       	movw	r30, r24
     6cc:	31 83       	std	Z+1, r19	; 0x01
     6ce:	20 83       	st	Z, r18
     6d0:	69 c0       	rjmp	.+210    	; 0x7a4 <__LOCK_REGION_LENGTH__+0x3a4>
	else if (__tmp > 65535)
     6d2:	ce 01       	movw	r24, r28
     6d4:	8f 5b       	subi	r24, 0xBF	; 191
     6d6:	9f 4f       	sbci	r25, 0xFF	; 255
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	3f ef       	ldi	r19, 0xFF	; 255
     6dc:	4f e7       	ldi	r20, 0x7F	; 127
     6de:	57 e4       	ldi	r21, 0x47	; 71
     6e0:	fc 01       	movw	r30, r24
     6e2:	60 81       	ld	r22, Z
     6e4:	71 81       	ldd	r23, Z+1	; 0x01
     6e6:	82 81       	ldd	r24, Z+2	; 0x02
     6e8:	93 81       	ldd	r25, Z+3	; 0x03
     6ea:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
     6ee:	18 16       	cp	r1, r24
     6f0:	0c f0       	brlt	.+2      	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
     6f2:	46 c0       	rjmp	.+140    	; 0x780 <__LOCK_REGION_LENGTH__+0x380>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	40 e2       	ldi	r20, 0x20	; 32
     6fa:	51 e4       	ldi	r21, 0x41	; 65
     6fc:	6d 85       	ldd	r22, Y+13	; 0x0d
     6fe:	7e 85       	ldd	r23, Y+14	; 0x0e
     700:	8f 85       	ldd	r24, Y+15	; 0x0f
     702:	98 89       	ldd	r25, Y+16	; 0x10
     704:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
     708:	dc 01       	movw	r26, r24
     70a:	cb 01       	movw	r24, r22
     70c:	8e 01       	movw	r16, r28
     70e:	0b 5b       	subi	r16, 0xBB	; 187
     710:	1f 4f       	sbci	r17, 0xFF	; 255
     712:	bc 01       	movw	r22, r24
     714:	cd 01       	movw	r24, r26
     716:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
     71a:	dc 01       	movw	r26, r24
     71c:	cb 01       	movw	r24, r22
     71e:	f8 01       	movw	r30, r16
     720:	91 83       	std	Z+1, r25	; 0x01
     722:	80 83       	st	Z, r24
     724:	24 c0       	rjmp	.+72     	; 0x76e <__LOCK_REGION_LENGTH__+0x36e>
     726:	ce 01       	movw	r24, r28
     728:	89 5b       	subi	r24, 0xB9	; 185
     72a:	9f 4f       	sbci	r25, 0xFF	; 255
     72c:	28 e8       	ldi	r18, 0x88	; 136
     72e:	33 e1       	ldi	r19, 0x13	; 19
     730:	fc 01       	movw	r30, r24
     732:	31 83       	std	Z+1, r19	; 0x01
     734:	20 83       	st	Z, r18
     736:	ce 01       	movw	r24, r28
     738:	89 5b       	subi	r24, 0xB9	; 185
     73a:	9f 4f       	sbci	r25, 0xFF	; 255
     73c:	fc 01       	movw	r30, r24
     73e:	80 81       	ld	r24, Z
     740:	91 81       	ldd	r25, Z+1	; 0x01
     742:	01 97       	sbiw	r24, 0x01	; 1
     744:	f1 f7       	brne	.-4      	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
     746:	9e 01       	movw	r18, r28
     748:	29 5b       	subi	r18, 0xB9	; 185
     74a:	3f 4f       	sbci	r19, 0xFF	; 255
     74c:	f9 01       	movw	r30, r18
     74e:	91 83       	std	Z+1, r25	; 0x01
     750:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     752:	ce 01       	movw	r24, r28
     754:	8b 5b       	subi	r24, 0xBB	; 187
     756:	9f 4f       	sbci	r25, 0xFF	; 255
     758:	9e 01       	movw	r18, r28
     75a:	2b 5b       	subi	r18, 0xBB	; 187
     75c:	3f 4f       	sbci	r19, 0xFF	; 255
     75e:	f9 01       	movw	r30, r18
     760:	20 81       	ld	r18, Z
     762:	31 81       	ldd	r19, Z+1	; 0x01
     764:	21 50       	subi	r18, 0x01	; 1
     766:	31 09       	sbc	r19, r1
     768:	fc 01       	movw	r30, r24
     76a:	31 83       	std	Z+1, r19	; 0x01
     76c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     76e:	ce 01       	movw	r24, r28
     770:	8b 5b       	subi	r24, 0xBB	; 187
     772:	9f 4f       	sbci	r25, 0xFF	; 255
     774:	fc 01       	movw	r30, r24
     776:	80 81       	ld	r24, Z
     778:	91 81       	ldd	r25, Z+1	; 0x01
     77a:	89 2b       	or	r24, r25
     77c:	a1 f6       	brne	.-88     	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
				_delay_ms(50);
     77e:	b4 c1       	rjmp	.+872    	; 0xae8 <__stack+0x1e9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     780:	8e 01       	movw	r16, r28
     782:	0b 5b       	subi	r16, 0xBB	; 187
     784:	1f 4f       	sbci	r17, 0xFF	; 255
     786:	ce 01       	movw	r24, r28
     788:	8f 5b       	subi	r24, 0xBF	; 191
     78a:	9f 4f       	sbci	r25, 0xFF	; 255
     78c:	fc 01       	movw	r30, r24
     78e:	60 81       	ld	r22, Z
     790:	71 81       	ldd	r23, Z+1	; 0x01
     792:	82 81       	ldd	r24, Z+2	; 0x02
     794:	93 81       	ldd	r25, Z+3	; 0x03
     796:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
     79a:	dc 01       	movw	r26, r24
     79c:	cb 01       	movw	r24, r22
     79e:	f8 01       	movw	r30, r16
     7a0:	91 83       	std	Z+1, r25	; 0x01
     7a2:	80 83       	st	Z, r24
     7a4:	ce 01       	movw	r24, r28
     7a6:	87 5b       	subi	r24, 0xB7	; 183
     7a8:	9f 4f       	sbci	r25, 0xFF	; 255
     7aa:	9e 01       	movw	r18, r28
     7ac:	2b 5b       	subi	r18, 0xBB	; 187
     7ae:	3f 4f       	sbci	r19, 0xFF	; 255
     7b0:	f9 01       	movw	r30, r18
     7b2:	20 81       	ld	r18, Z
     7b4:	31 81       	ldd	r19, Z+1	; 0x01
     7b6:	fc 01       	movw	r30, r24
     7b8:	31 83       	std	Z+1, r19	; 0x01
     7ba:	20 83       	st	Z, r18
     7bc:	ce 01       	movw	r24, r28
     7be:	87 5b       	subi	r24, 0xB7	; 183
     7c0:	9f 4f       	sbci	r25, 0xFF	; 255
     7c2:	fc 01       	movw	r30, r24
     7c4:	80 81       	ld	r24, Z
     7c6:	91 81       	ldd	r25, Z+1	; 0x01
     7c8:	01 97       	sbiw	r24, 0x01	; 1
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <__LOCK_REGION_LENGTH__+0x3c8>
     7cc:	9e 01       	movw	r18, r28
     7ce:	27 5b       	subi	r18, 0xB7	; 183
     7d0:	3f 4f       	sbci	r19, 0xFF	; 255
     7d2:	f9 01       	movw	r30, r18
     7d4:	91 83       	std	Z+1, r25	; 0x01
     7d6:	80 83       	st	Z, r24
     7d8:	87 c1       	rjmp	.+782    	; 0xae8 <__stack+0x1e9>
			}
			else
			{
				OCR0A =	TEST_RPM_OK;
     7da:	87 e4       	ldi	r24, 0x47	; 71
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	2d e6       	ldi	r18, 0x6D	; 109
     7e0:	fc 01       	movw	r30, r24
     7e2:	20 83       	st	Z, r18
				PORTD |= (1<<PORTD5);
     7e4:	8b e2       	ldi	r24, 0x2B	; 43
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	2b e2       	ldi	r18, 0x2B	; 43
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	f9 01       	movw	r30, r18
     7ee:	20 81       	ld	r18, Z
     7f0:	20 62       	ori	r18, 0x20	; 32
     7f2:	fc 01       	movw	r30, r24
     7f4:	20 83       	st	Z, r18
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	a8 e4       	ldi	r26, 0x48	; 72
     7fc:	b2 e4       	ldi	r27, 0x42	; 66
     7fe:	8d 8b       	std	Y+21, r24	; 0x15
     800:	9e 8b       	std	Y+22, r25	; 0x16
     802:	af 8b       	std	Y+23, r26	; 0x17
     804:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     806:	8e 01       	movw	r16, r28
     808:	0b 5a       	subi	r16, 0xAB	; 171
     80a:	1f 4f       	sbci	r17, 0xFF	; 255
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e5       	ldi	r19, 0x50	; 80
     810:	43 e4       	ldi	r20, 0x43	; 67
     812:	57 e4       	ldi	r21, 0x47	; 71
     814:	6d 89       	ldd	r22, Y+21	; 0x15
     816:	7e 89       	ldd	r23, Y+22	; 0x16
     818:	8f 89       	ldd	r24, Y+23	; 0x17
     81a:	98 8d       	ldd	r25, Y+24	; 0x18
     81c:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
     820:	dc 01       	movw	r26, r24
     822:	cb 01       	movw	r24, r22
     824:	f8 01       	movw	r30, r16
     826:	80 83       	st	Z, r24
     828:	91 83       	std	Z+1, r25	; 0x01
     82a:	a2 83       	std	Z+2, r26	; 0x02
     82c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     82e:	ce 01       	movw	r24, r28
     830:	8b 5a       	subi	r24, 0xAB	; 171
     832:	9f 4f       	sbci	r25, 0xFF	; 255
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	40 e8       	ldi	r20, 0x80	; 128
     83a:	5f e3       	ldi	r21, 0x3F	; 63
     83c:	fc 01       	movw	r30, r24
     83e:	60 81       	ld	r22, Z
     840:	71 81       	ldd	r23, Z+1	; 0x01
     842:	82 81       	ldd	r24, Z+2	; 0x02
     844:	93 81       	ldd	r25, Z+3	; 0x03
     846:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__cmpsf2>
     84a:	88 23       	and	r24, r24
     84c:	4c f4       	brge	.+18     	; 0x860 <__LOCK_REGION_LENGTH__+0x460>
		__ticks = 1;
     84e:	ce 01       	movw	r24, r28
     850:	87 5a       	subi	r24, 0xA7	; 167
     852:	9f 4f       	sbci	r25, 0xFF	; 255
     854:	21 e0       	ldi	r18, 0x01	; 1
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	fc 01       	movw	r30, r24
     85a:	31 83       	std	Z+1, r19	; 0x01
     85c:	20 83       	st	Z, r18
     85e:	69 c0       	rjmp	.+210    	; 0x932 <__stack+0x33>
	else if (__tmp > 65535)
     860:	ce 01       	movw	r24, r28
     862:	8b 5a       	subi	r24, 0xAB	; 171
     864:	9f 4f       	sbci	r25, 0xFF	; 255
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	3f ef       	ldi	r19, 0xFF	; 255
     86a:	4f e7       	ldi	r20, 0x7F	; 127
     86c:	57 e4       	ldi	r21, 0x47	; 71
     86e:	fc 01       	movw	r30, r24
     870:	60 81       	ld	r22, Z
     872:	71 81       	ldd	r23, Z+1	; 0x01
     874:	82 81       	ldd	r24, Z+2	; 0x02
     876:	93 81       	ldd	r25, Z+3	; 0x03
     878:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
     87c:	18 16       	cp	r1, r24
     87e:	0c f0       	brlt	.+2      	; 0x882 <__LOCK_REGION_LENGTH__+0x482>
     880:	46 c0       	rjmp	.+140    	; 0x90e <__stack+0xf>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	40 e2       	ldi	r20, 0x20	; 32
     888:	51 e4       	ldi	r21, 0x41	; 65
     88a:	6d 89       	ldd	r22, Y+21	; 0x15
     88c:	7e 89       	ldd	r23, Y+22	; 0x16
     88e:	8f 89       	ldd	r24, Y+23	; 0x17
     890:	98 8d       	ldd	r25, Y+24	; 0x18
     892:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
     896:	dc 01       	movw	r26, r24
     898:	cb 01       	movw	r24, r22
     89a:	8e 01       	movw	r16, r28
     89c:	07 5a       	subi	r16, 0xA7	; 167
     89e:	1f 4f       	sbci	r17, 0xFF	; 255
     8a0:	bc 01       	movw	r22, r24
     8a2:	cd 01       	movw	r24, r26
     8a4:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
     8a8:	dc 01       	movw	r26, r24
     8aa:	cb 01       	movw	r24, r22
     8ac:	f8 01       	movw	r30, r16
     8ae:	91 83       	std	Z+1, r25	; 0x01
     8b0:	80 83       	st	Z, r24
     8b2:	24 c0       	rjmp	.+72     	; 0x8fc <__LOCK_REGION_LENGTH__+0x4fc>
     8b4:	ce 01       	movw	r24, r28
     8b6:	85 5a       	subi	r24, 0xA5	; 165
     8b8:	9f 4f       	sbci	r25, 0xFF	; 255
     8ba:	28 e8       	ldi	r18, 0x88	; 136
     8bc:	33 e1       	ldi	r19, 0x13	; 19
     8be:	fc 01       	movw	r30, r24
     8c0:	31 83       	std	Z+1, r19	; 0x01
     8c2:	20 83       	st	Z, r18
     8c4:	ce 01       	movw	r24, r28
     8c6:	85 5a       	subi	r24, 0xA5	; 165
     8c8:	9f 4f       	sbci	r25, 0xFF	; 255
     8ca:	fc 01       	movw	r30, r24
     8cc:	80 81       	ld	r24, Z
     8ce:	91 81       	ldd	r25, Z+1	; 0x01
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	f1 f7       	brne	.-4      	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     8d4:	9e 01       	movw	r18, r28
     8d6:	25 5a       	subi	r18, 0xA5	; 165
     8d8:	3f 4f       	sbci	r19, 0xFF	; 255
     8da:	f9 01       	movw	r30, r18
     8dc:	91 83       	std	Z+1, r25	; 0x01
     8de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8e0:	ce 01       	movw	r24, r28
     8e2:	87 5a       	subi	r24, 0xA7	; 167
     8e4:	9f 4f       	sbci	r25, 0xFF	; 255
     8e6:	9e 01       	movw	r18, r28
     8e8:	27 5a       	subi	r18, 0xA7	; 167
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	f9 01       	movw	r30, r18
     8ee:	20 81       	ld	r18, Z
     8f0:	31 81       	ldd	r19, Z+1	; 0x01
     8f2:	21 50       	subi	r18, 0x01	; 1
     8f4:	31 09       	sbc	r19, r1
     8f6:	fc 01       	movw	r30, r24
     8f8:	31 83       	std	Z+1, r19	; 0x01
     8fa:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8fc:	ce 01       	movw	r24, r28
     8fe:	87 5a       	subi	r24, 0xA7	; 167
     900:	9f 4f       	sbci	r25, 0xFF	; 255
     902:	fc 01       	movw	r30, r24
     904:	80 81       	ld	r24, Z
     906:	91 81       	ldd	r25, Z+1	; 0x01
     908:	89 2b       	or	r24, r25
     90a:	a1 f6       	brne	.-88     	; 0x8b4 <__LOCK_REGION_LENGTH__+0x4b4>
     90c:	2c c0       	rjmp	.+88     	; 0x966 <__stack+0x67>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     90e:	8e 01       	movw	r16, r28
     910:	07 5a       	subi	r16, 0xA7	; 167
     912:	1f 4f       	sbci	r17, 0xFF	; 255
     914:	ce 01       	movw	r24, r28
     916:	8b 5a       	subi	r24, 0xAB	; 171
     918:	9f 4f       	sbci	r25, 0xFF	; 255
     91a:	fc 01       	movw	r30, r24
     91c:	60 81       	ld	r22, Z
     91e:	71 81       	ldd	r23, Z+1	; 0x01
     920:	82 81       	ldd	r24, Z+2	; 0x02
     922:	93 81       	ldd	r25, Z+3	; 0x03
     924:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
     928:	dc 01       	movw	r26, r24
     92a:	cb 01       	movw	r24, r22
     92c:	f8 01       	movw	r30, r16
     92e:	91 83       	std	Z+1, r25	; 0x01
     930:	80 83       	st	Z, r24
     932:	ce 01       	movw	r24, r28
     934:	83 5a       	subi	r24, 0xA3	; 163
     936:	9f 4f       	sbci	r25, 0xFF	; 255
     938:	9e 01       	movw	r18, r28
     93a:	27 5a       	subi	r18, 0xA7	; 167
     93c:	3f 4f       	sbci	r19, 0xFF	; 255
     93e:	f9 01       	movw	r30, r18
     940:	20 81       	ld	r18, Z
     942:	31 81       	ldd	r19, Z+1	; 0x01
     944:	fc 01       	movw	r30, r24
     946:	31 83       	std	Z+1, r19	; 0x01
     948:	20 83       	st	Z, r18
     94a:	ce 01       	movw	r24, r28
     94c:	83 5a       	subi	r24, 0xA3	; 163
     94e:	9f 4f       	sbci	r25, 0xFF	; 255
     950:	fc 01       	movw	r30, r24
     952:	80 81       	ld	r24, Z
     954:	91 81       	ldd	r25, Z+1	; 0x01
     956:	01 97       	sbiw	r24, 0x01	; 1
     958:	f1 f7       	brne	.-4      	; 0x956 <__stack+0x57>
     95a:	9e 01       	movw	r18, r28
     95c:	23 5a       	subi	r18, 0xA3	; 163
     95e:	3f 4f       	sbci	r19, 0xFF	; 255
     960:	f9 01       	movw	r30, r18
     962:	91 83       	std	Z+1, r25	; 0x01
     964:	80 83       	st	Z, r24
				_delay_ms(50);
				PORTD &= ~(1<<PORTD5);
     966:	8b e2       	ldi	r24, 0x2B	; 43
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	2b e2       	ldi	r18, 0x2B	; 43
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	f9 01       	movw	r30, r18
     970:	20 81       	ld	r18, Z
     972:	2f 7d       	andi	r18, 0xDF	; 223
     974:	fc 01       	movw	r30, r24
     976:	20 83       	st	Z, r18
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	a8 e4       	ldi	r26, 0x48	; 72
     97e:	b2 e4       	ldi	r27, 0x42	; 66
     980:	89 8f       	std	Y+25, r24	; 0x19
     982:	9a 8f       	std	Y+26, r25	; 0x1a
     984:	ab 8f       	std	Y+27, r26	; 0x1b
     986:	bc 8f       	std	Y+28, r27	; 0x1c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     988:	8e 01       	movw	r16, r28
     98a:	05 5b       	subi	r16, 0xB5	; 181
     98c:	1f 4f       	sbci	r17, 0xFF	; 255
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	30 e5       	ldi	r19, 0x50	; 80
     992:	43 e4       	ldi	r20, 0x43	; 67
     994:	57 e4       	ldi	r21, 0x47	; 71
     996:	69 8d       	ldd	r22, Y+25	; 0x19
     998:	7a 8d       	ldd	r23, Y+26	; 0x1a
     99a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     99c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     99e:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
     9a2:	dc 01       	movw	r26, r24
     9a4:	cb 01       	movw	r24, r22
     9a6:	f8 01       	movw	r30, r16
     9a8:	80 83       	st	Z, r24
     9aa:	91 83       	std	Z+1, r25	; 0x01
     9ac:	a2 83       	std	Z+2, r26	; 0x02
     9ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     9b0:	ce 01       	movw	r24, r28
     9b2:	85 5b       	subi	r24, 0xB5	; 181
     9b4:	9f 4f       	sbci	r25, 0xFF	; 255
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	40 e8       	ldi	r20, 0x80	; 128
     9bc:	5f e3       	ldi	r21, 0x3F	; 63
     9be:	fc 01       	movw	r30, r24
     9c0:	60 81       	ld	r22, Z
     9c2:	71 81       	ldd	r23, Z+1	; 0x01
     9c4:	82 81       	ldd	r24, Z+2	; 0x02
     9c6:	93 81       	ldd	r25, Z+3	; 0x03
     9c8:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__cmpsf2>
     9cc:	88 23       	and	r24, r24
     9ce:	4c f4       	brge	.+18     	; 0x9e2 <__stack+0xe3>
		__ticks = 1;
     9d0:	ce 01       	movw	r24, r28
     9d2:	81 5b       	subi	r24, 0xB1	; 177
     9d4:	9f 4f       	sbci	r25, 0xFF	; 255
     9d6:	21 e0       	ldi	r18, 0x01	; 1
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	fc 01       	movw	r30, r24
     9dc:	31 83       	std	Z+1, r19	; 0x01
     9de:	20 83       	st	Z, r18
     9e0:	69 c0       	rjmp	.+210    	; 0xab4 <__stack+0x1b5>
	else if (__tmp > 65535)
     9e2:	ce 01       	movw	r24, r28
     9e4:	85 5b       	subi	r24, 0xB5	; 181
     9e6:	9f 4f       	sbci	r25, 0xFF	; 255
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	4f e7       	ldi	r20, 0x7F	; 127
     9ee:	57 e4       	ldi	r21, 0x47	; 71
     9f0:	fc 01       	movw	r30, r24
     9f2:	60 81       	ld	r22, Z
     9f4:	71 81       	ldd	r23, Z+1	; 0x01
     9f6:	82 81       	ldd	r24, Z+2	; 0x02
     9f8:	93 81       	ldd	r25, Z+3	; 0x03
     9fa:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
     9fe:	18 16       	cp	r1, r24
     a00:	0c f0       	brlt	.+2      	; 0xa04 <__stack+0x105>
     a02:	46 c0       	rjmp	.+140    	; 0xa90 <__stack+0x191>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	40 e2       	ldi	r20, 0x20	; 32
     a0a:	51 e4       	ldi	r21, 0x41	; 65
     a0c:	69 8d       	ldd	r22, Y+25	; 0x19
     a0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a10:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a12:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a14:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
     a18:	dc 01       	movw	r26, r24
     a1a:	cb 01       	movw	r24, r22
     a1c:	8e 01       	movw	r16, r28
     a1e:	01 5b       	subi	r16, 0xB1	; 177
     a20:	1f 4f       	sbci	r17, 0xFF	; 255
     a22:	bc 01       	movw	r22, r24
     a24:	cd 01       	movw	r24, r26
     a26:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
     a2a:	dc 01       	movw	r26, r24
     a2c:	cb 01       	movw	r24, r22
     a2e:	f8 01       	movw	r30, r16
     a30:	91 83       	std	Z+1, r25	; 0x01
     a32:	80 83       	st	Z, r24
     a34:	24 c0       	rjmp	.+72     	; 0xa7e <__stack+0x17f>
     a36:	ce 01       	movw	r24, r28
     a38:	8f 5a       	subi	r24, 0xAF	; 175
     a3a:	9f 4f       	sbci	r25, 0xFF	; 255
     a3c:	28 e8       	ldi	r18, 0x88	; 136
     a3e:	33 e1       	ldi	r19, 0x13	; 19
     a40:	fc 01       	movw	r30, r24
     a42:	31 83       	std	Z+1, r19	; 0x01
     a44:	20 83       	st	Z, r18
     a46:	ce 01       	movw	r24, r28
     a48:	8f 5a       	subi	r24, 0xAF	; 175
     a4a:	9f 4f       	sbci	r25, 0xFF	; 255
     a4c:	fc 01       	movw	r30, r24
     a4e:	80 81       	ld	r24, Z
     a50:	91 81       	ldd	r25, Z+1	; 0x01
     a52:	01 97       	sbiw	r24, 0x01	; 1
     a54:	f1 f7       	brne	.-4      	; 0xa52 <__stack+0x153>
     a56:	9e 01       	movw	r18, r28
     a58:	2f 5a       	subi	r18, 0xAF	; 175
     a5a:	3f 4f       	sbci	r19, 0xFF	; 255
     a5c:	f9 01       	movw	r30, r18
     a5e:	91 83       	std	Z+1, r25	; 0x01
     a60:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a62:	ce 01       	movw	r24, r28
     a64:	81 5b       	subi	r24, 0xB1	; 177
     a66:	9f 4f       	sbci	r25, 0xFF	; 255
     a68:	9e 01       	movw	r18, r28
     a6a:	21 5b       	subi	r18, 0xB1	; 177
     a6c:	3f 4f       	sbci	r19, 0xFF	; 255
     a6e:	f9 01       	movw	r30, r18
     a70:	20 81       	ld	r18, Z
     a72:	31 81       	ldd	r19, Z+1	; 0x01
     a74:	21 50       	subi	r18, 0x01	; 1
     a76:	31 09       	sbc	r19, r1
     a78:	fc 01       	movw	r30, r24
     a7a:	31 83       	std	Z+1, r19	; 0x01
     a7c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a7e:	ce 01       	movw	r24, r28
     a80:	81 5b       	subi	r24, 0xB1	; 177
     a82:	9f 4f       	sbci	r25, 0xFF	; 255
     a84:	fc 01       	movw	r30, r24
     a86:	80 81       	ld	r24, Z
     a88:	91 81       	ldd	r25, Z+1	; 0x01
     a8a:	89 2b       	or	r24, r25
     a8c:	a1 f6       	brne	.-88     	; 0xa36 <__stack+0x137>
     a8e:	2c c0       	rjmp	.+88     	; 0xae8 <__stack+0x1e9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a90:	8e 01       	movw	r16, r28
     a92:	01 5b       	subi	r16, 0xB1	; 177
     a94:	1f 4f       	sbci	r17, 0xFF	; 255
     a96:	ce 01       	movw	r24, r28
     a98:	85 5b       	subi	r24, 0xB5	; 181
     a9a:	9f 4f       	sbci	r25, 0xFF	; 255
     a9c:	fc 01       	movw	r30, r24
     a9e:	60 81       	ld	r22, Z
     aa0:	71 81       	ldd	r23, Z+1	; 0x01
     aa2:	82 81       	ldd	r24, Z+2	; 0x02
     aa4:	93 81       	ldd	r25, Z+3	; 0x03
     aa6:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
     aaa:	dc 01       	movw	r26, r24
     aac:	cb 01       	movw	r24, r22
     aae:	f8 01       	movw	r30, r16
     ab0:	91 83       	std	Z+1, r25	; 0x01
     ab2:	80 83       	st	Z, r24
     ab4:	ce 01       	movw	r24, r28
     ab6:	8d 5a       	subi	r24, 0xAD	; 173
     ab8:	9f 4f       	sbci	r25, 0xFF	; 255
     aba:	9e 01       	movw	r18, r28
     abc:	21 5b       	subi	r18, 0xB1	; 177
     abe:	3f 4f       	sbci	r19, 0xFF	; 255
     ac0:	f9 01       	movw	r30, r18
     ac2:	20 81       	ld	r18, Z
     ac4:	31 81       	ldd	r19, Z+1	; 0x01
     ac6:	fc 01       	movw	r30, r24
     ac8:	31 83       	std	Z+1, r19	; 0x01
     aca:	20 83       	st	Z, r18
     acc:	ce 01       	movw	r24, r28
     ace:	8d 5a       	subi	r24, 0xAD	; 173
     ad0:	9f 4f       	sbci	r25, 0xFF	; 255
     ad2:	fc 01       	movw	r30, r24
     ad4:	80 81       	ld	r24, Z
     ad6:	91 81       	ldd	r25, Z+1	; 0x01
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	f1 f7       	brne	.-4      	; 0xad8 <__stack+0x1d9>
     adc:	9e 01       	movw	r18, r28
     ade:	2d 5a       	subi	r18, 0xAD	; 173
     ae0:	3f 4f       	sbci	r19, 0xFF	; 255
     ae2:	f9 01       	movw	r30, r18
     ae4:	91 83       	std	Z+1, r25	; 0x01
     ae6:	80 83       	st	Z, r24
				_delay_ms(50);
			}

			OCR0A =	TEST_RPM;
     ae8:	87 e4       	ldi	r24, 0x47	; 71
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	2c e8       	ldi	r18, 0x8C	; 140
     aee:	fc 01       	movw	r30, r24
     af0:	20 83       	st	Z, r18
			//_delay_ms(50);
			while(dutycycle==TEST_PWM_1);
     af2:	00 00       	nop
     af4:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <dutycycle>
     af8:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <dutycycle+0x1>
     afc:	49 97       	sbiw	r24, 0x19	; 25
     afe:	d1 f3       	breq	.-12     	; 0xaf4 <__stack+0x1f5>

			
			if((dutycycle>TEST_PWM_2+3) || (dutycycle<TEST_PWM_2-3))
     b00:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <dutycycle>
     b04:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <dutycycle+0x1>
     b08:	c6 97       	sbiw	r24, 0x36	; 54
     b0a:	38 f4       	brcc	.+14     	; 0xb1a <__stack+0x21b>
     b0c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <dutycycle>
     b10:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <dutycycle+0x1>
     b14:	8f 97       	sbiw	r24, 0x2f	; 47
     b16:	08 f0       	brcs	.+2      	; 0xb1a <__stack+0x21b>
     b18:	c3 c0       	rjmp	.+390    	; 0xca0 <__stack+0x3a1>
			{
				OCR0A =	TEST_RPM_ERR;
     b1a:	87 e4       	ldi	r24, 0x47	; 71
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	2a e7       	ldi	r18, 0x7A	; 122
     b20:	fc 01       	movw	r30, r24
     b22:	20 83       	st	Z, r18
				err_PWM ++;
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	9a 81       	ldd	r25, Y+2	; 0x02
     b28:	01 96       	adiw	r24, 0x01	; 1
     b2a:	9a 83       	std	Y+2, r25	; 0x02
     b2c:	89 83       	std	Y+1, r24	; 0x01
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	a8 e4       	ldi	r26, 0x48	; 72
     b34:	b2 e4       	ldi	r27, 0x42	; 66
     b36:	89 8b       	std	Y+17, r24	; 0x11
     b38:	9a 8b       	std	Y+18, r25	; 0x12
     b3a:	ab 8b       	std	Y+19, r26	; 0x13
     b3c:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b3e:	8e 01       	movw	r16, r28
     b40:	01 5a       	subi	r16, 0xA1	; 161
     b42:	1f 4f       	sbci	r17, 0xFF	; 255
     b44:	20 e0       	ldi	r18, 0x00	; 0
     b46:	30 e5       	ldi	r19, 0x50	; 80
     b48:	43 e4       	ldi	r20, 0x43	; 67
     b4a:	57 e4       	ldi	r21, 0x47	; 71
     b4c:	69 89       	ldd	r22, Y+17	; 0x11
     b4e:	7a 89       	ldd	r23, Y+18	; 0x12
     b50:	8b 89       	ldd	r24, Y+19	; 0x13
     b52:	9c 89       	ldd	r25, Y+20	; 0x14
     b54:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
     b58:	dc 01       	movw	r26, r24
     b5a:	cb 01       	movw	r24, r22
     b5c:	f8 01       	movw	r30, r16
     b5e:	80 83       	st	Z, r24
     b60:	91 83       	std	Z+1, r25	; 0x01
     b62:	a2 83       	std	Z+2, r26	; 0x02
     b64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b66:	ce 01       	movw	r24, r28
     b68:	81 5a       	subi	r24, 0xA1	; 161
     b6a:	9f 4f       	sbci	r25, 0xFF	; 255
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	40 e8       	ldi	r20, 0x80	; 128
     b72:	5f e3       	ldi	r21, 0x3F	; 63
     b74:	fc 01       	movw	r30, r24
     b76:	60 81       	ld	r22, Z
     b78:	71 81       	ldd	r23, Z+1	; 0x01
     b7a:	82 81       	ldd	r24, Z+2	; 0x02
     b7c:	93 81       	ldd	r25, Z+3	; 0x03
     b7e:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__cmpsf2>
     b82:	88 23       	and	r24, r24
     b84:	4c f4       	brge	.+18     	; 0xb98 <__stack+0x299>
		__ticks = 1;
     b86:	ce 01       	movw	r24, r28
     b88:	8d 59       	subi	r24, 0x9D	; 157
     b8a:	9f 4f       	sbci	r25, 0xFF	; 255
     b8c:	21 e0       	ldi	r18, 0x01	; 1
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	fc 01       	movw	r30, r24
     b92:	31 83       	std	Z+1, r19	; 0x01
     b94:	20 83       	st	Z, r18
     b96:	69 c0       	rjmp	.+210    	; 0xc6a <__stack+0x36b>
	else if (__tmp > 65535)
     b98:	ce 01       	movw	r24, r28
     b9a:	81 5a       	subi	r24, 0xA1	; 161
     b9c:	9f 4f       	sbci	r25, 0xFF	; 255
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	3f ef       	ldi	r19, 0xFF	; 255
     ba2:	4f e7       	ldi	r20, 0x7F	; 127
     ba4:	57 e4       	ldi	r21, 0x47	; 71
     ba6:	fc 01       	movw	r30, r24
     ba8:	60 81       	ld	r22, Z
     baa:	71 81       	ldd	r23, Z+1	; 0x01
     bac:	82 81       	ldd	r24, Z+2	; 0x02
     bae:	93 81       	ldd	r25, Z+3	; 0x03
     bb0:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
     bb4:	18 16       	cp	r1, r24
     bb6:	0c f0       	brlt	.+2      	; 0xbba <__stack+0x2bb>
     bb8:	46 c0       	rjmp	.+140    	; 0xc46 <__stack+0x347>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e2       	ldi	r20, 0x20	; 32
     bc0:	51 e4       	ldi	r21, 0x41	; 65
     bc2:	69 89       	ldd	r22, Y+17	; 0x11
     bc4:	7a 89       	ldd	r23, Y+18	; 0x12
     bc6:	8b 89       	ldd	r24, Y+19	; 0x13
     bc8:	9c 89       	ldd	r25, Y+20	; 0x14
     bca:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
     bce:	dc 01       	movw	r26, r24
     bd0:	cb 01       	movw	r24, r22
     bd2:	8e 01       	movw	r16, r28
     bd4:	0d 59       	subi	r16, 0x9D	; 157
     bd6:	1f 4f       	sbci	r17, 0xFF	; 255
     bd8:	bc 01       	movw	r22, r24
     bda:	cd 01       	movw	r24, r26
     bdc:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
     be0:	dc 01       	movw	r26, r24
     be2:	cb 01       	movw	r24, r22
     be4:	f8 01       	movw	r30, r16
     be6:	91 83       	std	Z+1, r25	; 0x01
     be8:	80 83       	st	Z, r24
     bea:	24 c0       	rjmp	.+72     	; 0xc34 <__stack+0x335>
     bec:	ce 01       	movw	r24, r28
     bee:	8b 59       	subi	r24, 0x9B	; 155
     bf0:	9f 4f       	sbci	r25, 0xFF	; 255
     bf2:	28 e8       	ldi	r18, 0x88	; 136
     bf4:	33 e1       	ldi	r19, 0x13	; 19
     bf6:	fc 01       	movw	r30, r24
     bf8:	31 83       	std	Z+1, r19	; 0x01
     bfa:	20 83       	st	Z, r18
     bfc:	ce 01       	movw	r24, r28
     bfe:	8b 59       	subi	r24, 0x9B	; 155
     c00:	9f 4f       	sbci	r25, 0xFF	; 255
     c02:	fc 01       	movw	r30, r24
     c04:	80 81       	ld	r24, Z
     c06:	91 81       	ldd	r25, Z+1	; 0x01
     c08:	01 97       	sbiw	r24, 0x01	; 1
     c0a:	f1 f7       	brne	.-4      	; 0xc08 <__stack+0x309>
     c0c:	9e 01       	movw	r18, r28
     c0e:	2b 59       	subi	r18, 0x9B	; 155
     c10:	3f 4f       	sbci	r19, 0xFF	; 255
     c12:	f9 01       	movw	r30, r18
     c14:	91 83       	std	Z+1, r25	; 0x01
     c16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c18:	ce 01       	movw	r24, r28
     c1a:	8d 59       	subi	r24, 0x9D	; 157
     c1c:	9f 4f       	sbci	r25, 0xFF	; 255
     c1e:	9e 01       	movw	r18, r28
     c20:	2d 59       	subi	r18, 0x9D	; 157
     c22:	3f 4f       	sbci	r19, 0xFF	; 255
     c24:	f9 01       	movw	r30, r18
     c26:	20 81       	ld	r18, Z
     c28:	31 81       	ldd	r19, Z+1	; 0x01
     c2a:	21 50       	subi	r18, 0x01	; 1
     c2c:	31 09       	sbc	r19, r1
     c2e:	fc 01       	movw	r30, r24
     c30:	31 83       	std	Z+1, r19	; 0x01
     c32:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	ce 01       	movw	r24, r28
     c36:	8d 59       	subi	r24, 0x9D	; 157
     c38:	9f 4f       	sbci	r25, 0xFF	; 255
     c3a:	fc 01       	movw	r30, r24
     c3c:	80 81       	ld	r24, Z
     c3e:	91 81       	ldd	r25, Z+1	; 0x01
     c40:	89 2b       	or	r24, r25
     c42:	a1 f6       	brne	.-88     	; 0xbec <__stack+0x2ed>
				_delay_ms(50);
     c44:	b4 c1       	rjmp	.+872    	; 0xfae <__stack+0x6af>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c46:	8e 01       	movw	r16, r28
     c48:	0d 59       	subi	r16, 0x9D	; 157
     c4a:	1f 4f       	sbci	r17, 0xFF	; 255
     c4c:	ce 01       	movw	r24, r28
     c4e:	81 5a       	subi	r24, 0xA1	; 161
     c50:	9f 4f       	sbci	r25, 0xFF	; 255
     c52:	fc 01       	movw	r30, r24
     c54:	60 81       	ld	r22, Z
     c56:	71 81       	ldd	r23, Z+1	; 0x01
     c58:	82 81       	ldd	r24, Z+2	; 0x02
     c5a:	93 81       	ldd	r25, Z+3	; 0x03
     c5c:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
     c60:	dc 01       	movw	r26, r24
     c62:	cb 01       	movw	r24, r22
     c64:	f8 01       	movw	r30, r16
     c66:	91 83       	std	Z+1, r25	; 0x01
     c68:	80 83       	st	Z, r24
     c6a:	ce 01       	movw	r24, r28
     c6c:	89 59       	subi	r24, 0x99	; 153
     c6e:	9f 4f       	sbci	r25, 0xFF	; 255
     c70:	9e 01       	movw	r18, r28
     c72:	2d 59       	subi	r18, 0x9D	; 157
     c74:	3f 4f       	sbci	r19, 0xFF	; 255
     c76:	f9 01       	movw	r30, r18
     c78:	20 81       	ld	r18, Z
     c7a:	31 81       	ldd	r19, Z+1	; 0x01
     c7c:	fc 01       	movw	r30, r24
     c7e:	31 83       	std	Z+1, r19	; 0x01
     c80:	20 83       	st	Z, r18
     c82:	ce 01       	movw	r24, r28
     c84:	89 59       	subi	r24, 0x99	; 153
     c86:	9f 4f       	sbci	r25, 0xFF	; 255
     c88:	fc 01       	movw	r30, r24
     c8a:	80 81       	ld	r24, Z
     c8c:	91 81       	ldd	r25, Z+1	; 0x01
     c8e:	01 97       	sbiw	r24, 0x01	; 1
     c90:	f1 f7       	brne	.-4      	; 0xc8e <__stack+0x38f>
     c92:	9e 01       	movw	r18, r28
     c94:	29 59       	subi	r18, 0x99	; 153
     c96:	3f 4f       	sbci	r19, 0xFF	; 255
     c98:	f9 01       	movw	r30, r18
     c9a:	91 83       	std	Z+1, r25	; 0x01
     c9c:	80 83       	st	Z, r24
     c9e:	87 c1       	rjmp	.+782    	; 0xfae <__stack+0x6af>
			}
			else
			{
				OCR0A =	TEST_RPM_OK;
     ca0:	87 e4       	ldi	r24, 0x47	; 71
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	2d e6       	ldi	r18, 0x6D	; 109
     ca6:	fc 01       	movw	r30, r24
     ca8:	20 83       	st	Z, r18
				PORTD |= (1<<PORTD5);
     caa:	8b e2       	ldi	r24, 0x2B	; 43
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	2b e2       	ldi	r18, 0x2B	; 43
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	f9 01       	movw	r30, r18
     cb4:	20 81       	ld	r18, Z
     cb6:	20 62       	ori	r18, 0x20	; 32
     cb8:	fc 01       	movw	r30, r24
     cba:	20 83       	st	Z, r18
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	a8 e4       	ldi	r26, 0x48	; 72
     cc2:	b2 e4       	ldi	r27, 0x42	; 66
     cc4:	89 a3       	std	Y+33, r24	; 0x21
     cc6:	9a a3       	std	Y+34, r25	; 0x22
     cc8:	ab a3       	std	Y+35, r26	; 0x23
     cca:	bc a3       	std	Y+36, r27	; 0x24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ccc:	8e 01       	movw	r16, r28
     cce:	0d 58       	subi	r16, 0x8D	; 141
     cd0:	1f 4f       	sbci	r17, 0xFF	; 255
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	30 e5       	ldi	r19, 0x50	; 80
     cd6:	43 e4       	ldi	r20, 0x43	; 67
     cd8:	57 e4       	ldi	r21, 0x47	; 71
     cda:	69 a1       	ldd	r22, Y+33	; 0x21
     cdc:	7a a1       	ldd	r23, Y+34	; 0x22
     cde:	8b a1       	ldd	r24, Y+35	; 0x23
     ce0:	9c a1       	ldd	r25, Y+36	; 0x24
     ce2:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
     ce6:	dc 01       	movw	r26, r24
     ce8:	cb 01       	movw	r24, r22
     cea:	f8 01       	movw	r30, r16
     cec:	80 83       	st	Z, r24
     cee:	91 83       	std	Z+1, r25	; 0x01
     cf0:	a2 83       	std	Z+2, r26	; 0x02
     cf2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     cf4:	ce 01       	movw	r24, r28
     cf6:	8d 58       	subi	r24, 0x8D	; 141
     cf8:	9f 4f       	sbci	r25, 0xFF	; 255
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	40 e8       	ldi	r20, 0x80	; 128
     d00:	5f e3       	ldi	r21, 0x3F	; 63
     d02:	fc 01       	movw	r30, r24
     d04:	60 81       	ld	r22, Z
     d06:	71 81       	ldd	r23, Z+1	; 0x01
     d08:	82 81       	ldd	r24, Z+2	; 0x02
     d0a:	93 81       	ldd	r25, Z+3	; 0x03
     d0c:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__cmpsf2>
     d10:	88 23       	and	r24, r24
     d12:	4c f4       	brge	.+18     	; 0xd26 <__stack+0x427>
		__ticks = 1;
     d14:	ce 01       	movw	r24, r28
     d16:	89 58       	subi	r24, 0x89	; 137
     d18:	9f 4f       	sbci	r25, 0xFF	; 255
     d1a:	21 e0       	ldi	r18, 0x01	; 1
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	fc 01       	movw	r30, r24
     d20:	31 83       	std	Z+1, r19	; 0x01
     d22:	20 83       	st	Z, r18
     d24:	69 c0       	rjmp	.+210    	; 0xdf8 <__stack+0x4f9>
	else if (__tmp > 65535)
     d26:	ce 01       	movw	r24, r28
     d28:	8d 58       	subi	r24, 0x8D	; 141
     d2a:	9f 4f       	sbci	r25, 0xFF	; 255
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	3f ef       	ldi	r19, 0xFF	; 255
     d30:	4f e7       	ldi	r20, 0x7F	; 127
     d32:	57 e4       	ldi	r21, 0x47	; 71
     d34:	fc 01       	movw	r30, r24
     d36:	60 81       	ld	r22, Z
     d38:	71 81       	ldd	r23, Z+1	; 0x01
     d3a:	82 81       	ldd	r24, Z+2	; 0x02
     d3c:	93 81       	ldd	r25, Z+3	; 0x03
     d3e:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
     d42:	18 16       	cp	r1, r24
     d44:	0c f0       	brlt	.+2      	; 0xd48 <__stack+0x449>
     d46:	46 c0       	rjmp	.+140    	; 0xdd4 <__stack+0x4d5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	40 e2       	ldi	r20, 0x20	; 32
     d4e:	51 e4       	ldi	r21, 0x41	; 65
     d50:	69 a1       	ldd	r22, Y+33	; 0x21
     d52:	7a a1       	ldd	r23, Y+34	; 0x22
     d54:	8b a1       	ldd	r24, Y+35	; 0x23
     d56:	9c a1       	ldd	r25, Y+36	; 0x24
     d58:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	8e 01       	movw	r16, r28
     d62:	09 58       	subi	r16, 0x89	; 137
     d64:	1f 4f       	sbci	r17, 0xFF	; 255
     d66:	bc 01       	movw	r22, r24
     d68:	cd 01       	movw	r24, r26
     d6a:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	f8 01       	movw	r30, r16
     d74:	91 83       	std	Z+1, r25	; 0x01
     d76:	80 83       	st	Z, r24
     d78:	24 c0       	rjmp	.+72     	; 0xdc2 <__stack+0x4c3>
     d7a:	ce 01       	movw	r24, r28
     d7c:	87 58       	subi	r24, 0x87	; 135
     d7e:	9f 4f       	sbci	r25, 0xFF	; 255
     d80:	28 e8       	ldi	r18, 0x88	; 136
     d82:	33 e1       	ldi	r19, 0x13	; 19
     d84:	fc 01       	movw	r30, r24
     d86:	31 83       	std	Z+1, r19	; 0x01
     d88:	20 83       	st	Z, r18
     d8a:	ce 01       	movw	r24, r28
     d8c:	87 58       	subi	r24, 0x87	; 135
     d8e:	9f 4f       	sbci	r25, 0xFF	; 255
     d90:	fc 01       	movw	r30, r24
     d92:	80 81       	ld	r24, Z
     d94:	91 81       	ldd	r25, Z+1	; 0x01
     d96:	01 97       	sbiw	r24, 0x01	; 1
     d98:	f1 f7       	brne	.-4      	; 0xd96 <__stack+0x497>
     d9a:	9e 01       	movw	r18, r28
     d9c:	27 58       	subi	r18, 0x87	; 135
     d9e:	3f 4f       	sbci	r19, 0xFF	; 255
     da0:	f9 01       	movw	r30, r18
     da2:	91 83       	std	Z+1, r25	; 0x01
     da4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     da6:	ce 01       	movw	r24, r28
     da8:	89 58       	subi	r24, 0x89	; 137
     daa:	9f 4f       	sbci	r25, 0xFF	; 255
     dac:	9e 01       	movw	r18, r28
     dae:	29 58       	subi	r18, 0x89	; 137
     db0:	3f 4f       	sbci	r19, 0xFF	; 255
     db2:	f9 01       	movw	r30, r18
     db4:	20 81       	ld	r18, Z
     db6:	31 81       	ldd	r19, Z+1	; 0x01
     db8:	21 50       	subi	r18, 0x01	; 1
     dba:	31 09       	sbc	r19, r1
     dbc:	fc 01       	movw	r30, r24
     dbe:	31 83       	std	Z+1, r19	; 0x01
     dc0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc2:	ce 01       	movw	r24, r28
     dc4:	89 58       	subi	r24, 0x89	; 137
     dc6:	9f 4f       	sbci	r25, 0xFF	; 255
     dc8:	fc 01       	movw	r30, r24
     dca:	80 81       	ld	r24, Z
     dcc:	91 81       	ldd	r25, Z+1	; 0x01
     dce:	89 2b       	or	r24, r25
     dd0:	a1 f6       	brne	.-88     	; 0xd7a <__stack+0x47b>
     dd2:	2c c0       	rjmp	.+88     	; 0xe2c <__stack+0x52d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd4:	8e 01       	movw	r16, r28
     dd6:	09 58       	subi	r16, 0x89	; 137
     dd8:	1f 4f       	sbci	r17, 0xFF	; 255
     dda:	ce 01       	movw	r24, r28
     ddc:	8d 58       	subi	r24, 0x8D	; 141
     dde:	9f 4f       	sbci	r25, 0xFF	; 255
     de0:	fc 01       	movw	r30, r24
     de2:	60 81       	ld	r22, Z
     de4:	71 81       	ldd	r23, Z+1	; 0x01
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	93 81       	ldd	r25, Z+3	; 0x03
     dea:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
     dee:	dc 01       	movw	r26, r24
     df0:	cb 01       	movw	r24, r22
     df2:	f8 01       	movw	r30, r16
     df4:	91 83       	std	Z+1, r25	; 0x01
     df6:	80 83       	st	Z, r24
     df8:	ce 01       	movw	r24, r28
     dfa:	85 58       	subi	r24, 0x85	; 133
     dfc:	9f 4f       	sbci	r25, 0xFF	; 255
     dfe:	9e 01       	movw	r18, r28
     e00:	29 58       	subi	r18, 0x89	; 137
     e02:	3f 4f       	sbci	r19, 0xFF	; 255
     e04:	f9 01       	movw	r30, r18
     e06:	20 81       	ld	r18, Z
     e08:	31 81       	ldd	r19, Z+1	; 0x01
     e0a:	fc 01       	movw	r30, r24
     e0c:	31 83       	std	Z+1, r19	; 0x01
     e0e:	20 83       	st	Z, r18
     e10:	ce 01       	movw	r24, r28
     e12:	85 58       	subi	r24, 0x85	; 133
     e14:	9f 4f       	sbci	r25, 0xFF	; 255
     e16:	fc 01       	movw	r30, r24
     e18:	80 81       	ld	r24, Z
     e1a:	91 81       	ldd	r25, Z+1	; 0x01
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	f1 f7       	brne	.-4      	; 0xe1c <__stack+0x51d>
     e20:	9e 01       	movw	r18, r28
     e22:	25 58       	subi	r18, 0x85	; 133
     e24:	3f 4f       	sbci	r19, 0xFF	; 255
     e26:	f9 01       	movw	r30, r18
     e28:	91 83       	std	Z+1, r25	; 0x01
     e2a:	80 83       	st	Z, r24
				_delay_ms(50);
				PORTD &= ~(1<<PORTD5);
     e2c:	8b e2       	ldi	r24, 0x2B	; 43
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	2b e2       	ldi	r18, 0x2B	; 43
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	f9 01       	movw	r30, r18
     e36:	20 81       	ld	r18, Z
     e38:	2f 7d       	andi	r18, 0xDF	; 223
     e3a:	fc 01       	movw	r30, r24
     e3c:	20 83       	st	Z, r18
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	a8 e4       	ldi	r26, 0x48	; 72
     e44:	b2 e4       	ldi	r27, 0x42	; 66
     e46:	8d a3       	std	Y+37, r24	; 0x25
     e48:	9e a3       	std	Y+38, r25	; 0x26
     e4a:	af a3       	std	Y+39, r26	; 0x27
     e4c:	b8 a7       	std	Y+40, r27	; 0x28

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e4e:	8e 01       	movw	r16, r28
     e50:	07 59       	subi	r16, 0x97	; 151
     e52:	1f 4f       	sbci	r17, 0xFF	; 255
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e5       	ldi	r19, 0x50	; 80
     e58:	43 e4       	ldi	r20, 0x43	; 67
     e5a:	57 e4       	ldi	r21, 0x47	; 71
     e5c:	6d a1       	ldd	r22, Y+37	; 0x25
     e5e:	7e a1       	ldd	r23, Y+38	; 0x26
     e60:	8f a1       	ldd	r24, Y+39	; 0x27
     e62:	98 a5       	ldd	r25, Y+40	; 0x28
     e64:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	f8 01       	movw	r30, r16
     e6e:	80 83       	st	Z, r24
     e70:	91 83       	std	Z+1, r25	; 0x01
     e72:	a2 83       	std	Z+2, r26	; 0x02
     e74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e76:	ce 01       	movw	r24, r28
     e78:	87 59       	subi	r24, 0x97	; 151
     e7a:	9f 4f       	sbci	r25, 0xFF	; 255
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	40 e8       	ldi	r20, 0x80	; 128
     e82:	5f e3       	ldi	r21, 0x3F	; 63
     e84:	fc 01       	movw	r30, r24
     e86:	60 81       	ld	r22, Z
     e88:	71 81       	ldd	r23, Z+1	; 0x01
     e8a:	82 81       	ldd	r24, Z+2	; 0x02
     e8c:	93 81       	ldd	r25, Z+3	; 0x03
     e8e:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__cmpsf2>
     e92:	88 23       	and	r24, r24
     e94:	4c f4       	brge	.+18     	; 0xea8 <__stack+0x5a9>
		__ticks = 1;
     e96:	ce 01       	movw	r24, r28
     e98:	83 59       	subi	r24, 0x93	; 147
     e9a:	9f 4f       	sbci	r25, 0xFF	; 255
     e9c:	21 e0       	ldi	r18, 0x01	; 1
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	fc 01       	movw	r30, r24
     ea2:	31 83       	std	Z+1, r19	; 0x01
     ea4:	20 83       	st	Z, r18
     ea6:	69 c0       	rjmp	.+210    	; 0xf7a <__stack+0x67b>
	else if (__tmp > 65535)
     ea8:	ce 01       	movw	r24, r28
     eaa:	87 59       	subi	r24, 0x97	; 151
     eac:	9f 4f       	sbci	r25, 0xFF	; 255
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	3f ef       	ldi	r19, 0xFF	; 255
     eb2:	4f e7       	ldi	r20, 0x7F	; 127
     eb4:	57 e4       	ldi	r21, 0x47	; 71
     eb6:	fc 01       	movw	r30, r24
     eb8:	60 81       	ld	r22, Z
     eba:	71 81       	ldd	r23, Z+1	; 0x01
     ebc:	82 81       	ldd	r24, Z+2	; 0x02
     ebe:	93 81       	ldd	r25, Z+3	; 0x03
     ec0:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
     ec4:	18 16       	cp	r1, r24
     ec6:	0c f0       	brlt	.+2      	; 0xeca <__stack+0x5cb>
     ec8:	46 c0       	rjmp	.+140    	; 0xf56 <__stack+0x657>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	40 e2       	ldi	r20, 0x20	; 32
     ed0:	51 e4       	ldi	r21, 0x41	; 65
     ed2:	6d a1       	ldd	r22, Y+37	; 0x25
     ed4:	7e a1       	ldd	r23, Y+38	; 0x26
     ed6:	8f a1       	ldd	r24, Y+39	; 0x27
     ed8:	98 a5       	ldd	r25, Y+40	; 0x28
     eda:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	8e 01       	movw	r16, r28
     ee4:	03 59       	subi	r16, 0x93	; 147
     ee6:	1f 4f       	sbci	r17, 0xFF	; 255
     ee8:	bc 01       	movw	r22, r24
     eea:	cd 01       	movw	r24, r26
     eec:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	f8 01       	movw	r30, r16
     ef6:	91 83       	std	Z+1, r25	; 0x01
     ef8:	80 83       	st	Z, r24
     efa:	24 c0       	rjmp	.+72     	; 0xf44 <__stack+0x645>
     efc:	ce 01       	movw	r24, r28
     efe:	81 59       	subi	r24, 0x91	; 145
     f00:	9f 4f       	sbci	r25, 0xFF	; 255
     f02:	28 e8       	ldi	r18, 0x88	; 136
     f04:	33 e1       	ldi	r19, 0x13	; 19
     f06:	fc 01       	movw	r30, r24
     f08:	31 83       	std	Z+1, r19	; 0x01
     f0a:	20 83       	st	Z, r18
     f0c:	ce 01       	movw	r24, r28
     f0e:	81 59       	subi	r24, 0x91	; 145
     f10:	9f 4f       	sbci	r25, 0xFF	; 255
     f12:	fc 01       	movw	r30, r24
     f14:	80 81       	ld	r24, Z
     f16:	91 81       	ldd	r25, Z+1	; 0x01
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	f1 f7       	brne	.-4      	; 0xf18 <__stack+0x619>
     f1c:	9e 01       	movw	r18, r28
     f1e:	21 59       	subi	r18, 0x91	; 145
     f20:	3f 4f       	sbci	r19, 0xFF	; 255
     f22:	f9 01       	movw	r30, r18
     f24:	91 83       	std	Z+1, r25	; 0x01
     f26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f28:	ce 01       	movw	r24, r28
     f2a:	83 59       	subi	r24, 0x93	; 147
     f2c:	9f 4f       	sbci	r25, 0xFF	; 255
     f2e:	9e 01       	movw	r18, r28
     f30:	23 59       	subi	r18, 0x93	; 147
     f32:	3f 4f       	sbci	r19, 0xFF	; 255
     f34:	f9 01       	movw	r30, r18
     f36:	20 81       	ld	r18, Z
     f38:	31 81       	ldd	r19, Z+1	; 0x01
     f3a:	21 50       	subi	r18, 0x01	; 1
     f3c:	31 09       	sbc	r19, r1
     f3e:	fc 01       	movw	r30, r24
     f40:	31 83       	std	Z+1, r19	; 0x01
     f42:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f44:	ce 01       	movw	r24, r28
     f46:	83 59       	subi	r24, 0x93	; 147
     f48:	9f 4f       	sbci	r25, 0xFF	; 255
     f4a:	fc 01       	movw	r30, r24
     f4c:	80 81       	ld	r24, Z
     f4e:	91 81       	ldd	r25, Z+1	; 0x01
     f50:	89 2b       	or	r24, r25
     f52:	a1 f6       	brne	.-88     	; 0xefc <__stack+0x5fd>
     f54:	2c c0       	rjmp	.+88     	; 0xfae <__stack+0x6af>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f56:	8e 01       	movw	r16, r28
     f58:	03 59       	subi	r16, 0x93	; 147
     f5a:	1f 4f       	sbci	r17, 0xFF	; 255
     f5c:	ce 01       	movw	r24, r28
     f5e:	87 59       	subi	r24, 0x97	; 151
     f60:	9f 4f       	sbci	r25, 0xFF	; 255
     f62:	fc 01       	movw	r30, r24
     f64:	60 81       	ld	r22, Z
     f66:	71 81       	ldd	r23, Z+1	; 0x01
     f68:	82 81       	ldd	r24, Z+2	; 0x02
     f6a:	93 81       	ldd	r25, Z+3	; 0x03
     f6c:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	f8 01       	movw	r30, r16
     f76:	91 83       	std	Z+1, r25	; 0x01
     f78:	80 83       	st	Z, r24
     f7a:	ce 01       	movw	r24, r28
     f7c:	8f 58       	subi	r24, 0x8F	; 143
     f7e:	9f 4f       	sbci	r25, 0xFF	; 255
     f80:	9e 01       	movw	r18, r28
     f82:	23 59       	subi	r18, 0x93	; 147
     f84:	3f 4f       	sbci	r19, 0xFF	; 255
     f86:	f9 01       	movw	r30, r18
     f88:	20 81       	ld	r18, Z
     f8a:	31 81       	ldd	r19, Z+1	; 0x01
     f8c:	fc 01       	movw	r30, r24
     f8e:	31 83       	std	Z+1, r19	; 0x01
     f90:	20 83       	st	Z, r18
     f92:	ce 01       	movw	r24, r28
     f94:	8f 58       	subi	r24, 0x8F	; 143
     f96:	9f 4f       	sbci	r25, 0xFF	; 255
     f98:	fc 01       	movw	r30, r24
     f9a:	80 81       	ld	r24, Z
     f9c:	91 81       	ldd	r25, Z+1	; 0x01
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <__stack+0x69f>
     fa2:	9e 01       	movw	r18, r28
     fa4:	2f 58       	subi	r18, 0x8F	; 143
     fa6:	3f 4f       	sbci	r19, 0xFF	; 255
     fa8:	f9 01       	movw	r30, r18
     faa:	91 83       	std	Z+1, r25	; 0x01
     fac:	80 83       	st	Z, r24
				_delay_ms(50);
			}*/
			
			
			
			if(err_PWM == 0)
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	9a 81       	ldd	r25, Y+2	; 0x02
     fb2:	89 2b       	or	r24, r25
     fb4:	49 f4       	brne	.+18     	; 0xfc8 <__stack+0x6c9>
			PORTD |= (1<<PORTD5);
     fb6:	8b e2       	ldi	r24, 0x2B	; 43
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	2b e2       	ldi	r18, 0x2B	; 43
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	f9 01       	movw	r30, r18
     fc0:	20 81       	ld	r18, Z
     fc2:	20 62       	ori	r18, 0x20	; 32
     fc4:	fc 01       	movw	r30, r24
     fc6:	20 83       	st	Z, r18
			result_PWM = 1;
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <result_PWM+0x1>
     fd0:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <result_PWM>
			
			
			
			OCR0A =	TEST_RPM_LED;
     fd4:	87 e4       	ldi	r24, 0x47	; 71
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	20 e5       	ldi	r18, 0x50	; 80
     fda:	fc 01       	movw	r30, r24
     fdc:	20 83       	st	Z, r18
			while((dutycycle>TEST_PWM+1) || (dutycycle<TEST_PWM-2));
     fde:	00 00       	nop
     fe0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <dutycycle>
     fe4:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <dutycycle+0x1>
     fe8:	0c 97       	sbiw	r24, 0x0c	; 12
     fea:	d0 f7       	brcc	.-12     	; 0xfe0 <__stack+0x6e1>
     fec:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <dutycycle>
     ff0:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <dutycycle+0x1>
     ff4:	08 97       	sbiw	r24, 0x08	; 8
     ff6:	a0 f3       	brcs	.-24     	; 0xfe0 <__stack+0x6e1>
			PORTB |= (1 << PORTB1);
     ff8:	85 e2       	ldi	r24, 0x25	; 37
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	25 e2       	ldi	r18, 0x25	; 37
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	f9 01       	movw	r30, r18
    1002:	20 81       	ld	r18, Z
    1004:	22 60       	ori	r18, 0x02	; 2
    1006:	fc 01       	movw	r30, r24
    1008:	20 83       	st	Z, r18
			result_LED = 1;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <result_LED+0x1>
    1012:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <result_LED>
			
			
			while(k<100000)
			{

				if(!((dutycycle>TEST_PWM_BU+2) || (dutycycle<TEST_PWM_BU-2)))
    1016:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <dutycycle>
    101a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <dutycycle+0x1>
    101e:	47 97       	sbiw	r24, 0x17	; 23
    1020:	e0 f4       	brcc	.+56     	; 0x105a <__stack+0x75b>
    1022:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <dutycycle>
    1026:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <dutycycle+0x1>
    102a:	42 97       	sbiw	r24, 0x12	; 18
    102c:	b0 f0       	brcs	.+44     	; 0x105a <__stack+0x75b>
				{
					result_BU = 1;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <result_BU+0x1>
    1036:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <result_BU>
					PORTB |= (1 << PORTB2);
    103a:	85 e2       	ldi	r24, 0x25	; 37
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	25 e2       	ldi	r18, 0x25	; 37
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	f9 01       	movw	r30, r18
    1044:	20 81       	ld	r18, Z
    1046:	24 60       	ori	r18, 0x04	; 4
    1048:	fc 01       	movw	r30, r24
    104a:	20 83       	st	Z, r18
					break;
    104c:	00 00       	nop
				}
				k++;
			}
			
			OCR0A =	TEST_RPM;
    104e:	87 e4       	ldi	r24, 0x47	; 71
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	2c e8       	ldi	r18, 0x8C	; 140
    1054:	fc 01       	movw	r30, r24
    1056:	20 83       	st	Z, r18
			
			
			while((dutycycle>TEST_PWM_WIFI+3) || (dutycycle<TEST_PWM_WIFI-3));
    1058:	06 c0       	rjmp	.+12     	; 0x1066 <__stack+0x767>
				{
					result_BU = 1;
					PORTB |= (1 << PORTB2);
					break;
				}
				k++;
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	9c 81       	ldd	r25, Y+4	; 0x04
    105e:	01 96       	adiw	r24, 0x01	; 1
    1060:	9c 83       	std	Y+4, r25	; 0x04
    1062:	8b 83       	std	Y+3, r24	; 0x03
			}
    1064:	d8 cf       	rjmp	.-80     	; 0x1016 <__stack+0x717>
			
			OCR0A =	TEST_RPM;
			
			
			while((dutycycle>TEST_PWM_WIFI+3) || (dutycycle<TEST_PWM_WIFI-3));
    1066:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <dutycycle>
    106a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <dutycycle+0x1>
    106e:	82 97       	sbiw	r24, 0x22	; 34
    1070:	d0 f7       	brcc	.-12     	; 0x1066 <__stack+0x767>
    1072:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <dutycycle>
    1076:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <dutycycle+0x1>
    107a:	4b 97       	sbiw	r24, 0x1b	; 27
    107c:	a0 f3       	brcs	.-24     	; 0x1066 <__stack+0x767>
			//if(result_BU == 1)
			//PORTB |= (1 << PORTB2);
			//_delay_ms(50);
			PORTB |= (1 << PORTB3);
    107e:	85 e2       	ldi	r24, 0x25	; 37
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	25 e2       	ldi	r18, 0x25	; 37
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	f9 01       	movw	r30, r18
    1088:	20 81       	ld	r18, Z
    108a:	28 60       	ori	r18, 0x08	; 8
    108c:	fc 01       	movw	r30, r24
    108e:	20 83       	st	Z, r18
			result_WIFI = 1;
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <result_WIFI+0x1>
    1098:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <result_WIFI>
			
			if(flag >= 5)
    109c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    10a0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    10a4:	05 97       	sbiw	r24, 0x05	; 5
    10a6:	00 f1       	brcs	.+64     	; 0x10e8 <__stack+0x7e9>
			{
				if(ADC >= 519)
    10a8:	88 e7       	ldi	r24, 0x78	; 120
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	fc 01       	movw	r30, r24
    10ae:	80 81       	ld	r24, Z
    10b0:	91 81       	ldd	r25, Z+1	; 0x01
    10b2:	87 30       	cpi	r24, 0x07	; 7
    10b4:	92 40       	sbci	r25, 0x02	; 2
    10b6:	50 f0       	brcs	.+20     	; 0x10cc <__stack+0x7cd>
				//result = 2;
				PORTB |= (1<<PORTB3);
    10b8:	85 e2       	ldi	r24, 0x25	; 37
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	25 e2       	ldi	r18, 0x25	; 37
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	f9 01       	movw	r30, r18
    10c2:	20 81       	ld	r18, Z
    10c4:	28 60       	ori	r18, 0x08	; 8
    10c6:	fc 01       	movw	r30, r24
    10c8:	20 83       	st	Z, r18
    10ca:	09 c0       	rjmp	.+18     	; 0x10de <__stack+0x7df>
				else
				//result = 1;
				PORTB &= ~(1<<PORTB3);
    10cc:	85 e2       	ldi	r24, 0x25	; 37
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	25 e2       	ldi	r18, 0x25	; 37
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	f9 01       	movw	r30, r18
    10d6:	20 81       	ld	r18, Z
    10d8:	27 7f       	andi	r18, 0xF7	; 247
    10da:	fc 01       	movw	r30, r24
    10dc:	20 83       	st	Z, r18
				//to do: send the result
				flag = 0;
    10de:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__data_end+0x1>
    10e2:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
				break;
    10e6:	12 c1       	rjmp	.+548    	; 0x130c <__stack+0xa0d>
			}
			
			PORTD |= (1 << PORTD4);
    10e8:	8b e2       	ldi	r24, 0x2B	; 43
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	2b e2       	ldi	r18, 0x2B	; 43
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	f9 01       	movw	r30, r18
    10f2:	20 81       	ld	r18, Z
    10f4:	20 61       	ori	r18, 0x10	; 16
    10f6:	fc 01       	movw	r30, r24
    10f8:	20 83       	st	Z, r18
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	aa e7       	ldi	r26, 0x7A	; 122
    1100:	b4 e4       	ldi	r27, 0x44	; 68
    1102:	8d 8f       	std	Y+29, r24	; 0x1d
    1104:	9e 8f       	std	Y+30, r25	; 0x1e
    1106:	af 8f       	std	Y+31, r26	; 0x1f
    1108:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    110a:	8e 01       	movw	r16, r28
    110c:	03 58       	subi	r16, 0x83	; 131
    110e:	1f 4f       	sbci	r17, 0xFF	; 255
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e5       	ldi	r19, 0x50	; 80
    1114:	43 e4       	ldi	r20, 0x43	; 67
    1116:	57 e4       	ldi	r21, 0x47	; 71
    1118:	6d 8d       	ldd	r22, Y+29	; 0x1d
    111a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    111c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    111e:	98 a1       	ldd	r25, Y+32	; 0x20
    1120:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    1124:	dc 01       	movw	r26, r24
    1126:	cb 01       	movw	r24, r22
    1128:	f8 01       	movw	r30, r16
    112a:	80 83       	st	Z, r24
    112c:	91 83       	std	Z+1, r25	; 0x01
    112e:	a2 83       	std	Z+2, r26	; 0x02
    1130:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1132:	ce 01       	movw	r24, r28
    1134:	83 58       	subi	r24, 0x83	; 131
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e8       	ldi	r20, 0x80	; 128
    113e:	5f e3       	ldi	r21, 0x3F	; 63
    1140:	fc 01       	movw	r30, r24
    1142:	60 81       	ld	r22, Z
    1144:	71 81       	ldd	r23, Z+1	; 0x01
    1146:	82 81       	ldd	r24, Z+2	; 0x02
    1148:	93 81       	ldd	r25, Z+3	; 0x03
    114a:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__cmpsf2>
    114e:	88 23       	and	r24, r24
    1150:	4c f4       	brge	.+18     	; 0x1164 <__stack+0x865>
		__ticks = 1;
    1152:	ce 01       	movw	r24, r28
    1154:	8f 57       	subi	r24, 0x7F	; 127
    1156:	9f 4f       	sbci	r25, 0xFF	; 255
    1158:	21 e0       	ldi	r18, 0x01	; 1
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	fc 01       	movw	r30, r24
    115e:	31 83       	std	Z+1, r19	; 0x01
    1160:	20 83       	st	Z, r18
    1162:	69 c0       	rjmp	.+210    	; 0x1236 <__stack+0x937>
	else if (__tmp > 65535)
    1164:	ce 01       	movw	r24, r28
    1166:	83 58       	subi	r24, 0x83	; 131
    1168:	9f 4f       	sbci	r25, 0xFF	; 255
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	3f ef       	ldi	r19, 0xFF	; 255
    116e:	4f e7       	ldi	r20, 0x7F	; 127
    1170:	57 e4       	ldi	r21, 0x47	; 71
    1172:	fc 01       	movw	r30, r24
    1174:	60 81       	ld	r22, Z
    1176:	71 81       	ldd	r23, Z+1	; 0x01
    1178:	82 81       	ldd	r24, Z+2	; 0x02
    117a:	93 81       	ldd	r25, Z+3	; 0x03
    117c:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
    1180:	18 16       	cp	r1, r24
    1182:	0c f0       	brlt	.+2      	; 0x1186 <__stack+0x887>
    1184:	46 c0       	rjmp	.+140    	; 0x1212 <__stack+0x913>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	40 e2       	ldi	r20, 0x20	; 32
    118c:	51 e4       	ldi	r21, 0x41	; 65
    118e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1190:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1192:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1194:	98 a1       	ldd	r25, Y+32	; 0x20
    1196:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	8e 01       	movw	r16, r28
    11a0:	0f 57       	subi	r16, 0x7F	; 127
    11a2:	1f 4f       	sbci	r17, 0xFF	; 255
    11a4:	bc 01       	movw	r22, r24
    11a6:	cd 01       	movw	r24, r26
    11a8:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	f8 01       	movw	r30, r16
    11b2:	91 83       	std	Z+1, r25	; 0x01
    11b4:	80 83       	st	Z, r24
    11b6:	24 c0       	rjmp	.+72     	; 0x1200 <__stack+0x901>
    11b8:	ce 01       	movw	r24, r28
    11ba:	8d 57       	subi	r24, 0x7D	; 125
    11bc:	9f 4f       	sbci	r25, 0xFF	; 255
    11be:	28 e8       	ldi	r18, 0x88	; 136
    11c0:	33 e1       	ldi	r19, 0x13	; 19
    11c2:	fc 01       	movw	r30, r24
    11c4:	31 83       	std	Z+1, r19	; 0x01
    11c6:	20 83       	st	Z, r18
    11c8:	ce 01       	movw	r24, r28
    11ca:	8d 57       	subi	r24, 0x7D	; 125
    11cc:	9f 4f       	sbci	r25, 0xFF	; 255
    11ce:	fc 01       	movw	r30, r24
    11d0:	80 81       	ld	r24, Z
    11d2:	91 81       	ldd	r25, Z+1	; 0x01
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	f1 f7       	brne	.-4      	; 0x11d4 <__stack+0x8d5>
    11d8:	9e 01       	movw	r18, r28
    11da:	2d 57       	subi	r18, 0x7D	; 125
    11dc:	3f 4f       	sbci	r19, 0xFF	; 255
    11de:	f9 01       	movw	r30, r18
    11e0:	91 83       	std	Z+1, r25	; 0x01
    11e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e4:	ce 01       	movw	r24, r28
    11e6:	8f 57       	subi	r24, 0x7F	; 127
    11e8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ea:	9e 01       	movw	r18, r28
    11ec:	2f 57       	subi	r18, 0x7F	; 127
    11ee:	3f 4f       	sbci	r19, 0xFF	; 255
    11f0:	f9 01       	movw	r30, r18
    11f2:	20 81       	ld	r18, Z
    11f4:	31 81       	ldd	r19, Z+1	; 0x01
    11f6:	21 50       	subi	r18, 0x01	; 1
    11f8:	31 09       	sbc	r19, r1
    11fa:	fc 01       	movw	r30, r24
    11fc:	31 83       	std	Z+1, r19	; 0x01
    11fe:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1200:	ce 01       	movw	r24, r28
    1202:	8f 57       	subi	r24, 0x7F	; 127
    1204:	9f 4f       	sbci	r25, 0xFF	; 255
    1206:	fc 01       	movw	r30, r24
    1208:	80 81       	ld	r24, Z
    120a:	91 81       	ldd	r25, Z+1	; 0x01
    120c:	89 2b       	or	r24, r25
    120e:	a1 f6       	brne	.-88     	; 0x11b8 <__stack+0x8b9>
    1210:	2c c0       	rjmp	.+88     	; 0x126a <__stack+0x96b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1212:	8e 01       	movw	r16, r28
    1214:	0f 57       	subi	r16, 0x7F	; 127
    1216:	1f 4f       	sbci	r17, 0xFF	; 255
    1218:	ce 01       	movw	r24, r28
    121a:	83 58       	subi	r24, 0x83	; 131
    121c:	9f 4f       	sbci	r25, 0xFF	; 255
    121e:	fc 01       	movw	r30, r24
    1220:	60 81       	ld	r22, Z
    1222:	71 81       	ldd	r23, Z+1	; 0x01
    1224:	82 81       	ldd	r24, Z+2	; 0x02
    1226:	93 81       	ldd	r25, Z+3	; 0x03
    1228:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	f8 01       	movw	r30, r16
    1232:	91 83       	std	Z+1, r25	; 0x01
    1234:	80 83       	st	Z, r24
    1236:	ce 01       	movw	r24, r28
    1238:	8b 57       	subi	r24, 0x7B	; 123
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	9e 01       	movw	r18, r28
    123e:	2f 57       	subi	r18, 0x7F	; 127
    1240:	3f 4f       	sbci	r19, 0xFF	; 255
    1242:	f9 01       	movw	r30, r18
    1244:	20 81       	ld	r18, Z
    1246:	31 81       	ldd	r19, Z+1	; 0x01
    1248:	fc 01       	movw	r30, r24
    124a:	31 83       	std	Z+1, r19	; 0x01
    124c:	20 83       	st	Z, r18
    124e:	ce 01       	movw	r24, r28
    1250:	8b 57       	subi	r24, 0x7B	; 123
    1252:	9f 4f       	sbci	r25, 0xFF	; 255
    1254:	fc 01       	movw	r30, r24
    1256:	80 81       	ld	r24, Z
    1258:	91 81       	ldd	r25, Z+1	; 0x01
    125a:	01 97       	sbiw	r24, 0x01	; 1
    125c:	f1 f7       	brne	.-4      	; 0x125a <__stack+0x95b>
    125e:	9e 01       	movw	r18, r28
    1260:	2b 57       	subi	r18, 0x7B	; 123
    1262:	3f 4f       	sbci	r19, 0xFF	; 255
    1264:	f9 01       	movw	r30, r18
    1266:	91 83       	std	Z+1, r25	; 0x01
    1268:	80 83       	st	Z, r24
			
			_delay_ms(1000);
			PORTD &= ~(1 << PORTD4);
    126a:	8b e2       	ldi	r24, 0x2B	; 43
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	2b e2       	ldi	r18, 0x2B	; 43
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	f9 01       	movw	r30, r18
    1274:	20 81       	ld	r18, Z
    1276:	2f 7e       	andi	r18, 0xEF	; 239
    1278:	fc 01       	movw	r30, r24
    127a:	20 83       	st	Z, r18
			start = 0;
    127c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <start+0x1>
    1280:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <start>
			PORTD &= ~(1<<PORTD5);
    1284:	8b e2       	ldi	r24, 0x2B	; 43
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	2b e2       	ldi	r18, 0x2B	; 43
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	f9 01       	movw	r30, r18
    128e:	20 81       	ld	r18, Z
    1290:	2f 7d       	andi	r18, 0xDF	; 223
    1292:	fc 01       	movw	r30, r24
    1294:	20 83       	st	Z, r18
			PORTB &= ~(1 << PORTB1);
    1296:	85 e2       	ldi	r24, 0x25	; 37
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	25 e2       	ldi	r18, 0x25	; 37
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	f9 01       	movw	r30, r18
    12a0:	20 81       	ld	r18, Z
    12a2:	2d 7f       	andi	r18, 0xFD	; 253
    12a4:	fc 01       	movw	r30, r24
    12a6:	20 83       	st	Z, r18
			PORTB &= ~(1 << PORTB2);
    12a8:	85 e2       	ldi	r24, 0x25	; 37
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	25 e2       	ldi	r18, 0x25	; 37
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	f9 01       	movw	r30, r18
    12b2:	20 81       	ld	r18, Z
    12b4:	2b 7f       	andi	r18, 0xFB	; 251
    12b6:	fc 01       	movw	r30, r24
    12b8:	20 83       	st	Z, r18
			PORTB &= ~(1 << PORTB3);
    12ba:	85 e2       	ldi	r24, 0x25	; 37
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	25 e2       	ldi	r18, 0x25	; 37
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	f9 01       	movw	r30, r18
    12c4:	20 81       	ld	r18, Z
    12c6:	27 7f       	andi	r18, 0xF7	; 247
    12c8:	fc 01       	movw	r30, r24
    12ca:	20 83       	st	Z, r18
			PORTB &= ~(1 << PORTB5);
    12cc:	85 e2       	ldi	r24, 0x25	; 37
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	25 e2       	ldi	r18, 0x25	; 37
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	f9 01       	movw	r30, r18
    12d6:	20 81       	ld	r18, Z
    12d8:	2f 7d       	andi	r18, 0xDF	; 223
    12da:	fc 01       	movw	r30, r24
    12dc:	20 83       	st	Z, r18
			result_PWM = 0;
    12de:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <result_PWM+0x1>
    12e2:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <result_PWM>
			result_LED = 0;
    12e6:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <result_LED+0x1>
    12ea:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <result_LED>
			result_BU = 0;
    12ee:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <result_BU+0x1>
    12f2:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <result_BU>
			result_WIFI = 0;
    12f6:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <result_WIFI+0x1>
    12fa:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <result_WIFI>
		send_command1();
		//_delay_ms(10);
		//printf("%d\n",dutycycle);
		_delay_ms(5);
		//printf("%d\n",start);
		while(start == 1)
    12fe:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <start>
    1302:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <start+0x1>
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	09 f4       	brne	.+2      	; 0x130c <__stack+0xa0d>
    130a:	f7 c8       	rjmp	.-3602   	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
			
		}
		
		
				
	}
    130c:	4d c8       	rjmp	.-3942   	; 0x3a8 <main+0x220>

0000130e <__vector_10>:




ISR(TIMER1_CAPT_vect) // edge interruption
{
    130e:	1f 92       	push	r1
    1310:	0f 92       	push	r0
    1312:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1316:	0f 92       	push	r0
    1318:	11 24       	eor	r1, r1
    131a:	2f 93       	push	r18
    131c:	3f 93       	push	r19
    131e:	4f 93       	push	r20
    1320:	5f 93       	push	r21
    1322:	6f 93       	push	r22
    1324:	7f 93       	push	r23
    1326:	8f 93       	push	r24
    1328:	9f 93       	push	r25
    132a:	af 93       	push	r26
    132c:	bf 93       	push	r27
    132e:	ef 93       	push	r30
    1330:	ff 93       	push	r31
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62

	if(TCCR1B &(1<< ICES1))
    133a:	81 e8       	ldi	r24, 0x81	; 129
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	fc 01       	movw	r30, r24
    1340:	80 81       	ld	r24, Z
    1342:	88 2f       	mov	r24, r24
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	80 74       	andi	r24, 0x40	; 64
    1348:	99 27       	eor	r25, r25
    134a:	89 2b       	or	r24, r25
    134c:	09 f4       	brne	.+2      	; 0x1350 <__vector_10+0x42>
    134e:	4c c0       	rjmp	.+152    	; 0x13e8 <__vector_10+0xda>
	{

		dutycycle = ((width_a2-67)*100/66)*100/93;
    1350:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <width_a2>
    1354:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <width_a2+0x1>
    1358:	44 e6       	ldi	r20, 0x64	; 100
    135a:	42 9f       	mul	r20, r18
    135c:	c0 01       	movw	r24, r0
    135e:	43 9f       	mul	r20, r19
    1360:	90 0d       	add	r25, r0
    1362:	11 24       	eor	r1, r1
    1364:	8c 52       	subi	r24, 0x2C	; 44
    1366:	9a 41       	sbci	r25, 0x1A	; 26
    1368:	9c 01       	movw	r18, r24
    136a:	af e3       	ldi	r26, 0x3F	; 63
    136c:	b8 ef       	ldi	r27, 0xF8	; 248
    136e:	0e 94 82 13 	call	0x2704	; 0x2704 <__umulhisi3>
    1372:	00 24       	eor	r0, r0
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	00 1c       	adc	r0, r0
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	00 1c       	adc	r0, r0
    1380:	89 2f       	mov	r24, r25
    1382:	90 2d       	mov	r25, r0
    1384:	24 e6       	ldi	r18, 0x64	; 100
    1386:	28 9f       	mul	r18, r24
    1388:	a0 01       	movw	r20, r0
    138a:	29 9f       	mul	r18, r25
    138c:	50 0d       	add	r21, r0
    138e:	11 24       	eor	r1, r1
    1390:	9a 01       	movw	r18, r20
    1392:	a9 e5       	ldi	r26, 0x59	; 89
    1394:	b0 e6       	ldi	r27, 0x60	; 96
    1396:	0e 94 82 13 	call	0x2704	; 0x2704 <__umulhisi3>
    139a:	9a 01       	movw	r18, r20
    139c:	28 1b       	sub	r18, r24
    139e:	39 0b       	sbc	r19, r25
    13a0:	36 95       	lsr	r19
    13a2:	27 95       	ror	r18
    13a4:	82 0f       	add	r24, r18
    13a6:	93 1f       	adc	r25, r19
    13a8:	00 24       	eor	r0, r0
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	00 1c       	adc	r0, r0
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	00 1c       	adc	r0, r0
    13b6:	89 2f       	mov	r24, r25
    13b8:	90 2d       	mov	r25, r0
    13ba:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <dutycycle+0x1>
    13be:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <dutycycle>
		flag1 = ICR1;
    13c2:	86 e8       	ldi	r24, 0x86	; 134
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	fc 01       	movw	r30, r24
    13c8:	80 81       	ld	r24, Z
    13ca:	91 81       	ldd	r25, Z+1	; 0x01
    13cc:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <flag1+0x1>
    13d0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <flag1>
		TCCR1B &= ~(1 << ICES1);//falling edge
    13d4:	81 e8       	ldi	r24, 0x81	; 129
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	21 e8       	ldi	r18, 0x81	; 129
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	f9 01       	movw	r30, r18
    13de:	20 81       	ld	r18, Z
    13e0:	2f 7b       	andi	r18, 0xBF	; 191
    13e2:	fc 01       	movw	r30, r24
    13e4:	20 83       	st	Z, r18
		}

	}
	
	
}
    13e6:	6e c0       	rjmp	.+220    	; 0x14c4 <__vector_10+0x1b6>
		//TIFR1 |= (1<<ICF1);

	}
	else
	{
		flag2 = ICR1;
    13e8:	86 e8       	ldi	r24, 0x86	; 134
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	fc 01       	movw	r30, r24
    13ee:	80 81       	ld	r24, Z
    13f0:	91 81       	ldd	r25, Z+1	; 0x01
    13f2:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <flag2+0x1>
    13f6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <flag2>
		TCCR1B |= (1 << ICES1);//raising edge
    13fa:	81 e8       	ldi	r24, 0x81	; 129
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	21 e8       	ldi	r18, 0x81	; 129
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	f9 01       	movw	r30, r18
    1404:	20 81       	ld	r18, Z
    1406:	20 64       	ori	r18, 0x40	; 64
    1408:	fc 01       	movw	r30, r24
    140a:	20 83       	st	Z, r18
		//record the width of echo
		width = flag2 - flag1;
    140c:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <flag2>
    1410:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <flag2+0x1>
    1414:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <flag1>
    1418:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <flag1+0x1>
    141c:	a9 01       	movw	r20, r18
    141e:	48 1b       	sub	r20, r24
    1420:	59 0b       	sbc	r21, r25
    1422:	ca 01       	movw	r24, r20
    1424:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <width+0x1>
    1428:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <width>
		TCNT1 = 0x0000;
    142c:	84 e8       	ldi	r24, 0x84	; 132
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	fc 01       	movw	r30, r24
    1432:	11 82       	std	Z+1, r1	; 0x01
    1434:	10 82       	st	Z, r1
		i++;
    1436:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <i>
    143a:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <i+0x1>
    143e:	01 96       	adiw	r24, 0x01	; 1
    1440:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <i+0x1>
    1444:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <i>
		width_a1 +=width;
    1448:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <width_a1>
    144c:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <width_a1+0x1>
    1450:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <width>
    1454:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <width+0x1>
    1458:	82 0f       	add	r24, r18
    145a:	93 1f       	adc	r25, r19
    145c:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <width_a1+0x1>
    1460:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <width_a1>
		if(i==50)
    1464:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <i>
    1468:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <i+0x1>
    146c:	c2 97       	sbiw	r24, 0x32	; 50
    146e:	51 f5       	brne	.+84     	; 0x14c4 <__vector_10+0x1b6>
		{
			width_a2 =width_a1/50;
    1470:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <width_a1>
    1474:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <width_a1+0x1>
    1478:	96 95       	lsr	r25
    147a:	87 95       	ror	r24
    147c:	9c 01       	movw	r18, r24
    147e:	ab e7       	ldi	r26, 0x7B	; 123
    1480:	b4 e1       	ldi	r27, 0x14	; 20
    1482:	0e 94 82 13 	call	0x2704	; 0x2704 <__umulhisi3>
    1486:	96 95       	lsr	r25
    1488:	87 95       	ror	r24
    148a:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <width_a2+0x1>
    148e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <width_a2>
			i=0;
    1492:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <i+0x1>
    1496:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <i>
			width_a1=0;
    149a:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <width_a1+0x1>
    149e:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <width_a1>
			if(width_a2<67)
    14a2:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <width_a2>
    14a6:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <width_a2+0x1>
    14aa:	83 34       	cpi	r24, 0x43	; 67
    14ac:	91 05       	cpc	r25, r1
    14ae:	50 f4       	brcc	.+20     	; 0x14c4 <__vector_10+0x1b6>
			width_a2 +=67;
    14b0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <width_a2>
    14b4:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <width_a2+0x1>
    14b8:	8d 5b       	subi	r24, 0xBD	; 189
    14ba:	9f 4f       	sbci	r25, 0xFF	; 255
    14bc:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <width_a2+0x1>
    14c0:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <width_a2>
		}

	}
	
	
}
    14c4:	00 00       	nop
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	ff 91       	pop	r31
    14cc:	ef 91       	pop	r30
    14ce:	bf 91       	pop	r27
    14d0:	af 91       	pop	r26
    14d2:	9f 91       	pop	r25
    14d4:	8f 91       	pop	r24
    14d6:	7f 91       	pop	r23
    14d8:	6f 91       	pop	r22
    14da:	5f 91       	pop	r21
    14dc:	4f 91       	pop	r20
    14de:	3f 91       	pop	r19
    14e0:	2f 91       	pop	r18
    14e2:	0f 90       	pop	r0
    14e4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    14e8:	0f 90       	pop	r0
    14ea:	1f 90       	pop	r1
    14ec:	18 95       	reti

000014ee <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
    14ee:	1f 92       	push	r1
    14f0:	0f 92       	push	r0
    14f2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    14f6:	0f 92       	push	r0
    14f8:	11 24       	eor	r1, r1
    14fa:	2f 93       	push	r18
    14fc:	3f 93       	push	r19
    14fe:	8f 93       	push	r24
    1500:	9f 93       	push	r25
    1502:	ef 93       	push	r30
    1504:	ff 93       	push	r31
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
	PORTB ^= (1 << PORTB4); 
    150e:	85 e2       	ldi	r24, 0x25	; 37
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	25 e2       	ldi	r18, 0x25	; 37
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	f9 01       	movw	r30, r18
    1518:	30 81       	ld	r19, Z
    151a:	20 e1       	ldi	r18, 0x10	; 16
    151c:	23 27       	eor	r18, r19
    151e:	fc 01       	movw	r30, r24
    1520:	20 83       	st	Z, r18
}
    1522:	00 00       	nop
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	ff 91       	pop	r31
    152a:	ef 91       	pop	r30
    152c:	9f 91       	pop	r25
    152e:	8f 91       	pop	r24
    1530:	3f 91       	pop	r19
    1532:	2f 91       	pop	r18
    1534:	0f 90       	pop	r0
    1536:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    153a:	0f 90       	pop	r0
    153c:	1f 90       	pop	r1
    153e:	18 95       	reti

00001540 <__vector_1>:

ISR(INT0_vect){
    1540:	1f 92       	push	r1
    1542:	0f 92       	push	r0
    1544:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1548:	0f 92       	push	r0
    154a:	11 24       	eor	r1, r1
    154c:	2f 93       	push	r18
    154e:	3f 93       	push	r19
    1550:	8f 93       	push	r24
    1552:	9f 93       	push	r25
    1554:	ef 93       	push	r30
    1556:	ff 93       	push	r31
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
	
	//send_command1();
	EIFR &= ~(1 << INTF0); 
    1560:	8c e3       	ldi	r24, 0x3C	; 60
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	2c e3       	ldi	r18, 0x3C	; 60
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	f9 01       	movw	r30, r18
    156a:	20 81       	ld	r18, Z
    156c:	2e 7f       	andi	r18, 0xFE	; 254
    156e:	fc 01       	movw	r30, r24
    1570:	20 83       	st	Z, r18
	start = 1;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <start+0x1>
    157a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <start>
	
	
}
    157e:	00 00       	nop
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	ff 91       	pop	r31
    1586:	ef 91       	pop	r30
    1588:	9f 91       	pop	r25
    158a:	8f 91       	pop	r24
    158c:	3f 91       	pop	r19
    158e:	2f 91       	pop	r18
    1590:	0f 90       	pop	r0
    1592:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1596:	0f 90       	pop	r0
    1598:	1f 90       	pop	r1
    159a:	18 95       	reti

0000159c <send_command1>:
	send_command2();
	EIFR &= ~(1 << INTF1);
}*/

static void send_command1()
{
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
    15a8:	c0 5a       	subi	r28, 0xA0	; 160
    15aa:	d1 09       	sbc	r29, r1
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
		
		putchar('t');
    15b6:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__iob+0x2>
    15ba:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__iob+0x3>
    15be:	bc 01       	movw	r22, r24
    15c0:	84 e7       	ldi	r24, 0x74	; 116
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 91 13 	call	0x2722	; 0x2722 <fputc>
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	a8 ec       	ldi	r26, 0xC8	; 200
    15ce:	b2 e4       	ldi	r27, 0x42	; 66
    15d0:	89 83       	std	Y+1, r24	; 0x01
    15d2:	9a 83       	std	Y+2, r25	; 0x02
    15d4:	ab 83       	std	Y+3, r26	; 0x03
    15d6:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    15d8:	8e 01       	movw	r16, r28
    15da:	0b 57       	subi	r16, 0x7B	; 123
    15dc:	1f 4f       	sbci	r17, 0xFF	; 255
    15de:	25 e5       	ldi	r18, 0x55	; 85
    15e0:	35 e5       	ldi	r19, 0x55	; 85
    15e2:	45 e8       	ldi	r20, 0x85	; 133
    15e4:	52 e4       	ldi	r21, 0x42	; 66
    15e6:	69 81       	ldd	r22, Y+1	; 0x01
    15e8:	7a 81       	ldd	r23, Y+2	; 0x02
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	9c 81       	ldd	r25, Y+4	; 0x04
    15ee:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	f8 01       	movw	r30, r16
    15f8:	80 83       	st	Z, r24
    15fa:	91 83       	std	Z+1, r25	; 0x01
    15fc:	a2 83       	std	Z+2, r26	; 0x02
    15fe:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1600:	8e 01       	movw	r16, r28
    1602:	07 57       	subi	r16, 0x77	; 119
    1604:	1f 4f       	sbci	r17, 0xFF	; 255
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	48 e4       	ldi	r20, 0x48	; 72
    160c:	52 e4       	ldi	r21, 0x42	; 66
    160e:	69 81       	ldd	r22, Y+1	; 0x01
    1610:	7a 81       	ldd	r23, Y+2	; 0x02
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	9c 81       	ldd	r25, Y+4	; 0x04
    1616:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	f8 01       	movw	r30, r16
    1620:	80 83       	st	Z, r24
    1622:	91 83       	std	Z+1, r25	; 0x01
    1624:	a2 83       	std	Z+2, r26	; 0x02
    1626:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1628:	ce 01       	movw	r24, r28
    162a:	8b 57       	subi	r24, 0x7B	; 123
    162c:	9f 4f       	sbci	r25, 0xFF	; 255
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e8       	ldi	r20, 0x80	; 128
    1634:	5f e3       	ldi	r21, 0x3F	; 63
    1636:	fc 01       	movw	r30, r24
    1638:	60 81       	ld	r22, Z
    163a:	71 81       	ldd	r23, Z+1	; 0x01
    163c:	82 81       	ldd	r24, Z+2	; 0x02
    163e:	93 81       	ldd	r25, Z+3	; 0x03
    1640:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__cmpsf2>
    1644:	88 23       	and	r24, r24
    1646:	3c f4       	brge	.+14     	; 0x1656 <send_command1+0xba>
		__ticks = 1;
    1648:	ce 01       	movw	r24, r28
    164a:	83 57       	subi	r24, 0x73	; 115
    164c:	9f 4f       	sbci	r25, 0xFF	; 255
    164e:	21 e0       	ldi	r18, 0x01	; 1
    1650:	fc 01       	movw	r30, r24
    1652:	20 83       	st	Z, r18
    1654:	2c c1       	rjmp	.+600    	; 0x18ae <send_command1+0x312>
	else if (__tmp2 > 65535)
    1656:	ce 01       	movw	r24, r28
    1658:	87 57       	subi	r24, 0x77	; 119
    165a:	9f 4f       	sbci	r25, 0xFF	; 255
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	3f ef       	ldi	r19, 0xFF	; 255
    1660:	4f e7       	ldi	r20, 0x7F	; 127
    1662:	57 e4       	ldi	r21, 0x47	; 71
    1664:	fc 01       	movw	r30, r24
    1666:	60 81       	ld	r22, Z
    1668:	71 81       	ldd	r23, Z+1	; 0x01
    166a:	82 81       	ldd	r24, Z+2	; 0x02
    166c:	93 81       	ldd	r25, Z+3	; 0x03
    166e:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
    1672:	18 16       	cp	r1, r24
    1674:	0c f0       	brlt	.+2      	; 0x1678 <send_command1+0xdc>
    1676:	cd c0       	rjmp	.+410    	; 0x1812 <send_command1+0x276>
	{
		_delay_ms(__us / 1000.0);
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	4a e7       	ldi	r20, 0x7A	; 122
    167e:	54 e4       	ldi	r21, 0x44	; 68
    1680:	69 81       	ldd	r22, Y+1	; 0x01
    1682:	7a 81       	ldd	r23, Y+2	; 0x02
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	9c 81       	ldd	r25, Y+4	; 0x04
    1688:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__divsf3>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	9e 01       	movw	r18, r28
    1692:	22 57       	subi	r18, 0x72	; 114
    1694:	3f 4f       	sbci	r19, 0xFF	; 255
    1696:	f9 01       	movw	r30, r18
    1698:	80 83       	st	Z, r24
    169a:	91 83       	std	Z+1, r25	; 0x01
    169c:	a2 83       	std	Z+2, r26	; 0x02
    169e:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    16a0:	8e 01       	movw	r16, r28
    16a2:	0e 56       	subi	r16, 0x6E	; 110
    16a4:	1f 4f       	sbci	r17, 0xFF	; 255
    16a6:	ce 01       	movw	r24, r28
    16a8:	82 57       	subi	r24, 0x72	; 114
    16aa:	9f 4f       	sbci	r25, 0xFF	; 255
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e5       	ldi	r19, 0x50	; 80
    16b0:	43 e4       	ldi	r20, 0x43	; 67
    16b2:	57 e4       	ldi	r21, 0x47	; 71
    16b4:	fc 01       	movw	r30, r24
    16b6:	60 81       	ld	r22, Z
    16b8:	71 81       	ldd	r23, Z+1	; 0x01
    16ba:	82 81       	ldd	r24, Z+2	; 0x02
    16bc:	93 81       	ldd	r25, Z+3	; 0x03
    16be:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	f8 01       	movw	r30, r16
    16c8:	80 83       	st	Z, r24
    16ca:	91 83       	std	Z+1, r25	; 0x01
    16cc:	a2 83       	std	Z+2, r26	; 0x02
    16ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16d0:	ce 01       	movw	r24, r28
    16d2:	8e 56       	subi	r24, 0x6E	; 110
    16d4:	9f 4f       	sbci	r25, 0xFF	; 255
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e8       	ldi	r20, 0x80	; 128
    16dc:	5f e3       	ldi	r21, 0x3F	; 63
    16de:	fc 01       	movw	r30, r24
    16e0:	60 81       	ld	r22, Z
    16e2:	71 81       	ldd	r23, Z+1	; 0x01
    16e4:	82 81       	ldd	r24, Z+2	; 0x02
    16e6:	93 81       	ldd	r25, Z+3	; 0x03
    16e8:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__cmpsf2>
    16ec:	88 23       	and	r24, r24
    16ee:	4c f4       	brge	.+18     	; 0x1702 <send_command1+0x166>
		__ticks = 1;
    16f0:	ce 01       	movw	r24, r28
    16f2:	8a 56       	subi	r24, 0x6A	; 106
    16f4:	9f 4f       	sbci	r25, 0xFF	; 255
    16f6:	21 e0       	ldi	r18, 0x01	; 1
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	fc 01       	movw	r30, r24
    16fc:	31 83       	std	Z+1, r19	; 0x01
    16fe:	20 83       	st	Z, r18
    1700:	6d c0       	rjmp	.+218    	; 0x17dc <send_command1+0x240>
	else if (__tmp > 65535)
    1702:	ce 01       	movw	r24, r28
    1704:	8e 56       	subi	r24, 0x6E	; 110
    1706:	9f 4f       	sbci	r25, 0xFF	; 255
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	3f ef       	ldi	r19, 0xFF	; 255
    170c:	4f e7       	ldi	r20, 0x7F	; 127
    170e:	57 e4       	ldi	r21, 0x47	; 71
    1710:	fc 01       	movw	r30, r24
    1712:	60 81       	ld	r22, Z
    1714:	71 81       	ldd	r23, Z+1	; 0x01
    1716:	82 81       	ldd	r24, Z+2	; 0x02
    1718:	93 81       	ldd	r25, Z+3	; 0x03
    171a:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
    171e:	18 16       	cp	r1, r24
    1720:	0c f0       	brlt	.+2      	; 0x1724 <send_command1+0x188>
    1722:	4a c0       	rjmp	.+148    	; 0x17b8 <send_command1+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1724:	ce 01       	movw	r24, r28
    1726:	82 57       	subi	r24, 0x72	; 114
    1728:	9f 4f       	sbci	r25, 0xFF	; 255
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	40 e2       	ldi	r20, 0x20	; 32
    1730:	51 e4       	ldi	r21, 0x41	; 65
    1732:	fc 01       	movw	r30, r24
    1734:	60 81       	ld	r22, Z
    1736:	71 81       	ldd	r23, Z+1	; 0x01
    1738:	82 81       	ldd	r24, Z+2	; 0x02
    173a:	93 81       	ldd	r25, Z+3	; 0x03
    173c:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	8e 01       	movw	r16, r28
    1746:	0a 56       	subi	r16, 0x6A	; 106
    1748:	1f 4f       	sbci	r17, 0xFF	; 255
    174a:	bc 01       	movw	r22, r24
    174c:	cd 01       	movw	r24, r26
    174e:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	f8 01       	movw	r30, r16
    1758:	91 83       	std	Z+1, r25	; 0x01
    175a:	80 83       	st	Z, r24
    175c:	24 c0       	rjmp	.+72     	; 0x17a6 <send_command1+0x20a>
    175e:	ce 01       	movw	r24, r28
    1760:	88 56       	subi	r24, 0x68	; 104
    1762:	9f 4f       	sbci	r25, 0xFF	; 255
    1764:	28 e8       	ldi	r18, 0x88	; 136
    1766:	33 e1       	ldi	r19, 0x13	; 19
    1768:	fc 01       	movw	r30, r24
    176a:	31 83       	std	Z+1, r19	; 0x01
    176c:	20 83       	st	Z, r18
    176e:	ce 01       	movw	r24, r28
    1770:	88 56       	subi	r24, 0x68	; 104
    1772:	9f 4f       	sbci	r25, 0xFF	; 255
    1774:	fc 01       	movw	r30, r24
    1776:	80 81       	ld	r24, Z
    1778:	91 81       	ldd	r25, Z+1	; 0x01
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <send_command1+0x1de>
    177e:	9e 01       	movw	r18, r28
    1780:	28 56       	subi	r18, 0x68	; 104
    1782:	3f 4f       	sbci	r19, 0xFF	; 255
    1784:	f9 01       	movw	r30, r18
    1786:	91 83       	std	Z+1, r25	; 0x01
    1788:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178a:	ce 01       	movw	r24, r28
    178c:	8a 56       	subi	r24, 0x6A	; 106
    178e:	9f 4f       	sbci	r25, 0xFF	; 255
    1790:	9e 01       	movw	r18, r28
    1792:	2a 56       	subi	r18, 0x6A	; 106
    1794:	3f 4f       	sbci	r19, 0xFF	; 255
    1796:	f9 01       	movw	r30, r18
    1798:	20 81       	ld	r18, Z
    179a:	31 81       	ldd	r19, Z+1	; 0x01
    179c:	21 50       	subi	r18, 0x01	; 1
    179e:	31 09       	sbc	r19, r1
    17a0:	fc 01       	movw	r30, r24
    17a2:	31 83       	std	Z+1, r19	; 0x01
    17a4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a6:	ce 01       	movw	r24, r28
    17a8:	8a 56       	subi	r24, 0x6A	; 106
    17aa:	9f 4f       	sbci	r25, 0xFF	; 255
    17ac:	fc 01       	movw	r30, r24
    17ae:	80 81       	ld	r24, Z
    17b0:	91 81       	ldd	r25, Z+1	; 0x01
    17b2:	89 2b       	or	r24, r25
    17b4:	a1 f6       	brne	.-88     	; 0x175e <send_command1+0x1c2>
    17b6:	7b c0       	rjmp	.+246    	; 0x18ae <send_command1+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b8:	8e 01       	movw	r16, r28
    17ba:	0a 56       	subi	r16, 0x6A	; 106
    17bc:	1f 4f       	sbci	r17, 0xFF	; 255
    17be:	ce 01       	movw	r24, r28
    17c0:	8e 56       	subi	r24, 0x6E	; 110
    17c2:	9f 4f       	sbci	r25, 0xFF	; 255
    17c4:	fc 01       	movw	r30, r24
    17c6:	60 81       	ld	r22, Z
    17c8:	71 81       	ldd	r23, Z+1	; 0x01
    17ca:	82 81       	ldd	r24, Z+2	; 0x02
    17cc:	93 81       	ldd	r25, Z+3	; 0x03
    17ce:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	f8 01       	movw	r30, r16
    17d8:	91 83       	std	Z+1, r25	; 0x01
    17da:	80 83       	st	Z, r24
    17dc:	ce 01       	movw	r24, r28
    17de:	86 56       	subi	r24, 0x66	; 102
    17e0:	9f 4f       	sbci	r25, 0xFF	; 255
    17e2:	9e 01       	movw	r18, r28
    17e4:	2a 56       	subi	r18, 0x6A	; 106
    17e6:	3f 4f       	sbci	r19, 0xFF	; 255
    17e8:	f9 01       	movw	r30, r18
    17ea:	20 81       	ld	r18, Z
    17ec:	31 81       	ldd	r19, Z+1	; 0x01
    17ee:	fc 01       	movw	r30, r24
    17f0:	31 83       	std	Z+1, r19	; 0x01
    17f2:	20 83       	st	Z, r18
    17f4:	ce 01       	movw	r24, r28
    17f6:	86 56       	subi	r24, 0x66	; 102
    17f8:	9f 4f       	sbci	r25, 0xFF	; 255
    17fa:	fc 01       	movw	r30, r24
    17fc:	80 81       	ld	r24, Z
    17fe:	91 81       	ldd	r25, Z+1	; 0x01
    1800:	01 97       	sbiw	r24, 0x01	; 1
    1802:	f1 f7       	brne	.-4      	; 0x1800 <send_command1+0x264>
    1804:	9e 01       	movw	r18, r28
    1806:	26 56       	subi	r18, 0x66	; 102
    1808:	3f 4f       	sbci	r19, 0xFF	; 255
    180a:	f9 01       	movw	r30, r18
    180c:	91 83       	std	Z+1, r25	; 0x01
    180e:	80 83       	st	Z, r24
    1810:	4e c0       	rjmp	.+156    	; 0x18ae <send_command1+0x312>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1812:	ce 01       	movw	r24, r28
    1814:	8b 57       	subi	r24, 0x7B	; 123
    1816:	9f 4f       	sbci	r25, 0xFF	; 255
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	4f e7       	ldi	r20, 0x7F	; 127
    181e:	53 e4       	ldi	r21, 0x43	; 67
    1820:	fc 01       	movw	r30, r24
    1822:	60 81       	ld	r22, Z
    1824:	71 81       	ldd	r23, Z+1	; 0x01
    1826:	82 81       	ldd	r24, Z+2	; 0x02
    1828:	93 81       	ldd	r25, Z+3	; 0x03
    182a:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
    182e:	18 16       	cp	r1, r24
    1830:	6c f5       	brge	.+90     	; 0x188c <send_command1+0x2f0>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1832:	8e 01       	movw	r16, r28
    1834:	04 56       	subi	r16, 0x64	; 100
    1836:	1f 4f       	sbci	r17, 0xFF	; 255
    1838:	ce 01       	movw	r24, r28
    183a:	87 57       	subi	r24, 0x77	; 119
    183c:	9f 4f       	sbci	r25, 0xFF	; 255
    183e:	fc 01       	movw	r30, r24
    1840:	60 81       	ld	r22, Z
    1842:	71 81       	ldd	r23, Z+1	; 0x01
    1844:	82 81       	ldd	r24, Z+2	; 0x02
    1846:	93 81       	ldd	r25, Z+3	; 0x03
    1848:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	f8 01       	movw	r30, r16
    1852:	91 83       	std	Z+1, r25	; 0x01
    1854:	80 83       	st	Z, r24
    1856:	ce 01       	movw	r24, r28
    1858:	82 56       	subi	r24, 0x62	; 98
    185a:	9f 4f       	sbci	r25, 0xFF	; 255
    185c:	9e 01       	movw	r18, r28
    185e:	24 56       	subi	r18, 0x64	; 100
    1860:	3f 4f       	sbci	r19, 0xFF	; 255
    1862:	f9 01       	movw	r30, r18
    1864:	20 81       	ld	r18, Z
    1866:	31 81       	ldd	r19, Z+1	; 0x01
    1868:	fc 01       	movw	r30, r24
    186a:	31 83       	std	Z+1, r19	; 0x01
    186c:	20 83       	st	Z, r18
    186e:	ce 01       	movw	r24, r28
    1870:	82 56       	subi	r24, 0x62	; 98
    1872:	9f 4f       	sbci	r25, 0xFF	; 255
    1874:	fc 01       	movw	r30, r24
    1876:	80 81       	ld	r24, Z
    1878:	91 81       	ldd	r25, Z+1	; 0x01
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	f1 f7       	brne	.-4      	; 0x187a <send_command1+0x2de>
    187e:	9e 01       	movw	r18, r28
    1880:	22 56       	subi	r18, 0x62	; 98
    1882:	3f 4f       	sbci	r19, 0xFF	; 255
    1884:	f9 01       	movw	r30, r18
    1886:	91 83       	std	Z+1, r25	; 0x01
    1888:	80 83       	st	Z, r24
    188a:	28 c0       	rjmp	.+80     	; 0x18dc <send_command1+0x340>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    188c:	8e 01       	movw	r16, r28
    188e:	03 57       	subi	r16, 0x73	; 115
    1890:	1f 4f       	sbci	r17, 0xFF	; 255
    1892:	ce 01       	movw	r24, r28
    1894:	8b 57       	subi	r24, 0x7B	; 123
    1896:	9f 4f       	sbci	r25, 0xFF	; 255
    1898:	fc 01       	movw	r30, r24
    189a:	60 81       	ld	r22, Z
    189c:	71 81       	ldd	r23, Z+1	; 0x01
    189e:	82 81       	ldd	r24, Z+2	; 0x02
    18a0:	93 81       	ldd	r25, Z+3	; 0x03
    18a2:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	f8 01       	movw	r30, r16
    18ac:	80 83       	st	Z, r24
    18ae:	ce 01       	movw	r24, r28
    18b0:	80 56       	subi	r24, 0x60	; 96
    18b2:	9f 4f       	sbci	r25, 0xFF	; 255
    18b4:	9e 01       	movw	r18, r28
    18b6:	23 57       	subi	r18, 0x73	; 115
    18b8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ba:	f9 01       	movw	r30, r18
    18bc:	20 81       	ld	r18, Z
    18be:	fc 01       	movw	r30, r24
    18c0:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18c2:	ce 01       	movw	r24, r28
    18c4:	80 56       	subi	r24, 0x60	; 96
    18c6:	9f 4f       	sbci	r25, 0xFF	; 255
    18c8:	fc 01       	movw	r30, r24
    18ca:	80 81       	ld	r24, Z
    18cc:	28 2f       	mov	r18, r24
    18ce:	2a 95       	dec	r18
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <send_command1+0x332>
    18d2:	ce 01       	movw	r24, r28
    18d4:	80 56       	subi	r24, 0x60	; 96
    18d6:	9f 4f       	sbci	r25, 0xFF	; 255
    18d8:	fc 01       	movw	r30, r24
    18da:	20 83       	st	Z, r18
		_delay_us(100);
		putchar('e');
    18dc:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__iob+0x2>
    18e0:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__iob+0x3>
    18e4:	bc 01       	movw	r22, r24
    18e6:	85 e6       	ldi	r24, 0x65	; 101
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	0e 94 91 13 	call	0x2722	; 0x2722 <fputc>
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	a8 ec       	ldi	r26, 0xC8	; 200
    18f4:	b2 e4       	ldi	r27, 0x42	; 66
    18f6:	8d 83       	std	Y+5, r24	; 0x05
    18f8:	9e 83       	std	Y+6, r25	; 0x06
    18fa:	af 83       	std	Y+7, r26	; 0x07
    18fc:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    18fe:	8e 01       	movw	r16, r28
    1900:	07 59       	subi	r16, 0x97	; 151
    1902:	1f 4f       	sbci	r17, 0xFF	; 255
    1904:	25 e5       	ldi	r18, 0x55	; 85
    1906:	35 e5       	ldi	r19, 0x55	; 85
    1908:	45 e8       	ldi	r20, 0x85	; 133
    190a:	52 e4       	ldi	r21, 0x42	; 66
    190c:	6d 81       	ldd	r22, Y+5	; 0x05
    190e:	7e 81       	ldd	r23, Y+6	; 0x06
    1910:	8f 81       	ldd	r24, Y+7	; 0x07
    1912:	98 85       	ldd	r25, Y+8	; 0x08
    1914:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	f8 01       	movw	r30, r16
    191e:	80 83       	st	Z, r24
    1920:	91 83       	std	Z+1, r25	; 0x01
    1922:	a2 83       	std	Z+2, r26	; 0x02
    1924:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1926:	8e 01       	movw	r16, r28
    1928:	03 59       	subi	r16, 0x93	; 147
    192a:	1f 4f       	sbci	r17, 0xFF	; 255
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	48 e4       	ldi	r20, 0x48	; 72
    1932:	52 e4       	ldi	r21, 0x42	; 66
    1934:	6d 81       	ldd	r22, Y+5	; 0x05
    1936:	7e 81       	ldd	r23, Y+6	; 0x06
    1938:	8f 81       	ldd	r24, Y+7	; 0x07
    193a:	98 85       	ldd	r25, Y+8	; 0x08
    193c:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	f8 01       	movw	r30, r16
    1946:	80 83       	st	Z, r24
    1948:	91 83       	std	Z+1, r25	; 0x01
    194a:	a2 83       	std	Z+2, r26	; 0x02
    194c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    194e:	ce 01       	movw	r24, r28
    1950:	87 59       	subi	r24, 0x97	; 151
    1952:	9f 4f       	sbci	r25, 0xFF	; 255
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	40 e8       	ldi	r20, 0x80	; 128
    195a:	5f e3       	ldi	r21, 0x3F	; 63
    195c:	fc 01       	movw	r30, r24
    195e:	60 81       	ld	r22, Z
    1960:	71 81       	ldd	r23, Z+1	; 0x01
    1962:	82 81       	ldd	r24, Z+2	; 0x02
    1964:	93 81       	ldd	r25, Z+3	; 0x03
    1966:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__cmpsf2>
    196a:	88 23       	and	r24, r24
    196c:	3c f4       	brge	.+14     	; 0x197c <send_command1+0x3e0>
		__ticks = 1;
    196e:	ce 01       	movw	r24, r28
    1970:	8f 58       	subi	r24, 0x8F	; 143
    1972:	9f 4f       	sbci	r25, 0xFF	; 255
    1974:	21 e0       	ldi	r18, 0x01	; 1
    1976:	fc 01       	movw	r30, r24
    1978:	20 83       	st	Z, r18
    197a:	2c c1       	rjmp	.+600    	; 0x1bd4 <send_command1+0x638>
	else if (__tmp2 > 65535)
    197c:	ce 01       	movw	r24, r28
    197e:	83 59       	subi	r24, 0x93	; 147
    1980:	9f 4f       	sbci	r25, 0xFF	; 255
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	3f ef       	ldi	r19, 0xFF	; 255
    1986:	4f e7       	ldi	r20, 0x7F	; 127
    1988:	57 e4       	ldi	r21, 0x47	; 71
    198a:	fc 01       	movw	r30, r24
    198c:	60 81       	ld	r22, Z
    198e:	71 81       	ldd	r23, Z+1	; 0x01
    1990:	82 81       	ldd	r24, Z+2	; 0x02
    1992:	93 81       	ldd	r25, Z+3	; 0x03
    1994:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
    1998:	18 16       	cp	r1, r24
    199a:	0c f0       	brlt	.+2      	; 0x199e <send_command1+0x402>
    199c:	cd c0       	rjmp	.+410    	; 0x1b38 <send_command1+0x59c>
	{
		_delay_ms(__us / 1000.0);
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	4a e7       	ldi	r20, 0x7A	; 122
    19a4:	54 e4       	ldi	r21, 0x44	; 68
    19a6:	6d 81       	ldd	r22, Y+5	; 0x05
    19a8:	7e 81       	ldd	r23, Y+6	; 0x06
    19aa:	8f 81       	ldd	r24, Y+7	; 0x07
    19ac:	98 85       	ldd	r25, Y+8	; 0x08
    19ae:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__divsf3>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	9e 01       	movw	r18, r28
    19b8:	2e 58       	subi	r18, 0x8E	; 142
    19ba:	3f 4f       	sbci	r19, 0xFF	; 255
    19bc:	f9 01       	movw	r30, r18
    19be:	80 83       	st	Z, r24
    19c0:	91 83       	std	Z+1, r25	; 0x01
    19c2:	a2 83       	std	Z+2, r26	; 0x02
    19c4:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    19c6:	8e 01       	movw	r16, r28
    19c8:	0a 58       	subi	r16, 0x8A	; 138
    19ca:	1f 4f       	sbci	r17, 0xFF	; 255
    19cc:	ce 01       	movw	r24, r28
    19ce:	8e 58       	subi	r24, 0x8E	; 142
    19d0:	9f 4f       	sbci	r25, 0xFF	; 255
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e5       	ldi	r19, 0x50	; 80
    19d6:	43 e4       	ldi	r20, 0x43	; 67
    19d8:	57 e4       	ldi	r21, 0x47	; 71
    19da:	fc 01       	movw	r30, r24
    19dc:	60 81       	ld	r22, Z
    19de:	71 81       	ldd	r23, Z+1	; 0x01
    19e0:	82 81       	ldd	r24, Z+2	; 0x02
    19e2:	93 81       	ldd	r25, Z+3	; 0x03
    19e4:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	f8 01       	movw	r30, r16
    19ee:	80 83       	st	Z, r24
    19f0:	91 83       	std	Z+1, r25	; 0x01
    19f2:	a2 83       	std	Z+2, r26	; 0x02
    19f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19f6:	ce 01       	movw	r24, r28
    19f8:	8a 58       	subi	r24, 0x8A	; 138
    19fa:	9f 4f       	sbci	r25, 0xFF	; 255
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	40 e8       	ldi	r20, 0x80	; 128
    1a02:	5f e3       	ldi	r21, 0x3F	; 63
    1a04:	fc 01       	movw	r30, r24
    1a06:	60 81       	ld	r22, Z
    1a08:	71 81       	ldd	r23, Z+1	; 0x01
    1a0a:	82 81       	ldd	r24, Z+2	; 0x02
    1a0c:	93 81       	ldd	r25, Z+3	; 0x03
    1a0e:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__cmpsf2>
    1a12:	88 23       	and	r24, r24
    1a14:	4c f4       	brge	.+18     	; 0x1a28 <send_command1+0x48c>
		__ticks = 1;
    1a16:	ce 01       	movw	r24, r28
    1a18:	86 58       	subi	r24, 0x86	; 134
    1a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1c:	21 e0       	ldi	r18, 0x01	; 1
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	fc 01       	movw	r30, r24
    1a22:	31 83       	std	Z+1, r19	; 0x01
    1a24:	20 83       	st	Z, r18
    1a26:	6d c0       	rjmp	.+218    	; 0x1b02 <send_command1+0x566>
	else if (__tmp > 65535)
    1a28:	ce 01       	movw	r24, r28
    1a2a:	8a 58       	subi	r24, 0x8A	; 138
    1a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	3f ef       	ldi	r19, 0xFF	; 255
    1a32:	4f e7       	ldi	r20, 0x7F	; 127
    1a34:	57 e4       	ldi	r21, 0x47	; 71
    1a36:	fc 01       	movw	r30, r24
    1a38:	60 81       	ld	r22, Z
    1a3a:	71 81       	ldd	r23, Z+1	; 0x01
    1a3c:	82 81       	ldd	r24, Z+2	; 0x02
    1a3e:	93 81       	ldd	r25, Z+3	; 0x03
    1a40:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
    1a44:	18 16       	cp	r1, r24
    1a46:	0c f0       	brlt	.+2      	; 0x1a4a <send_command1+0x4ae>
    1a48:	4a c0       	rjmp	.+148    	; 0x1ade <send_command1+0x542>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4a:	ce 01       	movw	r24, r28
    1a4c:	8e 58       	subi	r24, 0x8E	; 142
    1a4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	40 e2       	ldi	r20, 0x20	; 32
    1a56:	51 e4       	ldi	r21, 0x41	; 65
    1a58:	fc 01       	movw	r30, r24
    1a5a:	60 81       	ld	r22, Z
    1a5c:	71 81       	ldd	r23, Z+1	; 0x01
    1a5e:	82 81       	ldd	r24, Z+2	; 0x02
    1a60:	93 81       	ldd	r25, Z+3	; 0x03
    1a62:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	8e 01       	movw	r16, r28
    1a6c:	06 58       	subi	r16, 0x86	; 134
    1a6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a70:	bc 01       	movw	r22, r24
    1a72:	cd 01       	movw	r24, r26
    1a74:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	f8 01       	movw	r30, r16
    1a7e:	91 83       	std	Z+1, r25	; 0x01
    1a80:	80 83       	st	Z, r24
    1a82:	24 c0       	rjmp	.+72     	; 0x1acc <send_command1+0x530>
    1a84:	ce 01       	movw	r24, r28
    1a86:	84 58       	subi	r24, 0x84	; 132
    1a88:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8a:	28 e8       	ldi	r18, 0x88	; 136
    1a8c:	33 e1       	ldi	r19, 0x13	; 19
    1a8e:	fc 01       	movw	r30, r24
    1a90:	31 83       	std	Z+1, r19	; 0x01
    1a92:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a94:	ce 01       	movw	r24, r28
    1a96:	84 58       	subi	r24, 0x84	; 132
    1a98:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	80 81       	ld	r24, Z
    1a9e:	91 81       	ldd	r25, Z+1	; 0x01
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	f1 f7       	brne	.-4      	; 0x1aa0 <send_command1+0x504>
    1aa4:	9e 01       	movw	r18, r28
    1aa6:	24 58       	subi	r18, 0x84	; 132
    1aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aaa:	f9 01       	movw	r30, r18
    1aac:	91 83       	std	Z+1, r25	; 0x01
    1aae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab0:	ce 01       	movw	r24, r28
    1ab2:	86 58       	subi	r24, 0x86	; 134
    1ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab6:	9e 01       	movw	r18, r28
    1ab8:	26 58       	subi	r18, 0x86	; 134
    1aba:	3f 4f       	sbci	r19, 0xFF	; 255
    1abc:	f9 01       	movw	r30, r18
    1abe:	20 81       	ld	r18, Z
    1ac0:	31 81       	ldd	r19, Z+1	; 0x01
    1ac2:	21 50       	subi	r18, 0x01	; 1
    1ac4:	31 09       	sbc	r19, r1
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	31 83       	std	Z+1, r19	; 0x01
    1aca:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1acc:	ce 01       	movw	r24, r28
    1ace:	86 58       	subi	r24, 0x86	; 134
    1ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	80 81       	ld	r24, Z
    1ad6:	91 81       	ldd	r25, Z+1	; 0x01
    1ad8:	89 2b       	or	r24, r25
    1ada:	a1 f6       	brne	.-88     	; 0x1a84 <send_command1+0x4e8>
    1adc:	7b c0       	rjmp	.+246    	; 0x1bd4 <send_command1+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ade:	8e 01       	movw	r16, r28
    1ae0:	06 58       	subi	r16, 0x86	; 134
    1ae2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae4:	ce 01       	movw	r24, r28
    1ae6:	8a 58       	subi	r24, 0x8A	; 138
    1ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aea:	fc 01       	movw	r30, r24
    1aec:	60 81       	ld	r22, Z
    1aee:	71 81       	ldd	r23, Z+1	; 0x01
    1af0:	82 81       	ldd	r24, Z+2	; 0x02
    1af2:	93 81       	ldd	r25, Z+3	; 0x03
    1af4:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	f8 01       	movw	r30, r16
    1afe:	91 83       	std	Z+1, r25	; 0x01
    1b00:	80 83       	st	Z, r24
    1b02:	ce 01       	movw	r24, r28
    1b04:	82 58       	subi	r24, 0x82	; 130
    1b06:	9f 4f       	sbci	r25, 0xFF	; 255
    1b08:	9e 01       	movw	r18, r28
    1b0a:	26 58       	subi	r18, 0x86	; 134
    1b0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0e:	f9 01       	movw	r30, r18
    1b10:	20 81       	ld	r18, Z
    1b12:	31 81       	ldd	r19, Z+1	; 0x01
    1b14:	fc 01       	movw	r30, r24
    1b16:	31 83       	std	Z+1, r19	; 0x01
    1b18:	20 83       	st	Z, r18
    1b1a:	ce 01       	movw	r24, r28
    1b1c:	82 58       	subi	r24, 0x82	; 130
    1b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b20:	fc 01       	movw	r30, r24
    1b22:	80 81       	ld	r24, Z
    1b24:	91 81       	ldd	r25, Z+1	; 0x01
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <send_command1+0x58a>
    1b2a:	9e 01       	movw	r18, r28
    1b2c:	22 58       	subi	r18, 0x82	; 130
    1b2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b30:	f9 01       	movw	r30, r18
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	80 83       	st	Z, r24
    1b36:	4e c0       	rjmp	.+156    	; 0x1bd4 <send_command1+0x638>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1b38:	ce 01       	movw	r24, r28
    1b3a:	87 59       	subi	r24, 0x97	; 151
    1b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	4f e7       	ldi	r20, 0x7F	; 127
    1b44:	53 e4       	ldi	r21, 0x43	; 67
    1b46:	fc 01       	movw	r30, r24
    1b48:	60 81       	ld	r22, Z
    1b4a:	71 81       	ldd	r23, Z+1	; 0x01
    1b4c:	82 81       	ldd	r24, Z+2	; 0x02
    1b4e:	93 81       	ldd	r25, Z+3	; 0x03
    1b50:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
    1b54:	18 16       	cp	r1, r24
    1b56:	6c f5       	brge	.+90     	; 0x1bb2 <send_command1+0x616>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1b58:	8e 01       	movw	r16, r28
    1b5a:	00 58       	subi	r16, 0x80	; 128
    1b5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5e:	ce 01       	movw	r24, r28
    1b60:	83 59       	subi	r24, 0x93	; 147
    1b62:	9f 4f       	sbci	r25, 0xFF	; 255
    1b64:	fc 01       	movw	r30, r24
    1b66:	60 81       	ld	r22, Z
    1b68:	71 81       	ldd	r23, Z+1	; 0x01
    1b6a:	82 81       	ldd	r24, Z+2	; 0x02
    1b6c:	93 81       	ldd	r25, Z+3	; 0x03
    1b6e:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	f8 01       	movw	r30, r16
    1b78:	91 83       	std	Z+1, r25	; 0x01
    1b7a:	80 83       	st	Z, r24
    1b7c:	ce 01       	movw	r24, r28
    1b7e:	8e 57       	subi	r24, 0x7E	; 126
    1b80:	9f 4f       	sbci	r25, 0xFF	; 255
    1b82:	9e 01       	movw	r18, r28
    1b84:	20 58       	subi	r18, 0x80	; 128
    1b86:	3f 4f       	sbci	r19, 0xFF	; 255
    1b88:	f9 01       	movw	r30, r18
    1b8a:	20 81       	ld	r18, Z
    1b8c:	31 81       	ldd	r19, Z+1	; 0x01
    1b8e:	fc 01       	movw	r30, r24
    1b90:	31 83       	std	Z+1, r19	; 0x01
    1b92:	20 83       	st	Z, r18
    1b94:	ce 01       	movw	r24, r28
    1b96:	8e 57       	subi	r24, 0x7E	; 126
    1b98:	9f 4f       	sbci	r25, 0xFF	; 255
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	80 81       	ld	r24, Z
    1b9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	f1 f7       	brne	.-4      	; 0x1ba0 <send_command1+0x604>
    1ba4:	9e 01       	movw	r18, r28
    1ba6:	2e 57       	subi	r18, 0x7E	; 126
    1ba8:	3f 4f       	sbci	r19, 0xFF	; 255
    1baa:	f9 01       	movw	r30, r18
    1bac:	91 83       	std	Z+1, r25	; 0x01
    1bae:	80 83       	st	Z, r24
    1bb0:	28 c0       	rjmp	.+80     	; 0x1c02 <send_command1+0x666>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bb2:	8e 01       	movw	r16, r28
    1bb4:	0f 58       	subi	r16, 0x8F	; 143
    1bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb8:	ce 01       	movw	r24, r28
    1bba:	87 59       	subi	r24, 0x97	; 151
    1bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	60 81       	ld	r22, Z
    1bc2:	71 81       	ldd	r23, Z+1	; 0x01
    1bc4:	82 81       	ldd	r24, Z+2	; 0x02
    1bc6:	93 81       	ldd	r25, Z+3	; 0x03
    1bc8:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	f8 01       	movw	r30, r16
    1bd2:	80 83       	st	Z, r24
    1bd4:	ce 01       	movw	r24, r28
    1bd6:	8c 57       	subi	r24, 0x7C	; 124
    1bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bda:	9e 01       	movw	r18, r28
    1bdc:	2f 58       	subi	r18, 0x8F	; 143
    1bde:	3f 4f       	sbci	r19, 0xFF	; 255
    1be0:	f9 01       	movw	r30, r18
    1be2:	20 81       	ld	r18, Z
    1be4:	fc 01       	movw	r30, r24
    1be6:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1be8:	ce 01       	movw	r24, r28
    1bea:	8c 57       	subi	r24, 0x7C	; 124
    1bec:	9f 4f       	sbci	r25, 0xFF	; 255
    1bee:	fc 01       	movw	r30, r24
    1bf0:	80 81       	ld	r24, Z
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	2a 95       	dec	r18
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <send_command1+0x658>
    1bf8:	ce 01       	movw	r24, r28
    1bfa:	8c 57       	subi	r24, 0x7C	; 124
    1bfc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfe:	fc 01       	movw	r30, r24
    1c00:	20 83       	st	Z, r18
		_delay_us(100);
		putchar('s');
    1c02:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__iob+0x2>
    1c06:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__iob+0x3>
    1c0a:	bc 01       	movw	r22, r24
    1c0c:	83 e7       	ldi	r24, 0x73	; 115
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	0e 94 91 13 	call	0x2722	; 0x2722 <fputc>
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	a8 ec       	ldi	r26, 0xC8	; 200
    1c1a:	b2 e4       	ldi	r27, 0x42	; 66
    1c1c:	89 87       	std	Y+9, r24	; 0x09
    1c1e:	9a 87       	std	Y+10, r25	; 0x0a
    1c20:	ab 87       	std	Y+11, r26	; 0x0b
    1c22:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1c24:	8e 01       	movw	r16, r28
    1c26:	03 5b       	subi	r16, 0xB3	; 179
    1c28:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2a:	25 e5       	ldi	r18, 0x55	; 85
    1c2c:	35 e5       	ldi	r19, 0x55	; 85
    1c2e:	45 e8       	ldi	r20, 0x85	; 133
    1c30:	52 e4       	ldi	r21, 0x42	; 66
    1c32:	69 85       	ldd	r22, Y+9	; 0x09
    1c34:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c36:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c38:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c3a:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	f8 01       	movw	r30, r16
    1c44:	80 83       	st	Z, r24
    1c46:	91 83       	std	Z+1, r25	; 0x01
    1c48:	a2 83       	std	Z+2, r26	; 0x02
    1c4a:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1c4c:	8e 01       	movw	r16, r28
    1c4e:	0f 5a       	subi	r16, 0xAF	; 175
    1c50:	1f 4f       	sbci	r17, 0xFF	; 255
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	48 e4       	ldi	r20, 0x48	; 72
    1c58:	52 e4       	ldi	r21, 0x42	; 66
    1c5a:	69 85       	ldd	r22, Y+9	; 0x09
    1c5c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c5e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c60:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c62:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	80 83       	st	Z, r24
    1c6e:	91 83       	std	Z+1, r25	; 0x01
    1c70:	a2 83       	std	Z+2, r26	; 0x02
    1c72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c74:	ce 01       	movw	r24, r28
    1c76:	83 5b       	subi	r24, 0xB3	; 179
    1c78:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	40 e8       	ldi	r20, 0x80	; 128
    1c80:	5f e3       	ldi	r21, 0x3F	; 63
    1c82:	fc 01       	movw	r30, r24
    1c84:	60 81       	ld	r22, Z
    1c86:	71 81       	ldd	r23, Z+1	; 0x01
    1c88:	82 81       	ldd	r24, Z+2	; 0x02
    1c8a:	93 81       	ldd	r25, Z+3	; 0x03
    1c8c:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__cmpsf2>
    1c90:	88 23       	and	r24, r24
    1c92:	3c f4       	brge	.+14     	; 0x1ca2 <send_command1+0x706>
		__ticks = 1;
    1c94:	ce 01       	movw	r24, r28
    1c96:	8b 5a       	subi	r24, 0xAB	; 171
    1c98:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9a:	21 e0       	ldi	r18, 0x01	; 1
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	20 83       	st	Z, r18
    1ca0:	2c c1       	rjmp	.+600    	; 0x1efa <send_command1+0x95e>
	else if (__tmp2 > 65535)
    1ca2:	ce 01       	movw	r24, r28
    1ca4:	8f 5a       	subi	r24, 0xAF	; 175
    1ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	3f ef       	ldi	r19, 0xFF	; 255
    1cac:	4f e7       	ldi	r20, 0x7F	; 127
    1cae:	57 e4       	ldi	r21, 0x47	; 71
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	60 81       	ld	r22, Z
    1cb4:	71 81       	ldd	r23, Z+1	; 0x01
    1cb6:	82 81       	ldd	r24, Z+2	; 0x02
    1cb8:	93 81       	ldd	r25, Z+3	; 0x03
    1cba:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
    1cbe:	18 16       	cp	r1, r24
    1cc0:	0c f0       	brlt	.+2      	; 0x1cc4 <send_command1+0x728>
    1cc2:	cd c0       	rjmp	.+410    	; 0x1e5e <send_command1+0x8c2>
	{
		_delay_ms(__us / 1000.0);
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	4a e7       	ldi	r20, 0x7A	; 122
    1cca:	54 e4       	ldi	r21, 0x44	; 68
    1ccc:	69 85       	ldd	r22, Y+9	; 0x09
    1cce:	7a 85       	ldd	r23, Y+10	; 0x0a
    1cd0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cd2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cd4:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__divsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	9e 01       	movw	r18, r28
    1cde:	2a 5a       	subi	r18, 0xAA	; 170
    1ce0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce2:	f9 01       	movw	r30, r18
    1ce4:	80 83       	st	Z, r24
    1ce6:	91 83       	std	Z+1, r25	; 0x01
    1ce8:	a2 83       	std	Z+2, r26	; 0x02
    1cea:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1cec:	8e 01       	movw	r16, r28
    1cee:	06 5a       	subi	r16, 0xA6	; 166
    1cf0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf2:	ce 01       	movw	r24, r28
    1cf4:	8a 5a       	subi	r24, 0xAA	; 170
    1cf6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e5       	ldi	r19, 0x50	; 80
    1cfc:	43 e4       	ldi	r20, 0x43	; 67
    1cfe:	57 e4       	ldi	r21, 0x47	; 71
    1d00:	fc 01       	movw	r30, r24
    1d02:	60 81       	ld	r22, Z
    1d04:	71 81       	ldd	r23, Z+1	; 0x01
    1d06:	82 81       	ldd	r24, Z+2	; 0x02
    1d08:	93 81       	ldd	r25, Z+3	; 0x03
    1d0a:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	f8 01       	movw	r30, r16
    1d14:	80 83       	st	Z, r24
    1d16:	91 83       	std	Z+1, r25	; 0x01
    1d18:	a2 83       	std	Z+2, r26	; 0x02
    1d1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d1c:	ce 01       	movw	r24, r28
    1d1e:	86 5a       	subi	r24, 0xA6	; 166
    1d20:	9f 4f       	sbci	r25, 0xFF	; 255
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	40 e8       	ldi	r20, 0x80	; 128
    1d28:	5f e3       	ldi	r21, 0x3F	; 63
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	60 81       	ld	r22, Z
    1d2e:	71 81       	ldd	r23, Z+1	; 0x01
    1d30:	82 81       	ldd	r24, Z+2	; 0x02
    1d32:	93 81       	ldd	r25, Z+3	; 0x03
    1d34:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__cmpsf2>
    1d38:	88 23       	and	r24, r24
    1d3a:	4c f4       	brge	.+18     	; 0x1d4e <send_command1+0x7b2>
		__ticks = 1;
    1d3c:	ce 01       	movw	r24, r28
    1d3e:	82 5a       	subi	r24, 0xA2	; 162
    1d40:	9f 4f       	sbci	r25, 0xFF	; 255
    1d42:	21 e0       	ldi	r18, 0x01	; 1
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	fc 01       	movw	r30, r24
    1d48:	31 83       	std	Z+1, r19	; 0x01
    1d4a:	20 83       	st	Z, r18
    1d4c:	6d c0       	rjmp	.+218    	; 0x1e28 <send_command1+0x88c>
	else if (__tmp > 65535)
    1d4e:	ce 01       	movw	r24, r28
    1d50:	86 5a       	subi	r24, 0xA6	; 166
    1d52:	9f 4f       	sbci	r25, 0xFF	; 255
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	3f ef       	ldi	r19, 0xFF	; 255
    1d58:	4f e7       	ldi	r20, 0x7F	; 127
    1d5a:	57 e4       	ldi	r21, 0x47	; 71
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	60 81       	ld	r22, Z
    1d60:	71 81       	ldd	r23, Z+1	; 0x01
    1d62:	82 81       	ldd	r24, Z+2	; 0x02
    1d64:	93 81       	ldd	r25, Z+3	; 0x03
    1d66:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
    1d6a:	18 16       	cp	r1, r24
    1d6c:	0c f0       	brlt	.+2      	; 0x1d70 <send_command1+0x7d4>
    1d6e:	4a c0       	rjmp	.+148    	; 0x1e04 <send_command1+0x868>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d70:	ce 01       	movw	r24, r28
    1d72:	8a 5a       	subi	r24, 0xAA	; 170
    1d74:	9f 4f       	sbci	r25, 0xFF	; 255
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e2       	ldi	r20, 0x20	; 32
    1d7c:	51 e4       	ldi	r21, 0x41	; 65
    1d7e:	fc 01       	movw	r30, r24
    1d80:	60 81       	ld	r22, Z
    1d82:	71 81       	ldd	r23, Z+1	; 0x01
    1d84:	82 81       	ldd	r24, Z+2	; 0x02
    1d86:	93 81       	ldd	r25, Z+3	; 0x03
    1d88:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	8e 01       	movw	r16, r28
    1d92:	02 5a       	subi	r16, 0xA2	; 162
    1d94:	1f 4f       	sbci	r17, 0xFF	; 255
    1d96:	bc 01       	movw	r22, r24
    1d98:	cd 01       	movw	r24, r26
    1d9a:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	f8 01       	movw	r30, r16
    1da4:	91 83       	std	Z+1, r25	; 0x01
    1da6:	80 83       	st	Z, r24
    1da8:	24 c0       	rjmp	.+72     	; 0x1df2 <send_command1+0x856>
    1daa:	ce 01       	movw	r24, r28
    1dac:	80 5a       	subi	r24, 0xA0	; 160
    1dae:	9f 4f       	sbci	r25, 0xFF	; 255
    1db0:	28 e8       	ldi	r18, 0x88	; 136
    1db2:	33 e1       	ldi	r19, 0x13	; 19
    1db4:	fc 01       	movw	r30, r24
    1db6:	31 83       	std	Z+1, r19	; 0x01
    1db8:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dba:	ce 01       	movw	r24, r28
    1dbc:	80 5a       	subi	r24, 0xA0	; 160
    1dbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	80 81       	ld	r24, Z
    1dc4:	91 81       	ldd	r25, Z+1	; 0x01
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	f1 f7       	brne	.-4      	; 0x1dc6 <send_command1+0x82a>
    1dca:	9e 01       	movw	r18, r28
    1dcc:	20 5a       	subi	r18, 0xA0	; 160
    1dce:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd0:	f9 01       	movw	r30, r18
    1dd2:	91 83       	std	Z+1, r25	; 0x01
    1dd4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	82 5a       	subi	r24, 0xA2	; 162
    1dda:	9f 4f       	sbci	r25, 0xFF	; 255
    1ddc:	9e 01       	movw	r18, r28
    1dde:	22 5a       	subi	r18, 0xA2	; 162
    1de0:	3f 4f       	sbci	r19, 0xFF	; 255
    1de2:	f9 01       	movw	r30, r18
    1de4:	20 81       	ld	r18, Z
    1de6:	31 81       	ldd	r19, Z+1	; 0x01
    1de8:	21 50       	subi	r18, 0x01	; 1
    1dea:	31 09       	sbc	r19, r1
    1dec:	fc 01       	movw	r30, r24
    1dee:	31 83       	std	Z+1, r19	; 0x01
    1df0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df2:	ce 01       	movw	r24, r28
    1df4:	82 5a       	subi	r24, 0xA2	; 162
    1df6:	9f 4f       	sbci	r25, 0xFF	; 255
    1df8:	fc 01       	movw	r30, r24
    1dfa:	80 81       	ld	r24, Z
    1dfc:	91 81       	ldd	r25, Z+1	; 0x01
    1dfe:	89 2b       	or	r24, r25
    1e00:	a1 f6       	brne	.-88     	; 0x1daa <send_command1+0x80e>
    1e02:	7b c0       	rjmp	.+246    	; 0x1efa <send_command1+0x95e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e04:	8e 01       	movw	r16, r28
    1e06:	02 5a       	subi	r16, 0xA2	; 162
    1e08:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0a:	ce 01       	movw	r24, r28
    1e0c:	86 5a       	subi	r24, 0xA6	; 166
    1e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e10:	fc 01       	movw	r30, r24
    1e12:	60 81       	ld	r22, Z
    1e14:	71 81       	ldd	r23, Z+1	; 0x01
    1e16:	82 81       	ldd	r24, Z+2	; 0x02
    1e18:	93 81       	ldd	r25, Z+3	; 0x03
    1e1a:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	f8 01       	movw	r30, r16
    1e24:	91 83       	std	Z+1, r25	; 0x01
    1e26:	80 83       	st	Z, r24
    1e28:	ce 01       	movw	r24, r28
    1e2a:	8e 59       	subi	r24, 0x9E	; 158
    1e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2e:	9e 01       	movw	r18, r28
    1e30:	22 5a       	subi	r18, 0xA2	; 162
    1e32:	3f 4f       	sbci	r19, 0xFF	; 255
    1e34:	f9 01       	movw	r30, r18
    1e36:	20 81       	ld	r18, Z
    1e38:	31 81       	ldd	r19, Z+1	; 0x01
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	31 83       	std	Z+1, r19	; 0x01
    1e3e:	20 83       	st	Z, r18
    1e40:	ce 01       	movw	r24, r28
    1e42:	8e 59       	subi	r24, 0x9E	; 158
    1e44:	9f 4f       	sbci	r25, 0xFF	; 255
    1e46:	fc 01       	movw	r30, r24
    1e48:	80 81       	ld	r24, Z
    1e4a:	91 81       	ldd	r25, Z+1	; 0x01
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <send_command1+0x8b0>
    1e50:	9e 01       	movw	r18, r28
    1e52:	2e 59       	subi	r18, 0x9E	; 158
    1e54:	3f 4f       	sbci	r19, 0xFF	; 255
    1e56:	f9 01       	movw	r30, r18
    1e58:	91 83       	std	Z+1, r25	; 0x01
    1e5a:	80 83       	st	Z, r24
    1e5c:	4e c0       	rjmp	.+156    	; 0x1efa <send_command1+0x95e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1e5e:	ce 01       	movw	r24, r28
    1e60:	83 5b       	subi	r24, 0xB3	; 179
    1e62:	9f 4f       	sbci	r25, 0xFF	; 255
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	4f e7       	ldi	r20, 0x7F	; 127
    1e6a:	53 e4       	ldi	r21, 0x43	; 67
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	60 81       	ld	r22, Z
    1e70:	71 81       	ldd	r23, Z+1	; 0x01
    1e72:	82 81       	ldd	r24, Z+2	; 0x02
    1e74:	93 81       	ldd	r25, Z+3	; 0x03
    1e76:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
    1e7a:	18 16       	cp	r1, r24
    1e7c:	6c f5       	brge	.+90     	; 0x1ed8 <send_command1+0x93c>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1e7e:	8e 01       	movw	r16, r28
    1e80:	0c 59       	subi	r16, 0x9C	; 156
    1e82:	1f 4f       	sbci	r17, 0xFF	; 255
    1e84:	ce 01       	movw	r24, r28
    1e86:	8f 5a       	subi	r24, 0xAF	; 175
    1e88:	9f 4f       	sbci	r25, 0xFF	; 255
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	60 81       	ld	r22, Z
    1e8e:	71 81       	ldd	r23, Z+1	; 0x01
    1e90:	82 81       	ldd	r24, Z+2	; 0x02
    1e92:	93 81       	ldd	r25, Z+3	; 0x03
    1e94:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	f8 01       	movw	r30, r16
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	80 83       	st	Z, r24
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	8a 59       	subi	r24, 0x9A	; 154
    1ea6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea8:	9e 01       	movw	r18, r28
    1eaa:	2c 59       	subi	r18, 0x9C	; 156
    1eac:	3f 4f       	sbci	r19, 0xFF	; 255
    1eae:	f9 01       	movw	r30, r18
    1eb0:	20 81       	ld	r18, Z
    1eb2:	31 81       	ldd	r19, Z+1	; 0x01
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	31 83       	std	Z+1, r19	; 0x01
    1eb8:	20 83       	st	Z, r18
    1eba:	ce 01       	movw	r24, r28
    1ebc:	8a 59       	subi	r24, 0x9A	; 154
    1ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	80 81       	ld	r24, Z
    1ec4:	91 81       	ldd	r25, Z+1	; 0x01
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	f1 f7       	brne	.-4      	; 0x1ec6 <send_command1+0x92a>
    1eca:	9e 01       	movw	r18, r28
    1ecc:	2a 59       	subi	r18, 0x9A	; 154
    1ece:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed0:	f9 01       	movw	r30, r18
    1ed2:	91 83       	std	Z+1, r25	; 0x01
    1ed4:	80 83       	st	Z, r24
    1ed6:	28 c0       	rjmp	.+80     	; 0x1f28 <send_command1+0x98c>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ed8:	8e 01       	movw	r16, r28
    1eda:	0b 5a       	subi	r16, 0xAB	; 171
    1edc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ede:	ce 01       	movw	r24, r28
    1ee0:	83 5b       	subi	r24, 0xB3	; 179
    1ee2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	60 81       	ld	r22, Z
    1ee8:	71 81       	ldd	r23, Z+1	; 0x01
    1eea:	82 81       	ldd	r24, Z+2	; 0x02
    1eec:	93 81       	ldd	r25, Z+3	; 0x03
    1eee:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	f8 01       	movw	r30, r16
    1ef8:	80 83       	st	Z, r24
    1efa:	ce 01       	movw	r24, r28
    1efc:	88 59       	subi	r24, 0x98	; 152
    1efe:	9f 4f       	sbci	r25, 0xFF	; 255
    1f00:	9e 01       	movw	r18, r28
    1f02:	2b 5a       	subi	r18, 0xAB	; 171
    1f04:	3f 4f       	sbci	r19, 0xFF	; 255
    1f06:	f9 01       	movw	r30, r18
    1f08:	20 81       	ld	r18, Z
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f0e:	ce 01       	movw	r24, r28
    1f10:	88 59       	subi	r24, 0x98	; 152
    1f12:	9f 4f       	sbci	r25, 0xFF	; 255
    1f14:	fc 01       	movw	r30, r24
    1f16:	80 81       	ld	r24, Z
    1f18:	28 2f       	mov	r18, r24
    1f1a:	2a 95       	dec	r18
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <send_command1+0x97e>
    1f1e:	ce 01       	movw	r24, r28
    1f20:	88 59       	subi	r24, 0x98	; 152
    1f22:	9f 4f       	sbci	r25, 0xFF	; 255
    1f24:	fc 01       	movw	r30, r24
    1f26:	20 83       	st	Z, r18
		_delay_us(100);
		putchar('t');
    1f28:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__iob+0x2>
    1f2c:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__iob+0x3>
    1f30:	bc 01       	movw	r22, r24
    1f32:	84 e7       	ldi	r24, 0x74	; 116
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	0e 94 91 13 	call	0x2722	; 0x2722 <fputc>
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	a8 ec       	ldi	r26, 0xC8	; 200
    1f40:	b2 e4       	ldi	r27, 0x42	; 66
    1f42:	8d 87       	std	Y+13, r24	; 0x0d
    1f44:	9e 87       	std	Y+14, r25	; 0x0e
    1f46:	af 87       	std	Y+15, r26	; 0x0f
    1f48:	b8 8b       	std	Y+16, r27	; 0x10
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1f4a:	25 e5       	ldi	r18, 0x55	; 85
    1f4c:	35 e5       	ldi	r19, 0x55	; 85
    1f4e:	45 e8       	ldi	r20, 0x85	; 133
    1f50:	52 e4       	ldi	r21, 0x42	; 66
    1f52:	6d 85       	ldd	r22, Y+13	; 0x0d
    1f54:	7e 85       	ldd	r23, Y+14	; 0x0e
    1f56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f58:	98 89       	ldd	r25, Y+16	; 0x10
    1f5a:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	89 ab       	std	Y+49, r24	; 0x31
    1f64:	9a ab       	std	Y+50, r25	; 0x32
    1f66:	ab ab       	std	Y+51, r26	; 0x33
    1f68:	bc ab       	std	Y+52, r27	; 0x34
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	48 e4       	ldi	r20, 0x48	; 72
    1f70:	52 e4       	ldi	r21, 0x42	; 66
    1f72:	6d 85       	ldd	r22, Y+13	; 0x0d
    1f74:	7e 85       	ldd	r23, Y+14	; 0x0e
    1f76:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f78:	98 89       	ldd	r25, Y+16	; 0x10
    1f7a:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	8d ab       	std	Y+53, r24	; 0x35
    1f84:	9e ab       	std	Y+54, r25	; 0x36
    1f86:	af ab       	std	Y+55, r26	; 0x37
    1f88:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	40 e8       	ldi	r20, 0x80	; 128
    1f90:	5f e3       	ldi	r21, 0x3F	; 63
    1f92:	69 a9       	ldd	r22, Y+49	; 0x31
    1f94:	7a a9       	ldd	r23, Y+50	; 0x32
    1f96:	8b a9       	ldd	r24, Y+51	; 0x33
    1f98:	9c a9       	ldd	r25, Y+52	; 0x34
    1f9a:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__cmpsf2>
    1f9e:	88 23       	and	r24, r24
    1fa0:	1c f4       	brge	.+6      	; 0x1fa8 <send_command1+0xa0c>
		__ticks = 1;
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	89 af       	std	Y+57, r24	; 0x39
    1fa6:	09 c1       	rjmp	.+530    	; 0x21ba <send_command1+0xc1e>
	else if (__tmp2 > 65535)
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	3f ef       	ldi	r19, 0xFF	; 255
    1fac:	4f e7       	ldi	r20, 0x7F	; 127
    1fae:	57 e4       	ldi	r21, 0x47	; 71
    1fb0:	6d a9       	ldd	r22, Y+53	; 0x35
    1fb2:	7e a9       	ldd	r23, Y+54	; 0x36
    1fb4:	8f a9       	ldd	r24, Y+55	; 0x37
    1fb6:	98 ad       	ldd	r25, Y+56	; 0x38
    1fb8:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
    1fbc:	18 16       	cp	r1, r24
    1fbe:	0c f0       	brlt	.+2      	; 0x1fc2 <send_command1+0xa26>
    1fc0:	be c0       	rjmp	.+380    	; 0x213e <send_command1+0xba2>
	{
		_delay_ms(__us / 1000.0);
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	4a e7       	ldi	r20, 0x7A	; 122
    1fc8:	54 e4       	ldi	r21, 0x44	; 68
    1fca:	6d 85       	ldd	r22, Y+13	; 0x0d
    1fcc:	7e 85       	ldd	r23, Y+14	; 0x0e
    1fce:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd0:	98 89       	ldd	r25, Y+16	; 0x10
    1fd2:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__divsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	8a af       	std	Y+58, r24	; 0x3a
    1fdc:	9b af       	std	Y+59, r25	; 0x3b
    1fde:	ac af       	std	Y+60, r26	; 0x3c
    1fe0:	bd af       	std	Y+61, r27	; 0x3d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1fe2:	8e 01       	movw	r16, r28
    1fe4:	02 5c       	subi	r16, 0xC2	; 194
    1fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e5       	ldi	r19, 0x50	; 80
    1fec:	43 e4       	ldi	r20, 0x43	; 67
    1fee:	57 e4       	ldi	r21, 0x47	; 71
    1ff0:	6a ad       	ldd	r22, Y+58	; 0x3a
    1ff2:	7b ad       	ldd	r23, Y+59	; 0x3b
    1ff4:	8c ad       	ldd	r24, Y+60	; 0x3c
    1ff6:	9d ad       	ldd	r25, Y+61	; 0x3d
    1ff8:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	f8 01       	movw	r30, r16
    2002:	80 83       	st	Z, r24
    2004:	91 83       	std	Z+1, r25	; 0x01
    2006:	a2 83       	std	Z+2, r26	; 0x02
    2008:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    200a:	ce 01       	movw	r24, r28
    200c:	ce 96       	adiw	r24, 0x3e	; 62
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	40 e8       	ldi	r20, 0x80	; 128
    2014:	5f e3       	ldi	r21, 0x3F	; 63
    2016:	fc 01       	movw	r30, r24
    2018:	60 81       	ld	r22, Z
    201a:	71 81       	ldd	r23, Z+1	; 0x01
    201c:	82 81       	ldd	r24, Z+2	; 0x02
    201e:	93 81       	ldd	r25, Z+3	; 0x03
    2020:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__cmpsf2>
    2024:	88 23       	and	r24, r24
    2026:	4c f4       	brge	.+18     	; 0x203a <send_command1+0xa9e>
		__ticks = 1;
    2028:	ce 01       	movw	r24, r28
    202a:	8e 5b       	subi	r24, 0xBE	; 190
    202c:	9f 4f       	sbci	r25, 0xFF	; 255
    202e:	21 e0       	ldi	r18, 0x01	; 1
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	fc 01       	movw	r30, r24
    2034:	31 83       	std	Z+1, r19	; 0x01
    2036:	20 83       	st	Z, r18
    2038:	67 c0       	rjmp	.+206    	; 0x2108 <send_command1+0xb6c>
	else if (__tmp > 65535)
    203a:	ce 01       	movw	r24, r28
    203c:	ce 96       	adiw	r24, 0x3e	; 62
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	3f ef       	ldi	r19, 0xFF	; 255
    2042:	4f e7       	ldi	r20, 0x7F	; 127
    2044:	57 e4       	ldi	r21, 0x47	; 71
    2046:	fc 01       	movw	r30, r24
    2048:	60 81       	ld	r22, Z
    204a:	71 81       	ldd	r23, Z+1	; 0x01
    204c:	82 81       	ldd	r24, Z+2	; 0x02
    204e:	93 81       	ldd	r25, Z+3	; 0x03
    2050:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
    2054:	18 16       	cp	r1, r24
    2056:	0c f0       	brlt	.+2      	; 0x205a <send_command1+0xabe>
    2058:	46 c0       	rjmp	.+140    	; 0x20e6 <send_command1+0xb4a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e2       	ldi	r20, 0x20	; 32
    2060:	51 e4       	ldi	r21, 0x41	; 65
    2062:	6a ad       	ldd	r22, Y+58	; 0x3a
    2064:	7b ad       	ldd	r23, Y+59	; 0x3b
    2066:	8c ad       	ldd	r24, Y+60	; 0x3c
    2068:	9d ad       	ldd	r25, Y+61	; 0x3d
    206a:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	8e 01       	movw	r16, r28
    2074:	0e 5b       	subi	r16, 0xBE	; 190
    2076:	1f 4f       	sbci	r17, 0xFF	; 255
    2078:	bc 01       	movw	r22, r24
    207a:	cd 01       	movw	r24, r26
    207c:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	f8 01       	movw	r30, r16
    2086:	91 83       	std	Z+1, r25	; 0x01
    2088:	80 83       	st	Z, r24
    208a:	24 c0       	rjmp	.+72     	; 0x20d4 <send_command1+0xb38>
    208c:	ce 01       	movw	r24, r28
    208e:	8c 5b       	subi	r24, 0xBC	; 188
    2090:	9f 4f       	sbci	r25, 0xFF	; 255
    2092:	28 e8       	ldi	r18, 0x88	; 136
    2094:	33 e1       	ldi	r19, 0x13	; 19
    2096:	fc 01       	movw	r30, r24
    2098:	31 83       	std	Z+1, r19	; 0x01
    209a:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    209c:	ce 01       	movw	r24, r28
    209e:	8c 5b       	subi	r24, 0xBC	; 188
    20a0:	9f 4f       	sbci	r25, 0xFF	; 255
    20a2:	fc 01       	movw	r30, r24
    20a4:	80 81       	ld	r24, Z
    20a6:	91 81       	ldd	r25, Z+1	; 0x01
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <send_command1+0xb0c>
    20ac:	9e 01       	movw	r18, r28
    20ae:	2c 5b       	subi	r18, 0xBC	; 188
    20b0:	3f 4f       	sbci	r19, 0xFF	; 255
    20b2:	f9 01       	movw	r30, r18
    20b4:	91 83       	std	Z+1, r25	; 0x01
    20b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b8:	ce 01       	movw	r24, r28
    20ba:	8e 5b       	subi	r24, 0xBE	; 190
    20bc:	9f 4f       	sbci	r25, 0xFF	; 255
    20be:	9e 01       	movw	r18, r28
    20c0:	2e 5b       	subi	r18, 0xBE	; 190
    20c2:	3f 4f       	sbci	r19, 0xFF	; 255
    20c4:	f9 01       	movw	r30, r18
    20c6:	20 81       	ld	r18, Z
    20c8:	31 81       	ldd	r19, Z+1	; 0x01
    20ca:	21 50       	subi	r18, 0x01	; 1
    20cc:	31 09       	sbc	r19, r1
    20ce:	fc 01       	movw	r30, r24
    20d0:	31 83       	std	Z+1, r19	; 0x01
    20d2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d4:	ce 01       	movw	r24, r28
    20d6:	8e 5b       	subi	r24, 0xBE	; 190
    20d8:	9f 4f       	sbci	r25, 0xFF	; 255
    20da:	fc 01       	movw	r30, r24
    20dc:	80 81       	ld	r24, Z
    20de:	91 81       	ldd	r25, Z+1	; 0x01
    20e0:	89 2b       	or	r24, r25
    20e2:	a1 f6       	brne	.-88     	; 0x208c <send_command1+0xaf0>
    20e4:	6a c0       	rjmp	.+212    	; 0x21ba <send_command1+0xc1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e6:	8e 01       	movw	r16, r28
    20e8:	0e 5b       	subi	r16, 0xBE	; 190
    20ea:	1f 4f       	sbci	r17, 0xFF	; 255
    20ec:	ce 01       	movw	r24, r28
    20ee:	ce 96       	adiw	r24, 0x3e	; 62
    20f0:	fc 01       	movw	r30, r24
    20f2:	60 81       	ld	r22, Z
    20f4:	71 81       	ldd	r23, Z+1	; 0x01
    20f6:	82 81       	ldd	r24, Z+2	; 0x02
    20f8:	93 81       	ldd	r25, Z+3	; 0x03
    20fa:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	f8 01       	movw	r30, r16
    2104:	91 83       	std	Z+1, r25	; 0x01
    2106:	80 83       	st	Z, r24
    2108:	ce 01       	movw	r24, r28
    210a:	8a 5b       	subi	r24, 0xBA	; 186
    210c:	9f 4f       	sbci	r25, 0xFF	; 255
    210e:	9e 01       	movw	r18, r28
    2110:	2e 5b       	subi	r18, 0xBE	; 190
    2112:	3f 4f       	sbci	r19, 0xFF	; 255
    2114:	f9 01       	movw	r30, r18
    2116:	20 81       	ld	r18, Z
    2118:	31 81       	ldd	r19, Z+1	; 0x01
    211a:	fc 01       	movw	r30, r24
    211c:	31 83       	std	Z+1, r19	; 0x01
    211e:	20 83       	st	Z, r18
    2120:	ce 01       	movw	r24, r28
    2122:	8a 5b       	subi	r24, 0xBA	; 186
    2124:	9f 4f       	sbci	r25, 0xFF	; 255
    2126:	fc 01       	movw	r30, r24
    2128:	80 81       	ld	r24, Z
    212a:	91 81       	ldd	r25, Z+1	; 0x01
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	f1 f7       	brne	.-4      	; 0x212c <send_command1+0xb90>
    2130:	9e 01       	movw	r18, r28
    2132:	2a 5b       	subi	r18, 0xBA	; 186
    2134:	3f 4f       	sbci	r19, 0xFF	; 255
    2136:	f9 01       	movw	r30, r18
    2138:	91 83       	std	Z+1, r25	; 0x01
    213a:	80 83       	st	Z, r24
    213c:	3e c0       	rjmp	.+124    	; 0x21ba <send_command1+0xc1e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	4f e7       	ldi	r20, 0x7F	; 127
    2144:	53 e4       	ldi	r21, 0x43	; 67
    2146:	69 a9       	ldd	r22, Y+49	; 0x31
    2148:	7a a9       	ldd	r23, Y+50	; 0x32
    214a:	8b a9       	ldd	r24, Y+51	; 0x33
    214c:	9c a9       	ldd	r25, Y+52	; 0x34
    214e:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
    2152:	18 16       	cp	r1, r24
    2154:	4c f5       	brge	.+82     	; 0x21a8 <send_command1+0xc0c>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    2156:	8e 01       	movw	r16, r28
    2158:	08 5b       	subi	r16, 0xB8	; 184
    215a:	1f 4f       	sbci	r17, 0xFF	; 255
    215c:	6d a9       	ldd	r22, Y+53	; 0x35
    215e:	7e a9       	ldd	r23, Y+54	; 0x36
    2160:	8f a9       	ldd	r24, Y+55	; 0x37
    2162:	98 ad       	ldd	r25, Y+56	; 0x38
    2164:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	f8 01       	movw	r30, r16
    216e:	91 83       	std	Z+1, r25	; 0x01
    2170:	80 83       	st	Z, r24
    2172:	ce 01       	movw	r24, r28
    2174:	86 5b       	subi	r24, 0xB6	; 182
    2176:	9f 4f       	sbci	r25, 0xFF	; 255
    2178:	9e 01       	movw	r18, r28
    217a:	28 5b       	subi	r18, 0xB8	; 184
    217c:	3f 4f       	sbci	r19, 0xFF	; 255
    217e:	f9 01       	movw	r30, r18
    2180:	20 81       	ld	r18, Z
    2182:	31 81       	ldd	r19, Z+1	; 0x01
    2184:	fc 01       	movw	r30, r24
    2186:	31 83       	std	Z+1, r19	; 0x01
    2188:	20 83       	st	Z, r18
    218a:	ce 01       	movw	r24, r28
    218c:	86 5b       	subi	r24, 0xB6	; 182
    218e:	9f 4f       	sbci	r25, 0xFF	; 255
    2190:	fc 01       	movw	r30, r24
    2192:	80 81       	ld	r24, Z
    2194:	91 81       	ldd	r25, Z+1	; 0x01
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	f1 f7       	brne	.-4      	; 0x2196 <send_command1+0xbfa>
    219a:	9e 01       	movw	r18, r28
    219c:	26 5b       	subi	r18, 0xB6	; 182
    219e:	3f 4f       	sbci	r19, 0xFF	; 255
    21a0:	f9 01       	movw	r30, r18
    21a2:	91 83       	std	Z+1, r25	; 0x01
    21a4:	80 83       	st	Z, r24
    21a6:	1c c0       	rjmp	.+56     	; 0x21e0 <send_command1+0xc44>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21a8:	69 a9       	ldd	r22, Y+49	; 0x31
    21aa:	7a a9       	ldd	r23, Y+50	; 0x32
    21ac:	8b a9       	ldd	r24, Y+51	; 0x33
    21ae:	9c a9       	ldd	r25, Y+52	; 0x34
    21b0:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	89 af       	std	Y+57, r24	; 0x39
    21ba:	ce 01       	movw	r24, r28
    21bc:	84 5b       	subi	r24, 0xB4	; 180
    21be:	9f 4f       	sbci	r25, 0xFF	; 255
    21c0:	29 ad       	ldd	r18, Y+57	; 0x39
    21c2:	fc 01       	movw	r30, r24
    21c4:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21c6:	ce 01       	movw	r24, r28
    21c8:	84 5b       	subi	r24, 0xB4	; 180
    21ca:	9f 4f       	sbci	r25, 0xFF	; 255
    21cc:	fc 01       	movw	r30, r24
    21ce:	80 81       	ld	r24, Z
    21d0:	28 2f       	mov	r18, r24
    21d2:	2a 95       	dec	r18
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <send_command1+0xc36>
    21d6:	ce 01       	movw	r24, r28
    21d8:	84 5b       	subi	r24, 0xB4	; 180
    21da:	9f 4f       	sbci	r25, 0xFF	; 255
    21dc:	fc 01       	movw	r30, r24
    21de:	20 83       	st	Z, r18
		_delay_us(100);
		putchar('\r');
    21e0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__iob+0x2>
    21e4:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__iob+0x3>
    21e8:	bc 01       	movw	r22, r24
    21ea:	8d e0       	ldi	r24, 0x0D	; 13
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	0e 94 91 13 	call	0x2722	; 0x2722 <fputc>
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	a8 ec       	ldi	r26, 0xC8	; 200
    21f8:	b2 e4       	ldi	r27, 0x42	; 66
    21fa:	89 8b       	std	Y+17, r24	; 0x11
    21fc:	9a 8b       	std	Y+18, r25	; 0x12
    21fe:	ab 8b       	std	Y+19, r26	; 0x13
    2200:	bc 8b       	std	Y+20, r27	; 0x14
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    2202:	25 e5       	ldi	r18, 0x55	; 85
    2204:	35 e5       	ldi	r19, 0x55	; 85
    2206:	45 e8       	ldi	r20, 0x85	; 133
    2208:	52 e4       	ldi	r21, 0x42	; 66
    220a:	69 89       	ldd	r22, Y+17	; 0x11
    220c:	7a 89       	ldd	r23, Y+18	; 0x12
    220e:	8b 89       	ldd	r24, Y+19	; 0x13
    2210:	9c 89       	ldd	r25, Y+20	; 0x14
    2212:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	8d 8b       	std	Y+21, r24	; 0x15
    221c:	9e 8b       	std	Y+22, r25	; 0x16
    221e:	af 8b       	std	Y+23, r26	; 0x17
    2220:	b8 8f       	std	Y+24, r27	; 0x18
	__tmp2 = ((F_CPU) / 4e6) * __us;
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	48 e4       	ldi	r20, 0x48	; 72
    2228:	52 e4       	ldi	r21, 0x42	; 66
    222a:	69 89       	ldd	r22, Y+17	; 0x11
    222c:	7a 89       	ldd	r23, Y+18	; 0x12
    222e:	8b 89       	ldd	r24, Y+19	; 0x13
    2230:	9c 89       	ldd	r25, Y+20	; 0x14
    2232:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	89 8f       	std	Y+25, r24	; 0x19
    223c:	9a 8f       	std	Y+26, r25	; 0x1a
    223e:	ab 8f       	std	Y+27, r26	; 0x1b
    2240:	bc 8f       	std	Y+28, r27	; 0x1c
	if (__tmp < 1.0)
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e8       	ldi	r20, 0x80	; 128
    2248:	5f e3       	ldi	r21, 0x3F	; 63
    224a:	6d 89       	ldd	r22, Y+21	; 0x15
    224c:	7e 89       	ldd	r23, Y+22	; 0x16
    224e:	8f 89       	ldd	r24, Y+23	; 0x17
    2250:	98 8d       	ldd	r25, Y+24	; 0x18
    2252:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__cmpsf2>
    2256:	88 23       	and	r24, r24
    2258:	1c f4       	brge	.+6      	; 0x2260 <send_command1+0xcc4>
		__ticks = 1;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	8d 8f       	std	Y+29, r24	; 0x1d
    225e:	b2 c0       	rjmp	.+356    	; 0x23c4 <send_command1+0xe28>
	else if (__tmp2 > 65535)
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	3f ef       	ldi	r19, 0xFF	; 255
    2264:	4f e7       	ldi	r20, 0x7F	; 127
    2266:	57 e4       	ldi	r21, 0x47	; 71
    2268:	69 8d       	ldd	r22, Y+25	; 0x19
    226a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    226c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    226e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2270:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
    2274:	18 16       	cp	r1, r24
    2276:	0c f0       	brlt	.+2      	; 0x227a <send_command1+0xcde>
    2278:	7b c0       	rjmp	.+246    	; 0x2370 <send_command1+0xdd4>
	{
		_delay_ms(__us / 1000.0);
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	4a e7       	ldi	r20, 0x7A	; 122
    2280:	54 e4       	ldi	r21, 0x44	; 68
    2282:	69 89       	ldd	r22, Y+17	; 0x11
    2284:	7a 89       	ldd	r23, Y+18	; 0x12
    2286:	8b 89       	ldd	r24, Y+19	; 0x13
    2288:	9c 89       	ldd	r25, Y+20	; 0x14
    228a:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__divsf3>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	8e 8f       	std	Y+30, r24	; 0x1e
    2294:	9f 8f       	std	Y+31, r25	; 0x1f
    2296:	a8 a3       	std	Y+32, r26	; 0x20
    2298:	b9 a3       	std	Y+33, r27	; 0x21

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e5       	ldi	r19, 0x50	; 80
    229e:	43 e4       	ldi	r20, 0x43	; 67
    22a0:	57 e4       	ldi	r21, 0x47	; 71
    22a2:	6e 8d       	ldd	r22, Y+30	; 0x1e
    22a4:	7f 8d       	ldd	r23, Y+31	; 0x1f
    22a6:	88 a1       	ldd	r24, Y+32	; 0x20
    22a8:	99 a1       	ldd	r25, Y+33	; 0x21
    22aa:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	8a a3       	std	Y+34, r24	; 0x22
    22b4:	9b a3       	std	Y+35, r25	; 0x23
    22b6:	ac a3       	std	Y+36, r26	; 0x24
    22b8:	bd a3       	std	Y+37, r27	; 0x25
	if (__tmp < 1.0)
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	40 e8       	ldi	r20, 0x80	; 128
    22c0:	5f e3       	ldi	r21, 0x3F	; 63
    22c2:	6a a1       	ldd	r22, Y+34	; 0x22
    22c4:	7b a1       	ldd	r23, Y+35	; 0x23
    22c6:	8c a1       	ldd	r24, Y+36	; 0x24
    22c8:	9d a1       	ldd	r25, Y+37	; 0x25
    22ca:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__cmpsf2>
    22ce:	88 23       	and	r24, r24
    22d0:	2c f4       	brge	.+10     	; 0x22dc <send_command1+0xd40>
		__ticks = 1;
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	9f a3       	std	Y+39, r25	; 0x27
    22d8:	8e a3       	std	Y+38, r24	; 0x26
    22da:	3f c0       	rjmp	.+126    	; 0x235a <send_command1+0xdbe>
	else if (__tmp > 65535)
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	3f ef       	ldi	r19, 0xFF	; 255
    22e0:	4f e7       	ldi	r20, 0x7F	; 127
    22e2:	57 e4       	ldi	r21, 0x47	; 71
    22e4:	6a a1       	ldd	r22, Y+34	; 0x22
    22e6:	7b a1       	ldd	r23, Y+35	; 0x23
    22e8:	8c a1       	ldd	r24, Y+36	; 0x24
    22ea:	9d a1       	ldd	r25, Y+37	; 0x25
    22ec:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
    22f0:	18 16       	cp	r1, r24
    22f2:	4c f5       	brge	.+82     	; 0x2346 <send_command1+0xdaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e2       	ldi	r20, 0x20	; 32
    22fa:	51 e4       	ldi	r21, 0x41	; 65
    22fc:	6e 8d       	ldd	r22, Y+30	; 0x1e
    22fe:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2300:	88 a1       	ldd	r24, Y+32	; 0x20
    2302:	99 a1       	ldd	r25, Y+33	; 0x21
    2304:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	bc 01       	movw	r22, r24
    230e:	cd 01       	movw	r24, r26
    2310:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	9f a3       	std	Y+39, r25	; 0x27
    231a:	8e a3       	std	Y+38, r24	; 0x26
    231c:	0f c0       	rjmp	.+30     	; 0x233c <send_command1+0xda0>
    231e:	88 e8       	ldi	r24, 0x88	; 136
    2320:	93 e1       	ldi	r25, 0x13	; 19
    2322:	99 a7       	std	Y+41, r25	; 0x29
    2324:	88 a7       	std	Y+40, r24	; 0x28
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2326:	88 a5       	ldd	r24, Y+40	; 0x28
    2328:	99 a5       	ldd	r25, Y+41	; 0x29
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	f1 f7       	brne	.-4      	; 0x232a <send_command1+0xd8e>
    232e:	99 a7       	std	Y+41, r25	; 0x29
    2330:	88 a7       	std	Y+40, r24	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2332:	8e a1       	ldd	r24, Y+38	; 0x26
    2334:	9f a1       	ldd	r25, Y+39	; 0x27
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	9f a3       	std	Y+39, r25	; 0x27
    233a:	8e a3       	std	Y+38, r24	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233c:	8e a1       	ldd	r24, Y+38	; 0x26
    233e:	9f a1       	ldd	r25, Y+39	; 0x27
    2340:	89 2b       	or	r24, r25
    2342:	69 f7       	brne	.-38     	; 0x231e <send_command1+0xd82>
    2344:	3f c0       	rjmp	.+126    	; 0x23c4 <send_command1+0xe28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2346:	6a a1       	ldd	r22, Y+34	; 0x22
    2348:	7b a1       	ldd	r23, Y+35	; 0x23
    234a:	8c a1       	ldd	r24, Y+36	; 0x24
    234c:	9d a1       	ldd	r25, Y+37	; 0x25
    234e:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	9f a3       	std	Y+39, r25	; 0x27
    2358:	8e a3       	std	Y+38, r24	; 0x26
    235a:	8e a1       	ldd	r24, Y+38	; 0x26
    235c:	9f a1       	ldd	r25, Y+39	; 0x27
    235e:	9b a7       	std	Y+43, r25	; 0x2b
    2360:	8a a7       	std	Y+42, r24	; 0x2a
    2362:	8a a5       	ldd	r24, Y+42	; 0x2a
    2364:	9b a5       	ldd	r25, Y+43	; 0x2b
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	f1 f7       	brne	.-4      	; 0x2366 <send_command1+0xdca>
    236a:	9b a7       	std	Y+43, r25	; 0x2b
    236c:	8a a7       	std	Y+42, r24	; 0x2a
    236e:	2a c0       	rjmp	.+84     	; 0x23c4 <send_command1+0xe28>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	4f e7       	ldi	r20, 0x7F	; 127
    2376:	53 e4       	ldi	r21, 0x43	; 67
    2378:	6d 89       	ldd	r22, Y+21	; 0x15
    237a:	7e 89       	ldd	r23, Y+22	; 0x16
    237c:	8f 89       	ldd	r24, Y+23	; 0x17
    237e:	98 8d       	ldd	r25, Y+24	; 0x18
    2380:	0e 94 10 13 	call	0x2620	; 0x2620 <__gesf2>
    2384:	18 16       	cp	r1, r24
    2386:	ac f4       	brge	.+42     	; 0x23b2 <send_command1+0xe16>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    2388:	69 8d       	ldd	r22, Y+25	; 0x19
    238a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    238c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    238e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2390:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	9d a7       	std	Y+45, r25	; 0x2d
    239a:	8c a7       	std	Y+44, r24	; 0x2c
    239c:	8c a5       	ldd	r24, Y+44	; 0x2c
    239e:	9d a5       	ldd	r25, Y+45	; 0x2d
    23a0:	9f a7       	std	Y+47, r25	; 0x2f
    23a2:	8e a7       	std	Y+46, r24	; 0x2e
    23a4:	8e a5       	ldd	r24, Y+46	; 0x2e
    23a6:	9f a5       	ldd	r25, Y+47	; 0x2f
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <send_command1+0xe0c>
    23ac:	9f a7       	std	Y+47, r25	; 0x2f
    23ae:	8e a7       	std	Y+46, r24	; 0x2e
		_delay_us(100);
		//EIMSK &= ~(1 << INT0);

}
    23b0:	0f c0       	rjmp	.+30     	; 0x23d0 <send_command1+0xe34>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23b2:	6d 89       	ldd	r22, Y+21	; 0x15
    23b4:	7e 89       	ldd	r23, Y+22	; 0x16
    23b6:	8f 89       	ldd	r24, Y+23	; 0x17
    23b8:	98 8d       	ldd	r25, Y+24	; 0x18
    23ba:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fixunssfsi>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	8d 8f       	std	Y+29, r24	; 0x1d
    23c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23c6:	88 ab       	std	Y+48, r24	; 0x30
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23c8:	88 a9       	ldd	r24, Y+48	; 0x30
    23ca:	8a 95       	dec	r24
    23cc:	f1 f7       	brne	.-4      	; 0x23ca <send_command1+0xe2e>
    23ce:	88 ab       	std	Y+48, r24	; 0x30
    23d0:	00 00       	nop
    23d2:	c0 56       	subi	r28, 0x60	; 96
    23d4:	df 4f       	sbci	r29, 0xFF	; 255
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	f8 94       	cli
    23da:	de bf       	out	0x3e, r29	; 62
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	cd bf       	out	0x3d, r28	; 61
    23e0:	df 91       	pop	r29
    23e2:	cf 91       	pop	r28
    23e4:	1f 91       	pop	r17
    23e6:	0f 91       	pop	r16
    23e8:	08 95       	ret

000023ea <__cmpsf2>:
    23ea:	0e 94 9b 12 	call	0x2536	; 0x2536 <__fp_cmp>
    23ee:	08 f4       	brcc	.+2      	; 0x23f2 <__cmpsf2+0x8>
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	08 95       	ret

000023f4 <__divsf3>:
    23f4:	0e 94 0e 12 	call	0x241c	; 0x241c <__divsf3x>
    23f8:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__fp_round>
    23fc:	0e 94 cf 12 	call	0x259e	; 0x259e <__fp_pscB>
    2400:	58 f0       	brcs	.+22     	; 0x2418 <__divsf3+0x24>
    2402:	0e 94 c8 12 	call	0x2590	; 0x2590 <__fp_pscA>
    2406:	40 f0       	brcs	.+16     	; 0x2418 <__divsf3+0x24>
    2408:	29 f4       	brne	.+10     	; 0x2414 <__divsf3+0x20>
    240a:	5f 3f       	cpi	r21, 0xFF	; 255
    240c:	29 f0       	breq	.+10     	; 0x2418 <__divsf3+0x24>
    240e:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__fp_inf>
    2412:	51 11       	cpse	r21, r1
    2414:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__fp_szero>
    2418:	0c 94 c5 12 	jmp	0x258a	; 0x258a <__fp_nan>

0000241c <__divsf3x>:
    241c:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fp_split3>
    2420:	68 f3       	brcs	.-38     	; 0x23fc <__divsf3+0x8>

00002422 <__divsf3_pse>:
    2422:	99 23       	and	r25, r25
    2424:	b1 f3       	breq	.-20     	; 0x2412 <__divsf3+0x1e>
    2426:	55 23       	and	r21, r21
    2428:	91 f3       	breq	.-28     	; 0x240e <__divsf3+0x1a>
    242a:	95 1b       	sub	r25, r21
    242c:	55 0b       	sbc	r21, r21
    242e:	bb 27       	eor	r27, r27
    2430:	aa 27       	eor	r26, r26
    2432:	62 17       	cp	r22, r18
    2434:	73 07       	cpc	r23, r19
    2436:	84 07       	cpc	r24, r20
    2438:	38 f0       	brcs	.+14     	; 0x2448 <__divsf3_pse+0x26>
    243a:	9f 5f       	subi	r25, 0xFF	; 255
    243c:	5f 4f       	sbci	r21, 0xFF	; 255
    243e:	22 0f       	add	r18, r18
    2440:	33 1f       	adc	r19, r19
    2442:	44 1f       	adc	r20, r20
    2444:	aa 1f       	adc	r26, r26
    2446:	a9 f3       	breq	.-22     	; 0x2432 <__divsf3_pse+0x10>
    2448:	35 d0       	rcall	.+106    	; 0x24b4 <__divsf3_pse+0x92>
    244a:	0e 2e       	mov	r0, r30
    244c:	3a f0       	brmi	.+14     	; 0x245c <__divsf3_pse+0x3a>
    244e:	e0 e8       	ldi	r30, 0x80	; 128
    2450:	32 d0       	rcall	.+100    	; 0x24b6 <__divsf3_pse+0x94>
    2452:	91 50       	subi	r25, 0x01	; 1
    2454:	50 40       	sbci	r21, 0x00	; 0
    2456:	e6 95       	lsr	r30
    2458:	00 1c       	adc	r0, r0
    245a:	ca f7       	brpl	.-14     	; 0x244e <__divsf3_pse+0x2c>
    245c:	2b d0       	rcall	.+86     	; 0x24b4 <__divsf3_pse+0x92>
    245e:	fe 2f       	mov	r31, r30
    2460:	29 d0       	rcall	.+82     	; 0x24b4 <__divsf3_pse+0x92>
    2462:	66 0f       	add	r22, r22
    2464:	77 1f       	adc	r23, r23
    2466:	88 1f       	adc	r24, r24
    2468:	bb 1f       	adc	r27, r27
    246a:	26 17       	cp	r18, r22
    246c:	37 07       	cpc	r19, r23
    246e:	48 07       	cpc	r20, r24
    2470:	ab 07       	cpc	r26, r27
    2472:	b0 e8       	ldi	r27, 0x80	; 128
    2474:	09 f0       	breq	.+2      	; 0x2478 <__divsf3_pse+0x56>
    2476:	bb 0b       	sbc	r27, r27
    2478:	80 2d       	mov	r24, r0
    247a:	bf 01       	movw	r22, r30
    247c:	ff 27       	eor	r31, r31
    247e:	93 58       	subi	r25, 0x83	; 131
    2480:	5f 4f       	sbci	r21, 0xFF	; 255
    2482:	3a f0       	brmi	.+14     	; 0x2492 <__divsf3_pse+0x70>
    2484:	9e 3f       	cpi	r25, 0xFE	; 254
    2486:	51 05       	cpc	r21, r1
    2488:	78 f0       	brcs	.+30     	; 0x24a8 <__divsf3_pse+0x86>
    248a:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__fp_inf>
    248e:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__fp_szero>
    2492:	5f 3f       	cpi	r21, 0xFF	; 255
    2494:	e4 f3       	brlt	.-8      	; 0x248e <__divsf3_pse+0x6c>
    2496:	98 3e       	cpi	r25, 0xE8	; 232
    2498:	d4 f3       	brlt	.-12     	; 0x248e <__divsf3_pse+0x6c>
    249a:	86 95       	lsr	r24
    249c:	77 95       	ror	r23
    249e:	67 95       	ror	r22
    24a0:	b7 95       	ror	r27
    24a2:	f7 95       	ror	r31
    24a4:	9f 5f       	subi	r25, 0xFF	; 255
    24a6:	c9 f7       	brne	.-14     	; 0x249a <__divsf3_pse+0x78>
    24a8:	88 0f       	add	r24, r24
    24aa:	91 1d       	adc	r25, r1
    24ac:	96 95       	lsr	r25
    24ae:	87 95       	ror	r24
    24b0:	97 f9       	bld	r25, 7
    24b2:	08 95       	ret
    24b4:	e1 e0       	ldi	r30, 0x01	; 1
    24b6:	66 0f       	add	r22, r22
    24b8:	77 1f       	adc	r23, r23
    24ba:	88 1f       	adc	r24, r24
    24bc:	bb 1f       	adc	r27, r27
    24be:	62 17       	cp	r22, r18
    24c0:	73 07       	cpc	r23, r19
    24c2:	84 07       	cpc	r24, r20
    24c4:	ba 07       	cpc	r27, r26
    24c6:	20 f0       	brcs	.+8      	; 0x24d0 <__divsf3_pse+0xae>
    24c8:	62 1b       	sub	r22, r18
    24ca:	73 0b       	sbc	r23, r19
    24cc:	84 0b       	sbc	r24, r20
    24ce:	ba 0b       	sbc	r27, r26
    24d0:	ee 1f       	adc	r30, r30
    24d2:	88 f7       	brcc	.-30     	; 0x24b6 <__divsf3_pse+0x94>
    24d4:	e0 95       	com	r30
    24d6:	08 95       	ret

000024d8 <__fixunssfsi>:
    24d8:	0e 94 ef 12 	call	0x25de	; 0x25de <__fp_splitA>
    24dc:	88 f0       	brcs	.+34     	; 0x2500 <__fixunssfsi+0x28>
    24de:	9f 57       	subi	r25, 0x7F	; 127
    24e0:	98 f0       	brcs	.+38     	; 0x2508 <__fixunssfsi+0x30>
    24e2:	b9 2f       	mov	r27, r25
    24e4:	99 27       	eor	r25, r25
    24e6:	b7 51       	subi	r27, 0x17	; 23
    24e8:	b0 f0       	brcs	.+44     	; 0x2516 <__fixunssfsi+0x3e>
    24ea:	e1 f0       	breq	.+56     	; 0x2524 <__fixunssfsi+0x4c>
    24ec:	66 0f       	add	r22, r22
    24ee:	77 1f       	adc	r23, r23
    24f0:	88 1f       	adc	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	1a f0       	brmi	.+6      	; 0x24fc <__fixunssfsi+0x24>
    24f6:	ba 95       	dec	r27
    24f8:	c9 f7       	brne	.-14     	; 0x24ec <__fixunssfsi+0x14>
    24fa:	14 c0       	rjmp	.+40     	; 0x2524 <__fixunssfsi+0x4c>
    24fc:	b1 30       	cpi	r27, 0x01	; 1
    24fe:	91 f0       	breq	.+36     	; 0x2524 <__fixunssfsi+0x4c>
    2500:	0e 94 09 13 	call	0x2612	; 0x2612 <__fp_zero>
    2504:	b1 e0       	ldi	r27, 0x01	; 1
    2506:	08 95       	ret
    2508:	0c 94 09 13 	jmp	0x2612	; 0x2612 <__fp_zero>
    250c:	67 2f       	mov	r22, r23
    250e:	78 2f       	mov	r23, r24
    2510:	88 27       	eor	r24, r24
    2512:	b8 5f       	subi	r27, 0xF8	; 248
    2514:	39 f0       	breq	.+14     	; 0x2524 <__fixunssfsi+0x4c>
    2516:	b9 3f       	cpi	r27, 0xF9	; 249
    2518:	cc f3       	brlt	.-14     	; 0x250c <__fixunssfsi+0x34>
    251a:	86 95       	lsr	r24
    251c:	77 95       	ror	r23
    251e:	67 95       	ror	r22
    2520:	b3 95       	inc	r27
    2522:	d9 f7       	brne	.-10     	; 0x251a <__fixunssfsi+0x42>
    2524:	3e f4       	brtc	.+14     	; 0x2534 <__fixunssfsi+0x5c>
    2526:	90 95       	com	r25
    2528:	80 95       	com	r24
    252a:	70 95       	com	r23
    252c:	61 95       	neg	r22
    252e:	7f 4f       	sbci	r23, 0xFF	; 255
    2530:	8f 4f       	sbci	r24, 0xFF	; 255
    2532:	9f 4f       	sbci	r25, 0xFF	; 255
    2534:	08 95       	ret

00002536 <__fp_cmp>:
    2536:	99 0f       	add	r25, r25
    2538:	00 08       	sbc	r0, r0
    253a:	55 0f       	add	r21, r21
    253c:	aa 0b       	sbc	r26, r26
    253e:	e0 e8       	ldi	r30, 0x80	; 128
    2540:	fe ef       	ldi	r31, 0xFE	; 254
    2542:	16 16       	cp	r1, r22
    2544:	17 06       	cpc	r1, r23
    2546:	e8 07       	cpc	r30, r24
    2548:	f9 07       	cpc	r31, r25
    254a:	c0 f0       	brcs	.+48     	; 0x257c <__fp_cmp+0x46>
    254c:	12 16       	cp	r1, r18
    254e:	13 06       	cpc	r1, r19
    2550:	e4 07       	cpc	r30, r20
    2552:	f5 07       	cpc	r31, r21
    2554:	98 f0       	brcs	.+38     	; 0x257c <__fp_cmp+0x46>
    2556:	62 1b       	sub	r22, r18
    2558:	73 0b       	sbc	r23, r19
    255a:	84 0b       	sbc	r24, r20
    255c:	95 0b       	sbc	r25, r21
    255e:	39 f4       	brne	.+14     	; 0x256e <__fp_cmp+0x38>
    2560:	0a 26       	eor	r0, r26
    2562:	61 f0       	breq	.+24     	; 0x257c <__fp_cmp+0x46>
    2564:	23 2b       	or	r18, r19
    2566:	24 2b       	or	r18, r20
    2568:	25 2b       	or	r18, r21
    256a:	21 f4       	brne	.+8      	; 0x2574 <__fp_cmp+0x3e>
    256c:	08 95       	ret
    256e:	0a 26       	eor	r0, r26
    2570:	09 f4       	brne	.+2      	; 0x2574 <__fp_cmp+0x3e>
    2572:	a1 40       	sbci	r26, 0x01	; 1
    2574:	a6 95       	lsr	r26
    2576:	8f ef       	ldi	r24, 0xFF	; 255
    2578:	81 1d       	adc	r24, r1
    257a:	81 1d       	adc	r24, r1
    257c:	08 95       	ret

0000257e <__fp_inf>:
    257e:	97 f9       	bld	r25, 7
    2580:	9f 67       	ori	r25, 0x7F	; 127
    2582:	80 e8       	ldi	r24, 0x80	; 128
    2584:	70 e0       	ldi	r23, 0x00	; 0
    2586:	60 e0       	ldi	r22, 0x00	; 0
    2588:	08 95       	ret

0000258a <__fp_nan>:
    258a:	9f ef       	ldi	r25, 0xFF	; 255
    258c:	80 ec       	ldi	r24, 0xC0	; 192
    258e:	08 95       	ret

00002590 <__fp_pscA>:
    2590:	00 24       	eor	r0, r0
    2592:	0a 94       	dec	r0
    2594:	16 16       	cp	r1, r22
    2596:	17 06       	cpc	r1, r23
    2598:	18 06       	cpc	r1, r24
    259a:	09 06       	cpc	r0, r25
    259c:	08 95       	ret

0000259e <__fp_pscB>:
    259e:	00 24       	eor	r0, r0
    25a0:	0a 94       	dec	r0
    25a2:	12 16       	cp	r1, r18
    25a4:	13 06       	cpc	r1, r19
    25a6:	14 06       	cpc	r1, r20
    25a8:	05 06       	cpc	r0, r21
    25aa:	08 95       	ret

000025ac <__fp_round>:
    25ac:	09 2e       	mov	r0, r25
    25ae:	03 94       	inc	r0
    25b0:	00 0c       	add	r0, r0
    25b2:	11 f4       	brne	.+4      	; 0x25b8 <__fp_round+0xc>
    25b4:	88 23       	and	r24, r24
    25b6:	52 f0       	brmi	.+20     	; 0x25cc <__fp_round+0x20>
    25b8:	bb 0f       	add	r27, r27
    25ba:	40 f4       	brcc	.+16     	; 0x25cc <__fp_round+0x20>
    25bc:	bf 2b       	or	r27, r31
    25be:	11 f4       	brne	.+4      	; 0x25c4 <__fp_round+0x18>
    25c0:	60 ff       	sbrs	r22, 0
    25c2:	04 c0       	rjmp	.+8      	; 0x25cc <__fp_round+0x20>
    25c4:	6f 5f       	subi	r22, 0xFF	; 255
    25c6:	7f 4f       	sbci	r23, 0xFF	; 255
    25c8:	8f 4f       	sbci	r24, 0xFF	; 255
    25ca:	9f 4f       	sbci	r25, 0xFF	; 255
    25cc:	08 95       	ret

000025ce <__fp_split3>:
    25ce:	57 fd       	sbrc	r21, 7
    25d0:	90 58       	subi	r25, 0x80	; 128
    25d2:	44 0f       	add	r20, r20
    25d4:	55 1f       	adc	r21, r21
    25d6:	59 f0       	breq	.+22     	; 0x25ee <__fp_splitA+0x10>
    25d8:	5f 3f       	cpi	r21, 0xFF	; 255
    25da:	71 f0       	breq	.+28     	; 0x25f8 <__fp_splitA+0x1a>
    25dc:	47 95       	ror	r20

000025de <__fp_splitA>:
    25de:	88 0f       	add	r24, r24
    25e0:	97 fb       	bst	r25, 7
    25e2:	99 1f       	adc	r25, r25
    25e4:	61 f0       	breq	.+24     	; 0x25fe <__fp_splitA+0x20>
    25e6:	9f 3f       	cpi	r25, 0xFF	; 255
    25e8:	79 f0       	breq	.+30     	; 0x2608 <__fp_splitA+0x2a>
    25ea:	87 95       	ror	r24
    25ec:	08 95       	ret
    25ee:	12 16       	cp	r1, r18
    25f0:	13 06       	cpc	r1, r19
    25f2:	14 06       	cpc	r1, r20
    25f4:	55 1f       	adc	r21, r21
    25f6:	f2 cf       	rjmp	.-28     	; 0x25dc <__fp_split3+0xe>
    25f8:	46 95       	lsr	r20
    25fa:	f1 df       	rcall	.-30     	; 0x25de <__fp_splitA>
    25fc:	08 c0       	rjmp	.+16     	; 0x260e <__fp_splitA+0x30>
    25fe:	16 16       	cp	r1, r22
    2600:	17 06       	cpc	r1, r23
    2602:	18 06       	cpc	r1, r24
    2604:	99 1f       	adc	r25, r25
    2606:	f1 cf       	rjmp	.-30     	; 0x25ea <__fp_splitA+0xc>
    2608:	86 95       	lsr	r24
    260a:	71 05       	cpc	r23, r1
    260c:	61 05       	cpc	r22, r1
    260e:	08 94       	sec
    2610:	08 95       	ret

00002612 <__fp_zero>:
    2612:	e8 94       	clt

00002614 <__fp_szero>:
    2614:	bb 27       	eor	r27, r27
    2616:	66 27       	eor	r22, r22
    2618:	77 27       	eor	r23, r23
    261a:	cb 01       	movw	r24, r22
    261c:	97 f9       	bld	r25, 7
    261e:	08 95       	ret

00002620 <__gesf2>:
    2620:	0e 94 9b 12 	call	0x2536	; 0x2536 <__fp_cmp>
    2624:	08 f4       	brcc	.+2      	; 0x2628 <__gesf2+0x8>
    2626:	8f ef       	ldi	r24, 0xFF	; 255
    2628:	08 95       	ret

0000262a <__mulsf3>:
    262a:	0e 94 28 13 	call	0x2650	; 0x2650 <__mulsf3x>
    262e:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__fp_round>
    2632:	0e 94 c8 12 	call	0x2590	; 0x2590 <__fp_pscA>
    2636:	38 f0       	brcs	.+14     	; 0x2646 <__mulsf3+0x1c>
    2638:	0e 94 cf 12 	call	0x259e	; 0x259e <__fp_pscB>
    263c:	20 f0       	brcs	.+8      	; 0x2646 <__mulsf3+0x1c>
    263e:	95 23       	and	r25, r21
    2640:	11 f0       	breq	.+4      	; 0x2646 <__mulsf3+0x1c>
    2642:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__fp_inf>
    2646:	0c 94 c5 12 	jmp	0x258a	; 0x258a <__fp_nan>
    264a:	11 24       	eor	r1, r1
    264c:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__fp_szero>

00002650 <__mulsf3x>:
    2650:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__fp_split3>
    2654:	70 f3       	brcs	.-36     	; 0x2632 <__mulsf3+0x8>

00002656 <__mulsf3_pse>:
    2656:	95 9f       	mul	r25, r21
    2658:	c1 f3       	breq	.-16     	; 0x264a <__mulsf3+0x20>
    265a:	95 0f       	add	r25, r21
    265c:	50 e0       	ldi	r21, 0x00	; 0
    265e:	55 1f       	adc	r21, r21
    2660:	62 9f       	mul	r22, r18
    2662:	f0 01       	movw	r30, r0
    2664:	72 9f       	mul	r23, r18
    2666:	bb 27       	eor	r27, r27
    2668:	f0 0d       	add	r31, r0
    266a:	b1 1d       	adc	r27, r1
    266c:	63 9f       	mul	r22, r19
    266e:	aa 27       	eor	r26, r26
    2670:	f0 0d       	add	r31, r0
    2672:	b1 1d       	adc	r27, r1
    2674:	aa 1f       	adc	r26, r26
    2676:	64 9f       	mul	r22, r20
    2678:	66 27       	eor	r22, r22
    267a:	b0 0d       	add	r27, r0
    267c:	a1 1d       	adc	r26, r1
    267e:	66 1f       	adc	r22, r22
    2680:	82 9f       	mul	r24, r18
    2682:	22 27       	eor	r18, r18
    2684:	b0 0d       	add	r27, r0
    2686:	a1 1d       	adc	r26, r1
    2688:	62 1f       	adc	r22, r18
    268a:	73 9f       	mul	r23, r19
    268c:	b0 0d       	add	r27, r0
    268e:	a1 1d       	adc	r26, r1
    2690:	62 1f       	adc	r22, r18
    2692:	83 9f       	mul	r24, r19
    2694:	a0 0d       	add	r26, r0
    2696:	61 1d       	adc	r22, r1
    2698:	22 1f       	adc	r18, r18
    269a:	74 9f       	mul	r23, r20
    269c:	33 27       	eor	r19, r19
    269e:	a0 0d       	add	r26, r0
    26a0:	61 1d       	adc	r22, r1
    26a2:	23 1f       	adc	r18, r19
    26a4:	84 9f       	mul	r24, r20
    26a6:	60 0d       	add	r22, r0
    26a8:	21 1d       	adc	r18, r1
    26aa:	82 2f       	mov	r24, r18
    26ac:	76 2f       	mov	r23, r22
    26ae:	6a 2f       	mov	r22, r26
    26b0:	11 24       	eor	r1, r1
    26b2:	9f 57       	subi	r25, 0x7F	; 127
    26b4:	50 40       	sbci	r21, 0x00	; 0
    26b6:	9a f0       	brmi	.+38     	; 0x26de <__mulsf3_pse+0x88>
    26b8:	f1 f0       	breq	.+60     	; 0x26f6 <__mulsf3_pse+0xa0>
    26ba:	88 23       	and	r24, r24
    26bc:	4a f0       	brmi	.+18     	; 0x26d0 <__mulsf3_pse+0x7a>
    26be:	ee 0f       	add	r30, r30
    26c0:	ff 1f       	adc	r31, r31
    26c2:	bb 1f       	adc	r27, r27
    26c4:	66 1f       	adc	r22, r22
    26c6:	77 1f       	adc	r23, r23
    26c8:	88 1f       	adc	r24, r24
    26ca:	91 50       	subi	r25, 0x01	; 1
    26cc:	50 40       	sbci	r21, 0x00	; 0
    26ce:	a9 f7       	brne	.-22     	; 0x26ba <__mulsf3_pse+0x64>
    26d0:	9e 3f       	cpi	r25, 0xFE	; 254
    26d2:	51 05       	cpc	r21, r1
    26d4:	80 f0       	brcs	.+32     	; 0x26f6 <__mulsf3_pse+0xa0>
    26d6:	0c 94 bf 12 	jmp	0x257e	; 0x257e <__fp_inf>
    26da:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__fp_szero>
    26de:	5f 3f       	cpi	r21, 0xFF	; 255
    26e0:	e4 f3       	brlt	.-8      	; 0x26da <__mulsf3_pse+0x84>
    26e2:	98 3e       	cpi	r25, 0xE8	; 232
    26e4:	d4 f3       	brlt	.-12     	; 0x26da <__mulsf3_pse+0x84>
    26e6:	86 95       	lsr	r24
    26e8:	77 95       	ror	r23
    26ea:	67 95       	ror	r22
    26ec:	b7 95       	ror	r27
    26ee:	f7 95       	ror	r31
    26f0:	e7 95       	ror	r30
    26f2:	9f 5f       	subi	r25, 0xFF	; 255
    26f4:	c1 f7       	brne	.-16     	; 0x26e6 <__mulsf3_pse+0x90>
    26f6:	fe 2b       	or	r31, r30
    26f8:	88 0f       	add	r24, r24
    26fa:	91 1d       	adc	r25, r1
    26fc:	96 95       	lsr	r25
    26fe:	87 95       	ror	r24
    2700:	97 f9       	bld	r25, 7
    2702:	08 95       	ret

00002704 <__umulhisi3>:
    2704:	a2 9f       	mul	r26, r18
    2706:	b0 01       	movw	r22, r0
    2708:	b3 9f       	mul	r27, r19
    270a:	c0 01       	movw	r24, r0
    270c:	a3 9f       	mul	r26, r19
    270e:	70 0d       	add	r23, r0
    2710:	81 1d       	adc	r24, r1
    2712:	11 24       	eor	r1, r1
    2714:	91 1d       	adc	r25, r1
    2716:	b2 9f       	mul	r27, r18
    2718:	70 0d       	add	r23, r0
    271a:	81 1d       	adc	r24, r1
    271c:	11 24       	eor	r1, r1
    271e:	91 1d       	adc	r25, r1
    2720:	08 95       	ret

00002722 <fputc>:
    2722:	0f 93       	push	r16
    2724:	1f 93       	push	r17
    2726:	cf 93       	push	r28
    2728:	df 93       	push	r29
    272a:	fb 01       	movw	r30, r22
    272c:	23 81       	ldd	r18, Z+3	; 0x03
    272e:	21 fd       	sbrc	r18, 1
    2730:	03 c0       	rjmp	.+6      	; 0x2738 <fputc+0x16>
    2732:	8f ef       	ldi	r24, 0xFF	; 255
    2734:	9f ef       	ldi	r25, 0xFF	; 255
    2736:	2c c0       	rjmp	.+88     	; 0x2790 <fputc+0x6e>
    2738:	22 ff       	sbrs	r18, 2
    273a:	16 c0       	rjmp	.+44     	; 0x2768 <fputc+0x46>
    273c:	46 81       	ldd	r20, Z+6	; 0x06
    273e:	57 81       	ldd	r21, Z+7	; 0x07
    2740:	24 81       	ldd	r18, Z+4	; 0x04
    2742:	35 81       	ldd	r19, Z+5	; 0x05
    2744:	42 17       	cp	r20, r18
    2746:	53 07       	cpc	r21, r19
    2748:	44 f4       	brge	.+16     	; 0x275a <fputc+0x38>
    274a:	a0 81       	ld	r26, Z
    274c:	b1 81       	ldd	r27, Z+1	; 0x01
    274e:	9d 01       	movw	r18, r26
    2750:	2f 5f       	subi	r18, 0xFF	; 255
    2752:	3f 4f       	sbci	r19, 0xFF	; 255
    2754:	31 83       	std	Z+1, r19	; 0x01
    2756:	20 83       	st	Z, r18
    2758:	8c 93       	st	X, r24
    275a:	26 81       	ldd	r18, Z+6	; 0x06
    275c:	37 81       	ldd	r19, Z+7	; 0x07
    275e:	2f 5f       	subi	r18, 0xFF	; 255
    2760:	3f 4f       	sbci	r19, 0xFF	; 255
    2762:	37 83       	std	Z+7, r19	; 0x07
    2764:	26 83       	std	Z+6, r18	; 0x06
    2766:	14 c0       	rjmp	.+40     	; 0x2790 <fputc+0x6e>
    2768:	8b 01       	movw	r16, r22
    276a:	ec 01       	movw	r28, r24
    276c:	fb 01       	movw	r30, r22
    276e:	00 84       	ldd	r0, Z+8	; 0x08
    2770:	f1 85       	ldd	r31, Z+9	; 0x09
    2772:	e0 2d       	mov	r30, r0
    2774:	09 95       	icall
    2776:	89 2b       	or	r24, r25
    2778:	e1 f6       	brne	.-72     	; 0x2732 <fputc+0x10>
    277a:	d8 01       	movw	r26, r16
    277c:	16 96       	adiw	r26, 0x06	; 6
    277e:	8d 91       	ld	r24, X+
    2780:	9c 91       	ld	r25, X
    2782:	17 97       	sbiw	r26, 0x07	; 7
    2784:	01 96       	adiw	r24, 0x01	; 1
    2786:	17 96       	adiw	r26, 0x07	; 7
    2788:	9c 93       	st	X, r25
    278a:	8e 93       	st	-X, r24
    278c:	16 97       	sbiw	r26, 0x06	; 6
    278e:	ce 01       	movw	r24, r28
    2790:	df 91       	pop	r29
    2792:	cf 91       	pop	r28
    2794:	1f 91       	pop	r17
    2796:	0f 91       	pop	r16
    2798:	08 95       	ret

0000279a <_exit>:
    279a:	f8 94       	cli

0000279c <__stop_program>:
    279c:	ff cf       	rjmp	.-2      	; 0x279c <__stop_program>
