
ESE519 LAB2-3.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000001de  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000937  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a9  00000000  00000000  00000c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034f  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001738  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000402  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  00001bba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001cda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  8e:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <putstring>:
uint16_t adc_read()
{
    //ADCSRA |= (1<<ADSC);// wait for conversion to complete. 
	//while(ADCSRA & (1<<ADSC));
	return(ADC);
	}
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	fc 01       	movw	r30, r24
  9c:	20 81       	ld	r18, Z
  9e:	22 23       	and	r18, r18
  a0:	69 f0       	breq	.+26     	; 0xbc <putstring+0x26>
  a2:	dc 01       	movw	r26, r24
  a4:	11 96       	adiw	r26, 0x01	; 1
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	c6 ec       	ldi	r28, 0xC6	; 198
  ac:	d0 e0       	ldi	r29, 0x00	; 0
  ae:	90 81       	ld	r25, Z
  b0:	95 ff       	sbrs	r25, 5
  b2:	fd cf       	rjmp	.-6      	; 0xae <putstring+0x18>
  b4:	28 83       	st	Y, r18
  b6:	2d 91       	ld	r18, X+
  b8:	21 11       	cpse	r18, r1
  ba:	f9 cf       	rjmp	.-14     	; 0xae <putstring+0x18>
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	08 95       	ret

000000c2 <putnum>:
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
  ca:	60 97       	sbiw	r28, 0x10	; 16
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	f8 94       	cli
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	cd bf       	out	0x3d, r28	; 61
  d6:	4a e0       	ldi	r20, 0x0A	; 10
  d8:	be 01       	movw	r22, r28
  da:	6f 5f       	subi	r22, 0xFF	; 255
  dc:	7f 4f       	sbci	r23, 0xFF	; 255
  de:	0e 94 b8 00 	call	0x170	; 0x170 <__itoa_ncheck>
  e2:	ce 01       	movw	r24, r28
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	0e 94 4b 00 	call	0x96	; 0x96 <putstring>
  ea:	60 96       	adiw	r28, 0x10	; 16
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	f8 94       	cli
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	cd bf       	out	0x3d, r28	; 61
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <adc_init>:
  fc:	ec e7       	ldi	r30, 0x7C	; 124
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 64       	ori	r24, 0x40	; 64
 104:	80 83       	st	Z, r24
 106:	ea e7       	ldi	r30, 0x7A	; 122
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	87 e8       	ldi	r24, 0x87	; 135
 10c:	80 83       	st	Z, r24
 10e:	80 81       	ld	r24, Z
 110:	80 62       	ori	r24, 0x20	; 32
 112:	80 83       	st	Z, r24
 114:	80 81       	ld	r24, Z
 116:	80 64       	ori	r24, 0x40	; 64
 118:	80 83       	st	Z, r24
 11a:	08 95       	ret

0000011c <main>:

int main(void)
{
 	UCSR0A = (1<<U2X0); // double speed mode
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 	UBRR0H = (unsigned char) ((F_CPU/8/BAUDRATE-1) >> 8);
 122:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 	UBRR0L = (unsigned char) (F_CPU/8/BAUDRATE-1);
 126:	8f ec       	ldi	r24, 0xCF	; 207
 128:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 	UCSR0B = (1<<RXEN0) | (1<<TXEN0); // enable rx and tx
 12c:	88 e1       	ldi	r24, 0x18	; 24
 12e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	uint16_t adc_result;
	adc_init();// initialize adc
 132:	0e 94 7e 00 	call	0xfc	; 0xfc <adc_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	80 e7       	ldi	r24, 0x70	; 112
 13a:	92 e0       	ldi	r25, 0x02	; 2
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x20>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x2a>
 146:	00 00       	nop
}
uint16_t adc_read()
{
    //ADCSRA |= (1<<ADSC);// wait for conversion to complete. 
	//while(ADCSRA & (1<<ADSC));
	return(ADC);
 148:	c8 e7       	ldi	r28, 0x78	; 120
 14a:	d0 e0       	ldi	r29, 0x00	; 0
 14c:	88 81       	ld	r24, Y
 14e:	99 81       	ldd	r25, Y+1	; 0x01
	_delay_ms(50);
	while(1)
	{
		//putstring(" flag3\r\n");
		adc_result = adc_read();
		putnum(adc_result);
 150:	0e 94 61 00 	call	0xc2	; 0xc2 <putnum>
		putstring(" \r\n");
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	0e 94 4b 00 	call	0x96	; 0x96 <putstring>
 15c:	2f ef       	ldi	r18, 0xFF	; 255
 15e:	80 e7       	ldi	r24, 0x70	; 112
 160:	92 e0       	ldi	r25, 0x02	; 2
 162:	21 50       	subi	r18, 0x01	; 1
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0x46>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x50>
 16c:	00 00       	nop
 16e:	ee cf       	rjmp	.-36     	; 0x14c <main+0x30>

00000170 <__itoa_ncheck>:
 170:	bb 27       	eor	r27, r27
 172:	4a 30       	cpi	r20, 0x0A	; 10
 174:	31 f4       	brne	.+12     	; 0x182 <__itoa_ncheck+0x12>
 176:	99 23       	and	r25, r25
 178:	22 f4       	brpl	.+8      	; 0x182 <__itoa_ncheck+0x12>
 17a:	bd e2       	ldi	r27, 0x2D	; 45
 17c:	90 95       	com	r25
 17e:	81 95       	neg	r24
 180:	9f 4f       	sbci	r25, 0xFF	; 255
 182:	0c 94 c4 00 	jmp	0x188	; 0x188 <__utoa_common>

00000186 <__utoa_ncheck>:
 186:	bb 27       	eor	r27, r27

00000188 <__utoa_common>:
 188:	fb 01       	movw	r30, r22
 18a:	55 27       	eor	r21, r21
 18c:	aa 27       	eor	r26, r26
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	aa 1f       	adc	r26, r26
 194:	a4 17       	cp	r26, r20
 196:	10 f0       	brcs	.+4      	; 0x19c <__utoa_common+0x14>
 198:	a4 1b       	sub	r26, r20
 19a:	83 95       	inc	r24
 19c:	50 51       	subi	r21, 0x10	; 16
 19e:	b9 f7       	brne	.-18     	; 0x18e <__utoa_common+0x6>
 1a0:	a0 5d       	subi	r26, 0xD0	; 208
 1a2:	aa 33       	cpi	r26, 0x3A	; 58
 1a4:	08 f0       	brcs	.+2      	; 0x1a8 <__utoa_common+0x20>
 1a6:	a9 5d       	subi	r26, 0xD9	; 217
 1a8:	a1 93       	st	Z+, r26
 1aa:	00 97       	sbiw	r24, 0x00	; 0
 1ac:	79 f7       	brne	.-34     	; 0x18c <__utoa_common+0x4>
 1ae:	b1 11       	cpse	r27, r1
 1b0:	b1 93       	st	Z+, r27
 1b2:	11 92       	st	Z+, r1
 1b4:	cb 01       	movw	r24, r22
 1b6:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <strrev>

000001ba <strrev>:
 1ba:	dc 01       	movw	r26, r24
 1bc:	fc 01       	movw	r30, r24
 1be:	67 2f       	mov	r22, r23
 1c0:	71 91       	ld	r23, Z+
 1c2:	77 23       	and	r23, r23
 1c4:	e1 f7       	brne	.-8      	; 0x1be <strrev+0x4>
 1c6:	32 97       	sbiw	r30, 0x02	; 2
 1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <strrev+0x18>
 1ca:	7c 91       	ld	r23, X
 1cc:	6d 93       	st	X+, r22
 1ce:	70 83       	st	Z, r23
 1d0:	62 91       	ld	r22, -Z
 1d2:	ae 17       	cp	r26, r30
 1d4:	bf 07       	cpc	r27, r31
 1d6:	c8 f3       	brcs	.-14     	; 0x1ca <strrev+0x10>
 1d8:	08 95       	ret

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
